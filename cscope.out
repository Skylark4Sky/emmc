cscope 15 $HOME/emmc -q 0000014783 0002163848
	@code/Libararies/CMSIS/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@code/Libararies/CMSIS/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@code/Libararies/CMSIS/stm32f10x.h

33 #i‚de‡
__STM32F10x_H


34 
	#__STM32F10x_H


	)

36 #ifde‡
__˝lu•lus


48 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

53 
	#STM32F10X_HD


	)

75 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


91 #i‡!
deföed
 
HSE_VALUE


92 #ifde‡
STM32F10X_CL


93 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

95 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

104 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

106 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

111 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

112 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x03Ë

	)

113 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

114 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

	)

115 | (
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

116 | 
__STM32F10X_STDPERIPH_VERSION_SUB2
)

129 #ifde‡
STM32F10X_XL


130 
	#__MPU_PRESENT
 1

	)

132 
	#__MPU_PRESENT
 0

	)

134 
	#__NVIC_PRIO_BITS
 4

	)

135 
	#__Víd‹_SysTickC⁄fig
 0

	)

141 
	eIRQn


144 
N⁄MaskabÀI¡_IRQn
 = -14,

145 
Mem‹yM™agemít_IRQn
 = -12,

146 
BusFau…_IRQn
 = -11,

147 
UßgeFau…_IRQn
 = -10,

148 
SVCÆl_IRQn
 = -5,

149 
DebugM⁄ô‹_IRQn
 = -4,

150 
PídSV_IRQn
 = -2,

151 
SysTick_IRQn
 = -1,

154 
WWDG_IRQn
 = 0,

155 
PVD_IRQn
 = 1,

156 
TAMPER_IRQn
 = 2,

157 
RTC_IRQn
 = 3,

158 
FLASH_IRQn
 = 4,

159 
RCC_IRQn
 = 5,

160 
EXTI0_IRQn
 = 6,

161 
EXTI1_IRQn
 = 7,

162 
EXTI2_IRQn
 = 8,

163 
EXTI3_IRQn
 = 9,

164 
EXTI4_IRQn
 = 10,

165 
DMA1_Ch™√l1_IRQn
 = 11,

166 
DMA1_Ch™√l2_IRQn
 = 12,

167 
DMA1_Ch™√l3_IRQn
 = 13,

168 
DMA1_Ch™√l4_IRQn
 = 14,

169 
DMA1_Ch™√l5_IRQn
 = 15,

170 
DMA1_Ch™√l6_IRQn
 = 16,

171 
DMA1_Ch™√l7_IRQn
 = 17,

173 #ifde‡
STM32F10X_LD


174 
ADC1_2_IRQn
 = 18,

175 
USB_HP_CAN1_TX_IRQn
 = 19,

176 
USB_LP_CAN1_RX0_IRQn
 = 20,

177 
CAN1_RX1_IRQn
 = 21,

178 
CAN1_SCE_IRQn
 = 22,

179 
EXTI9_5_IRQn
 = 23,

180 
TIM1_BRK_IRQn
 = 24,

181 
TIM1_UP_IRQn
 = 25,

182 
TIM1_TRG_COM_IRQn
 = 26,

183 
TIM1_CC_IRQn
 = 27,

184 
TIM2_IRQn
 = 28,

185 
TIM3_IRQn
 = 29,

186 
I2C1_EV_IRQn
 = 31,

187 
I2C1_ER_IRQn
 = 32,

188 
SPI1_IRQn
 = 35,

189 
USART1_IRQn
 = 37,

190 
USART2_IRQn
 = 38,

191 
EXTI15_10_IRQn
 = 40,

192 
RTCAœrm_IRQn
 = 41,

193 
USBWakeUp_IRQn
 = 42

196 #ifde‡
STM32F10X_LD_VL


197 
ADC1_IRQn
 = 18,

198 
EXTI9_5_IRQn
 = 23,

199 
TIM1_BRK_TIM15_IRQn
 = 24,

200 
TIM1_UP_TIM16_IRQn
 = 25,

201 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

202 
TIM1_CC_IRQn
 = 27,

203 
TIM2_IRQn
 = 28,

204 
TIM3_IRQn
 = 29,

205 
I2C1_EV_IRQn
 = 31,

206 
I2C1_ER_IRQn
 = 32,

207 
SPI1_IRQn
 = 35,

208 
USART1_IRQn
 = 37,

209 
USART2_IRQn
 = 38,

210 
EXTI15_10_IRQn
 = 40,

211 
RTCAœrm_IRQn
 = 41,

212 
CEC_IRQn
 = 42,

213 
TIM6_DAC_IRQn
 = 54,

214 
TIM7_IRQn
 = 55

217 #ifde‡
STM32F10X_MD


218 
ADC1_2_IRQn
 = 18,

219 
USB_HP_CAN1_TX_IRQn
 = 19,

220 
USB_LP_CAN1_RX0_IRQn
 = 20,

221 
CAN1_RX1_IRQn
 = 21,

222 
CAN1_SCE_IRQn
 = 22,

223 
EXTI9_5_IRQn
 = 23,

224 
TIM1_BRK_IRQn
 = 24,

225 
TIM1_UP_IRQn
 = 25,

226 
TIM1_TRG_COM_IRQn
 = 26,

227 
TIM1_CC_IRQn
 = 27,

228 
TIM2_IRQn
 = 28,

229 
TIM3_IRQn
 = 29,

230 
TIM4_IRQn
 = 30,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
I2C2_EV_IRQn
 = 33,

234 
I2C2_ER_IRQn
 = 34,

235 
SPI1_IRQn
 = 35,

236 
SPI2_IRQn
 = 36,

237 
USART1_IRQn
 = 37,

238 
USART2_IRQn
 = 38,

239 
USART3_IRQn
 = 39,

240 
EXTI15_10_IRQn
 = 40,

241 
RTCAœrm_IRQn
 = 41,

242 
USBWakeUp_IRQn
 = 42

245 #ifde‡
STM32F10X_MD_VL


246 
ADC1_IRQn
 = 18,

247 
EXTI9_5_IRQn
 = 23,

248 
TIM1_BRK_TIM15_IRQn
 = 24,

249 
TIM1_UP_TIM16_IRQn
 = 25,

250 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

251 
TIM1_CC_IRQn
 = 27,

252 
TIM2_IRQn
 = 28,

253 
TIM3_IRQn
 = 29,

254 
TIM4_IRQn
 = 30,

255 
I2C1_EV_IRQn
 = 31,

256 
I2C1_ER_IRQn
 = 32,

257 
I2C2_EV_IRQn
 = 33,

258 
I2C2_ER_IRQn
 = 34,

259 
SPI1_IRQn
 = 35,

260 
SPI2_IRQn
 = 36,

261 
USART1_IRQn
 = 37,

262 
USART2_IRQn
 = 38,

263 
USART3_IRQn
 = 39,

264 
EXTI15_10_IRQn
 = 40,

265 
RTCAœrm_IRQn
 = 41,

266 
CEC_IRQn
 = 42,

267 
TIM6_DAC_IRQn
 = 54,

268 
TIM7_IRQn
 = 55

271 #ifde‡
STM32F10X_HD


272 
ADC1_2_IRQn
 = 18,

273 
USB_HP_CAN1_TX_IRQn
 = 19,

274 
USB_LP_CAN1_RX0_IRQn
 = 20,

275 
CAN1_RX1_IRQn
 = 21,

276 
CAN1_SCE_IRQn
 = 22,

277 
EXTI9_5_IRQn
 = 23,

278 
TIM1_BRK_IRQn
 = 24,

279 
TIM1_UP_IRQn
 = 25,

280 
TIM1_TRG_COM_IRQn
 = 26,

281 
TIM1_CC_IRQn
 = 27,

282 
TIM2_IRQn
 = 28,

283 
TIM3_IRQn
 = 29,

284 
TIM4_IRQn
 = 30,

285 
I2C1_EV_IRQn
 = 31,

286 
I2C1_ER_IRQn
 = 32,

287 
I2C2_EV_IRQn
 = 33,

288 
I2C2_ER_IRQn
 = 34,

289 
SPI1_IRQn
 = 35,

290 
SPI2_IRQn
 = 36,

291 
USART1_IRQn
 = 37,

292 
USART2_IRQn
 = 38,

293 
USART3_IRQn
 = 39,

294 
EXTI15_10_IRQn
 = 40,

295 
RTCAœrm_IRQn
 = 41,

296 
USBWakeUp_IRQn
 = 42,

297 
TIM8_BRK_IRQn
 = 43,

298 
TIM8_UP_IRQn
 = 44,

299 
TIM8_TRG_COM_IRQn
 = 45,

300 
TIM8_CC_IRQn
 = 46,

301 
ADC3_IRQn
 = 47,

302 
FSMC_IRQn
 = 48,

303 
SDIO_IRQn
 = 49,

304 
TIM5_IRQn
 = 50,

305 
SPI3_IRQn
 = 51,

306 
UART4_IRQn
 = 52,

307 
UART5_IRQn
 = 53,

308 
TIM6_IRQn
 = 54,

309 
TIM7_IRQn
 = 55,

310 
DMA2_Ch™√l1_IRQn
 = 56,

311 
DMA2_Ch™√l2_IRQn
 = 57,

312 
DMA2_Ch™√l3_IRQn
 = 58,

313 
DMA2_Ch™√l4_5_IRQn
 = 59

316 #ifde‡
STM32F10X_XL


317 
ADC1_2_IRQn
 = 18,

318 
USB_HP_CAN1_TX_IRQn
 = 19,

319 
USB_LP_CAN1_RX0_IRQn
 = 20,

320 
CAN1_RX1_IRQn
 = 21,

321 
CAN1_SCE_IRQn
 = 22,

322 
EXTI9_5_IRQn
 = 23,

323 
TIM1_BRK_TIM9_IRQn
 = 24,

324 
TIM1_UP_TIM10_IRQn
 = 25,

325 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

326 
TIM1_CC_IRQn
 = 27,

327 
TIM2_IRQn
 = 28,

328 
TIM3_IRQn
 = 29,

329 
TIM4_IRQn
 = 30,

330 
I2C1_EV_IRQn
 = 31,

331 
I2C1_ER_IRQn
 = 32,

332 
I2C2_EV_IRQn
 = 33,

333 
I2C2_ER_IRQn
 = 34,

334 
SPI1_IRQn
 = 35,

335 
SPI2_IRQn
 = 36,

336 
USART1_IRQn
 = 37,

337 
USART2_IRQn
 = 38,

338 
USART3_IRQn
 = 39,

339 
EXTI15_10_IRQn
 = 40,

340 
RTCAœrm_IRQn
 = 41,

341 
USBWakeUp_IRQn
 = 42,

342 
TIM8_BRK_TIM12_IRQn
 = 43,

343 
TIM8_UP_TIM13_IRQn
 = 44,

344 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

345 
TIM8_CC_IRQn
 = 46,

346 
ADC3_IRQn
 = 47,

347 
FSMC_IRQn
 = 48,

348 
SDIO_IRQn
 = 49,

349 
TIM5_IRQn
 = 50,

350 
SPI3_IRQn
 = 51,

351 
UART4_IRQn
 = 52,

352 
UART5_IRQn
 = 53,

353 
TIM6_IRQn
 = 54,

354 
TIM7_IRQn
 = 55,

355 
DMA2_Ch™√l1_IRQn
 = 56,

356 
DMA2_Ch™√l2_IRQn
 = 57,

357 
DMA2_Ch™√l3_IRQn
 = 58,

358 
DMA2_Ch™√l4_5_IRQn
 = 59

361 #ifde‡
STM32F10X_CL


362 
ADC1_2_IRQn
 = 18,

363 
CAN1_TX_IRQn
 = 19,

364 
CAN1_RX0_IRQn
 = 20,

365 
CAN1_RX1_IRQn
 = 21,

366 
CAN1_SCE_IRQn
 = 22,

367 
EXTI9_5_IRQn
 = 23,

368 
TIM1_BRK_IRQn
 = 24,

369 
TIM1_UP_IRQn
 = 25,

370 
TIM1_TRG_COM_IRQn
 = 26,

371 
TIM1_CC_IRQn
 = 27,

372 
TIM2_IRQn
 = 28,

373 
TIM3_IRQn
 = 29,

374 
TIM4_IRQn
 = 30,

375 
I2C1_EV_IRQn
 = 31,

376 
I2C1_ER_IRQn
 = 32,

377 
I2C2_EV_IRQn
 = 33,

378 
I2C2_ER_IRQn
 = 34,

379 
SPI1_IRQn
 = 35,

380 
SPI2_IRQn
 = 36,

381 
USART1_IRQn
 = 37,

382 
USART2_IRQn
 = 38,

383 
USART3_IRQn
 = 39,

384 
EXTI15_10_IRQn
 = 40,

385 
RTCAœrm_IRQn
 = 41,

386 
OTG_FS_WKUP_IRQn
 = 42,

387 
TIM5_IRQn
 = 50,

388 
SPI3_IRQn
 = 51,

389 
UART4_IRQn
 = 52,

390 
UART5_IRQn
 = 53,

391 
TIM6_IRQn
 = 54,

392 
TIM7_IRQn
 = 55,

393 
DMA2_Ch™√l1_IRQn
 = 56,

394 
DMA2_Ch™√l2_IRQn
 = 57,

395 
DMA2_Ch™√l3_IRQn
 = 58,

396 
DMA2_Ch™√l4_IRQn
 = 59,

397 
DMA2_Ch™√l5_IRQn
 = 60,

398 
ETH_IRQn
 = 61,

399 
ETH_WKUP_IRQn
 = 62,

400 
CAN2_TX_IRQn
 = 63,

401 
CAN2_RX0_IRQn
 = 64,

402 
CAN2_RX1_IRQn
 = 65,

403 
CAN2_SCE_IRQn
 = 66,

404 
OTG_FS_IRQn
 = 67

406 } 
	tIRQn_Ty≥
;

412 
	~"c‹e_cm3.h
"

413 
	~"sy°em_°m32f10x.h
"

414 
	~<°döt.h
>

421 
öt32_t
 
	ts32
;

422 
öt16_t
 
	ts16
;

423 
öt8_t
 
	ts8
;

425 c⁄° 
	töt32_t
 
	tsc32
;

426 c⁄° 
	töt16_t
 
	tsc16
;

427 c⁄° 
	töt8_t
 
	tsc8
;

429 
__IO
 
	töt32_t
 
	tvs32
;

430 
__IO
 
	töt16_t
 
	tvs16
;

431 
__IO
 
	töt8_t
 
	tvs8
;

433 
__I
 
	töt32_t
 
	tvsc32
;

434 
__I
 
	töt16_t
 
	tvsc16
;

435 
__I
 
	töt8_t
 
	tvsc8
;

437 
uöt32_t
 
	tu32
;

438 
uöt16_t
 
	tu16
;

439 
uöt8_t
 
	tu8
;

441 c⁄° 
	tuöt32_t
 
	tuc32
;

442 c⁄° 
	tuöt16_t
 
	tuc16
;

443 c⁄° 
	tuöt8_t
 
	tuc8
;

445 
__IO
 
	tuöt32_t
 
	tvu32
;

446 
__IO
 
	tuöt16_t
 
	tvu16
;

447 
__IO
 
	tuöt8_t
 
	tvu8
;

449 
__I
 
	tuöt32_t
 
	tvuc32
;

450 
__I
 
	tuöt16_t
 
	tvuc16
;

451 
__I
 
	tuöt8_t
 
	tvuc8
;

453 #i‚de‡
__˝lu•lus


454 íum {
FALSE
 = 0, 
TRUE
 = !FALSE} 
	tboﬁ
;

457 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

459 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

460 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

462 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

465 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

466 
	#HSE_VÆue
 
HSE_VALUE


	)

467 
	#HSI_VÆue
 
HSI_VALUE


	)

482 
__IO
 
uöt32_t
 
SR
;

483 
__IO
 
uöt32_t
 
CR1
;

484 
__IO
 
uöt32_t
 
CR2
;

485 
__IO
 
uöt32_t
 
SMPR1
;

486 
__IO
 
uöt32_t
 
SMPR2
;

487 
__IO
 
uöt32_t
 
JOFR1
;

488 
__IO
 
uöt32_t
 
JOFR2
;

489 
__IO
 
uöt32_t
 
JOFR3
;

490 
__IO
 
uöt32_t
 
JOFR4
;

491 
__IO
 
uöt32_t
 
HTR
;

492 
__IO
 
uöt32_t
 
LTR
;

493 
__IO
 
uöt32_t
 
SQR1
;

494 
__IO
 
uöt32_t
 
SQR2
;

495 
__IO
 
uöt32_t
 
SQR3
;

496 
__IO
 
uöt32_t
 
JSQR
;

497 
__IO
 
uöt32_t
 
JDR1
;

498 
__IO
 
uöt32_t
 
JDR2
;

499 
__IO
 
uöt32_t
 
JDR3
;

500 
__IO
 
uöt32_t
 
JDR4
;

501 
__IO
 
uöt32_t
 
DR
;

502 } 
	tADC_Ty≥Def
;

510 
uöt32_t
 
RESERVED0
;

511 
__IO
 
uöt16_t
 
DR1
;

512 
uöt16_t
 
RESERVED1
;

513 
__IO
 
uöt16_t
 
DR2
;

514 
uöt16_t
 
RESERVED2
;

515 
__IO
 
uöt16_t
 
DR3
;

516 
uöt16_t
 
RESERVED3
;

517 
__IO
 
uöt16_t
 
DR4
;

518 
uöt16_t
 
RESERVED4
;

519 
__IO
 
uöt16_t
 
DR5
;

520 
uöt16_t
 
RESERVED5
;

521 
__IO
 
uöt16_t
 
DR6
;

522 
uöt16_t
 
RESERVED6
;

523 
__IO
 
uöt16_t
 
DR7
;

524 
uöt16_t
 
RESERVED7
;

525 
__IO
 
uöt16_t
 
DR8
;

526 
uöt16_t
 
RESERVED8
;

527 
__IO
 
uöt16_t
 
DR9
;

528 
uöt16_t
 
RESERVED9
;

529 
__IO
 
uöt16_t
 
DR10
;

530 
uöt16_t
 
RESERVED10
;

531 
__IO
 
uöt16_t
 
RTCCR
;

532 
uöt16_t
 
RESERVED11
;

533 
__IO
 
uöt16_t
 
CR
;

534 
uöt16_t
 
RESERVED12
;

535 
__IO
 
uöt16_t
 
CSR
;

536 
uöt16_t
 
RESERVED13
[5];

537 
__IO
 
uöt16_t
 
DR11
;

538 
uöt16_t
 
RESERVED14
;

539 
__IO
 
uöt16_t
 
DR12
;

540 
uöt16_t
 
RESERVED15
;

541 
__IO
 
uöt16_t
 
DR13
;

542 
uöt16_t
 
RESERVED16
;

543 
__IO
 
uöt16_t
 
DR14
;

544 
uöt16_t
 
RESERVED17
;

545 
__IO
 
uöt16_t
 
DR15
;

546 
uöt16_t
 
RESERVED18
;

547 
__IO
 
uöt16_t
 
DR16
;

548 
uöt16_t
 
RESERVED19
;

549 
__IO
 
uöt16_t
 
DR17
;

550 
uöt16_t
 
RESERVED20
;

551 
__IO
 
uöt16_t
 
DR18
;

552 
uöt16_t
 
RESERVED21
;

553 
__IO
 
uöt16_t
 
DR19
;

554 
uöt16_t
 
RESERVED22
;

555 
__IO
 
uöt16_t
 
DR20
;

556 
uöt16_t
 
RESERVED23
;

557 
__IO
 
uöt16_t
 
DR21
;

558 
uöt16_t
 
RESERVED24
;

559 
__IO
 
uöt16_t
 
DR22
;

560 
uöt16_t
 
RESERVED25
;

561 
__IO
 
uöt16_t
 
DR23
;

562 
uöt16_t
 
RESERVED26
;

563 
__IO
 
uöt16_t
 
DR24
;

564 
uöt16_t
 
RESERVED27
;

565 
__IO
 
uöt16_t
 
DR25
;

566 
uöt16_t
 
RESERVED28
;

567 
__IO
 
uöt16_t
 
DR26
;

568 
uöt16_t
 
RESERVED29
;

569 
__IO
 
uöt16_t
 
DR27
;

570 
uöt16_t
 
RESERVED30
;

571 
__IO
 
uöt16_t
 
DR28
;

572 
uöt16_t
 
RESERVED31
;

573 
__IO
 
uöt16_t
 
DR29
;

574 
uöt16_t
 
RESERVED32
;

575 
__IO
 
uöt16_t
 
DR30
;

576 
uöt16_t
 
RESERVED33
;

577 
__IO
 
uöt16_t
 
DR31
;

578 
uöt16_t
 
RESERVED34
;

579 
__IO
 
uöt16_t
 
DR32
;

580 
uöt16_t
 
RESERVED35
;

581 
__IO
 
uöt16_t
 
DR33
;

582 
uöt16_t
 
RESERVED36
;

583 
__IO
 
uöt16_t
 
DR34
;

584 
uöt16_t
 
RESERVED37
;

585 
__IO
 
uöt16_t
 
DR35
;

586 
uöt16_t
 
RESERVED38
;

587 
__IO
 
uöt16_t
 
DR36
;

588 
uöt16_t
 
RESERVED39
;

589 
__IO
 
uöt16_t
 
DR37
;

590 
uöt16_t
 
RESERVED40
;

591 
__IO
 
uöt16_t
 
DR38
;

592 
uöt16_t
 
RESERVED41
;

593 
__IO
 
uöt16_t
 
DR39
;

594 
uöt16_t
 
RESERVED42
;

595 
__IO
 
uöt16_t
 
DR40
;

596 
uöt16_t
 
RESERVED43
;

597 
__IO
 
uöt16_t
 
DR41
;

598 
uöt16_t
 
RESERVED44
;

599 
__IO
 
uöt16_t
 
DR42
;

600 
uöt16_t
 
RESERVED45
;

601 } 
	tBKP_Ty≥Def
;

609 
__IO
 
uöt32_t
 
TIR
;

610 
__IO
 
uöt32_t
 
TDTR
;

611 
__IO
 
uöt32_t
 
TDLR
;

612 
__IO
 
uöt32_t
 
TDHR
;

613 } 
	tCAN_TxMaûBox_Ty≥Def
;

621 
__IO
 
uöt32_t
 
RIR
;

622 
__IO
 
uöt32_t
 
RDTR
;

623 
__IO
 
uöt32_t
 
RDLR
;

624 
__IO
 
uöt32_t
 
RDHR
;

625 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

633 
__IO
 
uöt32_t
 
FR1
;

634 
__IO
 
uöt32_t
 
FR2
;

635 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

643 
__IO
 
uöt32_t
 
MCR
;

644 
__IO
 
uöt32_t
 
MSR
;

645 
__IO
 
uöt32_t
 
TSR
;

646 
__IO
 
uöt32_t
 
RF0R
;

647 
__IO
 
uöt32_t
 
RF1R
;

648 
__IO
 
uöt32_t
 
IER
;

649 
__IO
 
uöt32_t
 
ESR
;

650 
__IO
 
uöt32_t
 
BTR
;

651 
uöt32_t
 
RESERVED0
[88];

652 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

653 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

654 
uöt32_t
 
RESERVED1
[12];

655 
__IO
 
uöt32_t
 
FMR
;

656 
__IO
 
uöt32_t
 
FM1R
;

657 
uöt32_t
 
RESERVED2
;

658 
__IO
 
uöt32_t
 
FS1R
;

659 
uöt32_t
 
RESERVED3
;

660 
__IO
 
uöt32_t
 
FFA1R
;

661 
uöt32_t
 
RESERVED4
;

662 
__IO
 
uöt32_t
 
FA1R
;

663 
uöt32_t
 
RESERVED5
[8];

664 #i‚de‡
STM32F10X_CL


665 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

667 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

669 } 
	tCAN_Ty≥Def
;

676 
__IO
 
uöt32_t
 
CFGR
;

677 
__IO
 
uöt32_t
 
OAR
;

678 
__IO
 
uöt32_t
 
PRES
;

679 
__IO
 
uöt32_t
 
ESR
;

680 
__IO
 
uöt32_t
 
CSR
;

681 
__IO
 
uöt32_t
 
TXD
;

682 
__IO
 
uöt32_t
 
RXD
;

683 } 
	tCEC_Ty≥Def
;

691 
__IO
 
uöt32_t
 
DR
;

692 
__IO
 
uöt8_t
 
IDR
;

693 
uöt8_t
 
RESERVED0
;

694 
uöt16_t
 
RESERVED1
;

695 
__IO
 
uöt32_t
 
CR
;

696 } 
	tCRC_Ty≥Def
;

704 
__IO
 
uöt32_t
 
CR
;

705 
__IO
 
uöt32_t
 
SWTRIGR
;

706 
__IO
 
uöt32_t
 
DHR12R1
;

707 
__IO
 
uöt32_t
 
DHR12L1
;

708 
__IO
 
uöt32_t
 
DHR8R1
;

709 
__IO
 
uöt32_t
 
DHR12R2
;

710 
__IO
 
uöt32_t
 
DHR12L2
;

711 
__IO
 
uöt32_t
 
DHR8R2
;

712 
__IO
 
uöt32_t
 
DHR12RD
;

713 
__IO
 
uöt32_t
 
DHR12LD
;

714 
__IO
 
uöt32_t
 
DHR8RD
;

715 
__IO
 
uöt32_t
 
DOR1
;

716 
__IO
 
uöt32_t
 
DOR2
;

717 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

718 
__IO
 
uöt32_t
 
SR
;

720 } 
	tDAC_Ty≥Def
;

728 
__IO
 
uöt32_t
 
IDCODE
;

729 
__IO
 
uöt32_t
 
CR
;

730 }
	tDBGMCU_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CCR
;

739 
__IO
 
uöt32_t
 
CNDTR
;

740 
__IO
 
uöt32_t
 
CPAR
;

741 
__IO
 
uöt32_t
 
CMAR
;

742 } 
	tDMA_Ch™√l_Ty≥Def
;

746 
__IO
 
uöt32_t
 
ISR
;

747 
__IO
 
uöt32_t
 
IFCR
;

748 } 
	tDMA_Ty≥Def
;

756 
__IO
 
uöt32_t
 
MACCR
;

757 
__IO
 
uöt32_t
 
MACFFR
;

758 
__IO
 
uöt32_t
 
MACHTHR
;

759 
__IO
 
uöt32_t
 
MACHTLR
;

760 
__IO
 
uöt32_t
 
MACMIIAR
;

761 
__IO
 
uöt32_t
 
MACMIIDR
;

762 
__IO
 
uöt32_t
 
MACFCR
;

763 
__IO
 
uöt32_t
 
MACVLANTR
;

764 
uöt32_t
 
RESERVED0
[2];

765 
__IO
 
uöt32_t
 
MACRWUFFR
;

766 
__IO
 
uöt32_t
 
MACPMTCSR
;

767 
uöt32_t
 
RESERVED1
[2];

768 
__IO
 
uöt32_t
 
MACSR
;

769 
__IO
 
uöt32_t
 
MACIMR
;

770 
__IO
 
uöt32_t
 
MACA0HR
;

771 
__IO
 
uöt32_t
 
MACA0LR
;

772 
__IO
 
uöt32_t
 
MACA1HR
;

773 
__IO
 
uöt32_t
 
MACA1LR
;

774 
__IO
 
uöt32_t
 
MACA2HR
;

775 
__IO
 
uöt32_t
 
MACA2LR
;

776 
__IO
 
uöt32_t
 
MACA3HR
;

777 
__IO
 
uöt32_t
 
MACA3LR
;

778 
uöt32_t
 
RESERVED2
[40];

779 
__IO
 
uöt32_t
 
MMCCR
;

780 
__IO
 
uöt32_t
 
MMCRIR
;

781 
__IO
 
uöt32_t
 
MMCTIR
;

782 
__IO
 
uöt32_t
 
MMCRIMR
;

783 
__IO
 
uöt32_t
 
MMCTIMR
;

784 
uöt32_t
 
RESERVED3
[14];

785 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

786 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

787 
uöt32_t
 
RESERVED4
[5];

788 
__IO
 
uöt32_t
 
MMCTGFCR
;

789 
uöt32_t
 
RESERVED5
[10];

790 
__IO
 
uöt32_t
 
MMCRFCECR
;

791 
__IO
 
uöt32_t
 
MMCRFAECR
;

792 
uöt32_t
 
RESERVED6
[10];

793 
__IO
 
uöt32_t
 
MMCRGUFCR
;

794 
uöt32_t
 
RESERVED7
[334];

795 
__IO
 
uöt32_t
 
PTPTSCR
;

796 
__IO
 
uöt32_t
 
PTPSSIR
;

797 
__IO
 
uöt32_t
 
PTPTSHR
;

798 
__IO
 
uöt32_t
 
PTPTSLR
;

799 
__IO
 
uöt32_t
 
PTPTSHUR
;

800 
__IO
 
uöt32_t
 
PTPTSLUR
;

801 
__IO
 
uöt32_t
 
PTPTSAR
;

802 
__IO
 
uöt32_t
 
PTPTTHR
;

803 
__IO
 
uöt32_t
 
PTPTTLR
;

804 
uöt32_t
 
RESERVED8
[567];

805 
__IO
 
uöt32_t
 
DMABMR
;

806 
__IO
 
uöt32_t
 
DMATPDR
;

807 
__IO
 
uöt32_t
 
DMARPDR
;

808 
__IO
 
uöt32_t
 
DMARDLAR
;

809 
__IO
 
uöt32_t
 
DMATDLAR
;

810 
__IO
 
uöt32_t
 
DMASR
;

811 
__IO
 
uöt32_t
 
DMAOMR
;

812 
__IO
 
uöt32_t
 
DMAIER
;

813 
__IO
 
uöt32_t
 
DMAMFBOCR
;

814 
uöt32_t
 
RESERVED9
[9];

815 
__IO
 
uöt32_t
 
DMACHTDR
;

816 
__IO
 
uöt32_t
 
DMACHRDR
;

817 
__IO
 
uöt32_t
 
DMACHTBAR
;

818 
__IO
 
uöt32_t
 
DMACHRBAR
;

819 } 
	tETH_Ty≥Def
;

827 
__IO
 
uöt32_t
 
IMR
;

828 
__IO
 
uöt32_t
 
EMR
;

829 
__IO
 
uöt32_t
 
RTSR
;

830 
__IO
 
uöt32_t
 
FTSR
;

831 
__IO
 
uöt32_t
 
SWIER
;

832 
__IO
 
uöt32_t
 
PR
;

833 } 
	tEXTI_Ty≥Def
;

841 
__IO
 
uöt32_t
 
ACR
;

842 
__IO
 
uöt32_t
 
KEYR
;

843 
__IO
 
uöt32_t
 
OPTKEYR
;

844 
__IO
 
uöt32_t
 
SR
;

845 
__IO
 
uöt32_t
 
CR
;

846 
__IO
 
uöt32_t
 
AR
;

847 
__IO
 
uöt32_t
 
RESERVED
;

848 
__IO
 
uöt32_t
 
OBR
;

849 
__IO
 
uöt32_t
 
WRPR
;

850 #ifde‡
STM32F10X_XL


851 
uöt32_t
 
RESERVED1
[8];

852 
__IO
 
uöt32_t
 
KEYR2
;

853 
uöt32_t
 
RESERVED2
;

854 
__IO
 
uöt32_t
 
SR2
;

855 
__IO
 
uöt32_t
 
CR2
;

856 
__IO
 
uöt32_t
 
AR2
;

858 } 
	tFLASH_Ty≥Def
;

866 
__IO
 
uöt16_t
 
RDP
;

867 
__IO
 
uöt16_t
 
USER
;

868 
__IO
 
uöt16_t
 
D©a0
;

869 
__IO
 
uöt16_t
 
D©a1
;

870 
__IO
 
uöt16_t
 
WRP0
;

871 
__IO
 
uöt16_t
 
WRP1
;

872 
__IO
 
uöt16_t
 
WRP2
;

873 
__IO
 
uöt16_t
 
WRP3
;

874 } 
	tOB_Ty≥Def
;

882 
__IO
 
uöt32_t
 
BTCR
[8];

883 } 
	tFSMC_B™k1_Ty≥Def
;

891 
__IO
 
uöt32_t
 
BWTR
[7];

892 } 
	tFSMC_B™k1E_Ty≥Def
;

900 
__IO
 
uöt32_t
 
PCR2
;

901 
__IO
 
uöt32_t
 
SR2
;

902 
__IO
 
uöt32_t
 
PMEM2
;

903 
__IO
 
uöt32_t
 
PATT2
;

904 
uöt32_t
 
RESERVED0
;

905 
__IO
 
uöt32_t
 
ECCR2
;

906 } 
	tFSMC_B™k2_Ty≥Def
;

914 
__IO
 
uöt32_t
 
PCR3
;

915 
__IO
 
uöt32_t
 
SR3
;

916 
__IO
 
uöt32_t
 
PMEM3
;

917 
__IO
 
uöt32_t
 
PATT3
;

918 
uöt32_t
 
RESERVED0
;

919 
__IO
 
uöt32_t
 
ECCR3
;

920 } 
	tFSMC_B™k3_Ty≥Def
;

928 
__IO
 
uöt32_t
 
PCR4
;

929 
__IO
 
uöt32_t
 
SR4
;

930 
__IO
 
uöt32_t
 
PMEM4
;

931 
__IO
 
uöt32_t
 
PATT4
;

932 
__IO
 
uöt32_t
 
PIO4
;

933 } 
	tFSMC_B™k4_Ty≥Def
;

941 
__IO
 
uöt32_t
 
CRL
;

942 
__IO
 
uöt32_t
 
CRH
;

943 
__IO
 
uöt32_t
 
IDR
;

944 
__IO
 
uöt32_t
 
ODR
;

945 
__IO
 
uöt32_t
 
BSRR
;

946 
__IO
 
uöt32_t
 
BRR
;

947 
__IO
 
uöt32_t
 
LCKR
;

948 } 
	tGPIO_Ty≥Def
;

956 
__IO
 
uöt32_t
 
EVCR
;

957 
__IO
 
uöt32_t
 
MAPR
;

958 
__IO
 
uöt32_t
 
EXTICR
[4];

959 
uöt32_t
 
RESERVED0
;

960 
__IO
 
uöt32_t
 
MAPR2
;

961 } 
	tAFIO_Ty≥Def
;

968 
__IO
 
uöt16_t
 
CR1
;

969 
uöt16_t
 
RESERVED0
;

970 
__IO
 
uöt16_t
 
CR2
;

971 
uöt16_t
 
RESERVED1
;

972 
__IO
 
uöt16_t
 
OAR1
;

973 
uöt16_t
 
RESERVED2
;

974 
__IO
 
uöt16_t
 
OAR2
;

975 
uöt16_t
 
RESERVED3
;

976 
__IO
 
uöt16_t
 
DR
;

977 
uöt16_t
 
RESERVED4
;

978 
__IO
 
uöt16_t
 
SR1
;

979 
uöt16_t
 
RESERVED5
;

980 
__IO
 
uöt16_t
 
SR2
;

981 
uöt16_t
 
RESERVED6
;

982 
__IO
 
uöt16_t
 
CCR
;

983 
uöt16_t
 
RESERVED7
;

984 
__IO
 
uöt16_t
 
TRISE
;

985 
uöt16_t
 
RESERVED8
;

986 } 
	tI2C_Ty≥Def
;

994 
__IO
 
uöt32_t
 
KR
;

995 
__IO
 
uöt32_t
 
PR
;

996 
__IO
 
uöt32_t
 
RLR
;

997 
__IO
 
uöt32_t
 
SR
;

998 } 
	tIWDG_Ty≥Def
;

1006 
__IO
 
uöt32_t
 
CR
;

1007 
__IO
 
uöt32_t
 
CSR
;

1008 } 
	tPWR_Ty≥Def
;

1016 
__IO
 
uöt32_t
 
CR
;

1017 
__IO
 
uöt32_t
 
CFGR
;

1018 
__IO
 
uöt32_t
 
CIR
;

1019 
__IO
 
uöt32_t
 
APB2RSTR
;

1020 
__IO
 
uöt32_t
 
APB1RSTR
;

1021 
__IO
 
uöt32_t
 
AHBENR
;

1022 
__IO
 
uöt32_t
 
APB2ENR
;

1023 
__IO
 
uöt32_t
 
APB1ENR
;

1024 
__IO
 
uöt32_t
 
BDCR
;

1025 
__IO
 
uöt32_t
 
CSR
;

1027 #ifde‡
STM32F10X_CL


1028 
__IO
 
uöt32_t
 
AHBRSTR
;

1029 
__IO
 
uöt32_t
 
CFGR2
;

1032 #i‡
deföed
 
STM32F10X_LD_VL
 || deföed 
STM32F10X_MD_VL


1033 
uöt32_t
 
RESERVED0
;

1034 
__IO
 
uöt32_t
 
CFGR2
;

1036 } 
	tRCC_Ty≥Def
;

1044 
__IO
 
uöt16_t
 
CRH
;

1045 
uöt16_t
 
RESERVED0
;

1046 
__IO
 
uöt16_t
 
CRL
;

1047 
uöt16_t
 
RESERVED1
;

1048 
__IO
 
uöt16_t
 
PRLH
;

1049 
uöt16_t
 
RESERVED2
;

1050 
__IO
 
uöt16_t
 
PRLL
;

1051 
uöt16_t
 
RESERVED3
;

1052 
__IO
 
uöt16_t
 
DIVH
;

1053 
uöt16_t
 
RESERVED4
;

1054 
__IO
 
uöt16_t
 
DIVL
;

1055 
uöt16_t
 
RESERVED5
;

1056 
__IO
 
uöt16_t
 
CNTH
;

1057 
uöt16_t
 
RESERVED6
;

1058 
__IO
 
uöt16_t
 
CNTL
;

1059 
uöt16_t
 
RESERVED7
;

1060 
__IO
 
uöt16_t
 
ALRH
;

1061 
uöt16_t
 
RESERVED8
;

1062 
__IO
 
uöt16_t
 
ALRL
;

1063 
uöt16_t
 
RESERVED9
;

1064 } 
	tRTC_Ty≥Def
;

1072 
__IO
 
uöt32_t
 
POWER
;

1073 
__IO
 
uöt32_t
 
CLKCR
;

1074 
__IO
 
uöt32_t
 
ARG
;

1075 
__IO
 
uöt32_t
 
CMD
;

1076 
__I
 
uöt32_t
 
RESPCMD
;

1077 
__I
 
uöt32_t
 
RESP1
;

1078 
__I
 
uöt32_t
 
RESP2
;

1079 
__I
 
uöt32_t
 
RESP3
;

1080 
__I
 
uöt32_t
 
RESP4
;

1081 
__IO
 
uöt32_t
 
DTIMER
;

1082 
__IO
 
uöt32_t
 
DLEN
;

1083 
__IO
 
uöt32_t
 
DCTRL
;

1084 
__I
 
uöt32_t
 
DCOUNT
;

1085 
__I
 
uöt32_t
 
STA
;

1086 
__IO
 
uöt32_t
 
ICR
;

1087 
__IO
 
uöt32_t
 
MASK
;

1088 
uöt32_t
 
RESERVED0
[2];

1089 
__I
 
uöt32_t
 
FIFOCNT
;

1090 
uöt32_t
 
RESERVED1
[13];

1091 
__IO
 
uöt32_t
 
FIFO
;

1092 } 
	tSDIO_Ty≥Def
;

1100 
__IO
 
uöt16_t
 
CR1
;

1101 
uöt16_t
 
RESERVED0
;

1102 
__IO
 
uöt16_t
 
CR2
;

1103 
uöt16_t
 
RESERVED1
;

1104 
__IO
 
uöt16_t
 
SR
;

1105 
uöt16_t
 
RESERVED2
;

1106 
__IO
 
uöt16_t
 
DR
;

1107 
uöt16_t
 
RESERVED3
;

1108 
__IO
 
uöt16_t
 
CRCPR
;

1109 
uöt16_t
 
RESERVED4
;

1110 
__IO
 
uöt16_t
 
RXCRCR
;

1111 
uöt16_t
 
RESERVED5
;

1112 
__IO
 
uöt16_t
 
TXCRCR
;

1113 
uöt16_t
 
RESERVED6
;

1114 
__IO
 
uöt16_t
 
I2SCFGR
;

1115 
uöt16_t
 
RESERVED7
;

1116 
__IO
 
uöt16_t
 
I2SPR
;

1117 
uöt16_t
 
RESERVED8
;

1118 } 
	tSPI_Ty≥Def
;

1126 
__IO
 
uöt16_t
 
CR1
;

1127 
uöt16_t
 
RESERVED0
;

1128 
__IO
 
uöt16_t
 
CR2
;

1129 
uöt16_t
 
RESERVED1
;

1130 
__IO
 
uöt16_t
 
SMCR
;

1131 
uöt16_t
 
RESERVED2
;

1132 
__IO
 
uöt16_t
 
DIER
;

1133 
uöt16_t
 
RESERVED3
;

1134 
__IO
 
uöt16_t
 
SR
;

1135 
uöt16_t
 
RESERVED4
;

1136 
__IO
 
uöt16_t
 
EGR
;

1137 
uöt16_t
 
RESERVED5
;

1138 
__IO
 
uöt16_t
 
CCMR1
;

1139 
uöt16_t
 
RESERVED6
;

1140 
__IO
 
uöt16_t
 
CCMR2
;

1141 
uöt16_t
 
RESERVED7
;

1142 
__IO
 
uöt16_t
 
CCER
;

1143 
uöt16_t
 
RESERVED8
;

1144 
__IO
 
uöt16_t
 
CNT
;

1145 
uöt16_t
 
RESERVED9
;

1146 
__IO
 
uöt16_t
 
PSC
;

1147 
uöt16_t
 
RESERVED10
;

1148 
__IO
 
uöt16_t
 
ARR
;

1149 
uöt16_t
 
RESERVED11
;

1150 
__IO
 
uöt16_t
 
RCR
;

1151 
uöt16_t
 
RESERVED12
;

1152 
__IO
 
uöt16_t
 
CCR1
;

1153 
uöt16_t
 
RESERVED13
;

1154 
__IO
 
uöt16_t
 
CCR2
;

1155 
uöt16_t
 
RESERVED14
;

1156 
__IO
 
uöt16_t
 
CCR3
;

1157 
uöt16_t
 
RESERVED15
;

1158 
__IO
 
uöt16_t
 
CCR4
;

1159 
uöt16_t
 
RESERVED16
;

1160 
__IO
 
uöt16_t
 
BDTR
;

1161 
uöt16_t
 
RESERVED17
;

1162 
__IO
 
uöt16_t
 
DCR
;

1163 
uöt16_t
 
RESERVED18
;

1164 
__IO
 
uöt16_t
 
DMAR
;

1165 
uöt16_t
 
RESERVED19
;

1166 } 
	tTIM_Ty≥Def
;

1174 
__IO
 
uöt16_t
 
SR
;

1175 
uöt16_t
 
RESERVED0
;

1176 
__IO
 
uöt16_t
 
DR
;

1177 
uöt16_t
 
RESERVED1
;

1178 
__IO
 
uöt16_t
 
BRR
;

1179 
uöt16_t
 
RESERVED2
;

1180 
__IO
 
uöt16_t
 
CR1
;

1181 
uöt16_t
 
RESERVED3
;

1182 
__IO
 
uöt16_t
 
CR2
;

1183 
uöt16_t
 
RESERVED4
;

1184 
__IO
 
uöt16_t
 
CR3
;

1185 
uöt16_t
 
RESERVED5
;

1186 
__IO
 
uöt16_t
 
GTPR
;

1187 
uöt16_t
 
RESERVED6
;

1188 } 
	tUSART_Ty≥Def
;

1196 
__IO
 
uöt32_t
 
CR
;

1197 
__IO
 
uöt32_t
 
CFR
;

1198 
__IO
 
uöt32_t
 
SR
;

1199 } 
	tWWDG_Ty≥Def
;

1210 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1211 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1212 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1214 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1215 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1217 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1220 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1221 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1222 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1224 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1225 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1226 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1227 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1228 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1229 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1230 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1231 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1232 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1233 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1234 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1235 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1236 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1237 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1238 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1239 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1240 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1241 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1242 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1243 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1244 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1245 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1246 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1247 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1248 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1249 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1251 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1252 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1253 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1254 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1255 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1256 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1257 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1258 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1259 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1260 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1261 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1262 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1263 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1264 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1265 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1266 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1267 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1268 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1269 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1270 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1271 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1272 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1274 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1276 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1277 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1278 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1279 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1280 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1281 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1282 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1283 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1284 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1285 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1286 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1287 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1288 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1289 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1290 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1291 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1293 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1294 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1296 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1297 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1298 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1299 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1300 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1302 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1303 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1304 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1305 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1306 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1308 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1318 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1319 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1320 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1321 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1322 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1323 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1324 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1325 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1326 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1327 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1328 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1329 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1330 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1331 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1332 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1333 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1334 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1335 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1336 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1337 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1338 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1339 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1340 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1341 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1342 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1343 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1344 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1345 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1346 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1347 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1348 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1349 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1350 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1351 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1352 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1353 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1354 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1355 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1356 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1357 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1358 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1359 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1360 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1361 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1362 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1363 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1364 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1365 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1366 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1367 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1368 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1369 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1370 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1371 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1372 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1373 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1374 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1375 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1376 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1377 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1378 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1379 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1380 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1381 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1382 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1383 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1384 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1385 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1386 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1387 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1388 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1389 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1390 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1391 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1416 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1420 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1424 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1433 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1434 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1435 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1436 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1437 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1439 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1440 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1441 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1442 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1445 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1446 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1447 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1448 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1449 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1450 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1451 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1452 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1454 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1458 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1459 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1460 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1461 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1470 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1473 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1476 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1479 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1482 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1485 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1488 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1491 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1494 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1497 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1500 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1503 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1506 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1509 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1512 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1515 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1518 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1521 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1524 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1527 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1530 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1533 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1536 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1539 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1542 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1545 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1548 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1551 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1554 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1557 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1560 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1563 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1566 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1569 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1572 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1575 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1578 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1581 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1584 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1587 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1590 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1593 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1596 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1597 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1598 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1599 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1602 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1603 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1606 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1607 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1608 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1609 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1610 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1619 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1620 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1621 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1622 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1623 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1624 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1625 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1626 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1627 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1628 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1630 #ifde‡
STM32F10X_CL


1631 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1632 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1633 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1634 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1639 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1640 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1641 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1643 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1644 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1645 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1648 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1649 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1650 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1652 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1653 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1654 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1657 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1658 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1659 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1660 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1661 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1663 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1664 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1665 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1666 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1667 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1668 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1669 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1670 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1671 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1674 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1675 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1676 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1677 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1679 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1680 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1681 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1682 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1683 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1686 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1687 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1688 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1689 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1691 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1692 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1693 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1694 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1695 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1698 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1699 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1700 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1702 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1703 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1704 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1705 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1707 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1709 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1712 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1713 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1714 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1715 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1716 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1718 #ifde‡
STM32F10X_CL


1719 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1720 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1722 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1723 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1725 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1726 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1727 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1728 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1729 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1730 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1731 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1733 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1736 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1737 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1738 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1739 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1740 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1742 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1743 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1744 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1745 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1746 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1747 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1748 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1749 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1750 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1751 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1752 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1753 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1755 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1756 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1758 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1759 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1760 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1761 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1762 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1763 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1764 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1765 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1766 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1767 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1768 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1769 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1770 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1771 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1772 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1775 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1776 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1777 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1778 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1780 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1781 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1782 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1783 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1784 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1786 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1787 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1789 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1790 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1792 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1793 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1794 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1795 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1796 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1797 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1798 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1799 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1800 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1801 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1802 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1803 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1804 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1805 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1806 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1807 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1810 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1811 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1812 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1813 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1815 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1816 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1817 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1818 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1819 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1823 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1824 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1825 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1826 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1827 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1828 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1829 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1830 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1831 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1832 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1833 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1834 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1835 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1836 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1837 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1838 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1839 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1841 #ifde‡
STM32F10X_CL


1842 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1843 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1844 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1845 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1846 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1847 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1851 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1852 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1853 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1854 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1855 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1856 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1858 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1859 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1862 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1863 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1864 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1866 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1867 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1868 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1869 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1872 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1873 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1876 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1877 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1878 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1879 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1880 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1883 #ifde‡
STM32F10X_XL


1884 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1885 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1886 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1890 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1891 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1892 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1893 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1894 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1896 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1897 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1900 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1901 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1903 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1904 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1905 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1906 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1907 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1910 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1911 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1914 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1915 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1916 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1917 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1918 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1919 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1920 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1921 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1924 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1925 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1926 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1927 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1928 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1931 #ifde‡
STM32F10X_CL


1932 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

1935 #ifde‡
STM32F10X_XL


1936 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

1937 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

1938 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

1942 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1943 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1944 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1945 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1947 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1948 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1951 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1952 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1953 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1956 #ifde‡
STM32F10X_CL


1957 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

1958 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

1959 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

1960 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

1964 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

1965 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

1966 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

1967 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

1968 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

1969 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

1971 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1972 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

1975 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

1976 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

1977 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

1979 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1980 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

1981 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

1982 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

1985 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1986 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

1989 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1990 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

1991 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

1992 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

1993 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

1996 #ifde‡
STM32F10X_XL


1997 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

1998 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

1999 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2003 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2004 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2005 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2006 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2007 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2009 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

2010 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2013 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2014 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2016 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2017 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2018 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2019 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2020 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2023 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2024 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2027 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2028 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2029 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2030 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2031 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2032 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2033 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2034 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2037 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2038 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2039 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2040 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2041 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2044 #ifde‡
STM32F10X_CL


2045 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2048 #ifde‡
STM32F10X_XL


2049 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2050 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2051 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2055 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2056 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2057 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2059 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2060 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2061 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2064 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2065 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2066 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2067 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2069 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2070 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2073 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2074 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2075 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2076 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2077 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2078 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2079 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2080 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2081 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2083 #ifde‡
STM32F10X_CL


2085 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2086 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2090 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2091 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2092 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2093 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2094 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2096 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2097 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2098 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2099 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2100 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2101 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2102 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2103 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2104 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2105 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2106 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2107 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2108 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2109 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2110 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2111 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2114 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2115 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2116 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2117 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2118 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2120 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2121 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2122 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2123 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2124 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2125 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2126 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2127 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2128 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2129 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2130 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2131 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2132 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2133 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2134 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2135 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2138 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2139 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2140 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2141 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2142 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2144 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2145 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2146 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2147 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2148 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2149 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2150 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2151 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2152 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2155 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2156 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2157 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2158 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2161 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2162 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2163 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2164 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2165 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2166 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2167 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2168 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2169 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2171 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2172 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2173 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2174 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2175 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2178 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2181 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2182 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2185 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2187 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2191 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2212 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2214 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2215 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2216 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2218 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2219 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2220 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2222 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2223 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2224 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2226 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2227 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2228 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2230 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2231 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2232 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2234 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2235 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2236 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2238 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2239 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2240 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2242 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2243 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2244 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2246 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2248 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2249 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2250 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2252 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2253 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2254 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2256 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2257 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2258 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2260 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2261 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2262 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2264 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2265 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2266 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2268 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2269 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2270 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2272 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2273 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2274 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2276 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2277 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2278 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2281 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2283 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2284 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2287 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2288 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2289 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2291 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2292 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2293 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2295 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2296 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2297 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2299 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2300 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2301 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2303 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2304 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2305 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2307 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2308 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2309 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2311 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2312 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2313 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2315 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2317 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2318 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2319 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2321 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2322 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2323 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2325 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2326 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2327 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2329 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2330 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2331 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2333 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2334 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2335 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2337 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2338 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2339 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2341 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2342 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2343 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2345 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2346 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2347 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2350 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2351 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2352 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2353 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2354 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2355 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2356 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2357 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2358 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2359 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2360 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2361 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2362 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2363 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2364 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2365 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2368 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2369 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2370 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2371 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2372 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2373 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2374 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2375 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2376 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2377 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2378 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2379 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2380 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2381 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2382 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2383 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2386 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2387 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2388 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2389 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2390 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2391 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2392 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2393 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2394 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2395 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2396 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2397 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2398 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2399 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2400 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2401 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2403 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2404 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2405 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2406 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2407 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2408 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2409 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2410 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2411 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2412 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2413 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2414 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2415 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2416 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2417 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2418 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2421 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2422 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2423 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2424 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2425 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2426 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2427 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2428 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2429 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2430 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2431 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2432 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2433 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2434 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2435 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2436 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2439 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2440 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2441 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2442 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2443 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2444 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2445 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2446 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2447 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2448 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2449 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2450 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2451 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2452 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2453 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2454 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2455 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2460 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2461 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2462 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2463 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2464 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2467 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2468 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2469 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2470 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2471 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2472 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2473 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2474 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2475 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2476 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2477 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2478 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2479 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2480 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2481 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2482 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2484 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2485 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2486 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2487 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2490 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2491 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2492 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2493 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2494 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2496 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2499 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2500 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2501 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2502 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2504 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2505 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2506 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2509 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2510 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2511 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2513 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2514 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2515 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2518 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2519 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2520 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2522 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2523 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2524 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2527 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2528 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2529 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2530 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2532 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2533 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2534 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2537 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2538 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2539 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2541 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2543 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2544 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2545 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2548 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2549 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2550 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2552 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2553 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2554 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2555 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2556 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2557 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2560 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2561 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2562 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2563 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2565 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2566 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2567 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2568 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2570 #ifde‡
STM32F10X_CL


2572 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2575 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2578 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2581 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2584 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2587 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x20000000Ë

	)

2591 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2592 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2593 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2594 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2597 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2598 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2599 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2600 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2601 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2602 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2603 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2606 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2607 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2608 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2609 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2610 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2611 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2612 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2615 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2616 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2617 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2618 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2619 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2620 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2621 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2624 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2625 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2626 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2627 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2628 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2629 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2630 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2633 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2634 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2635 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2636 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2639 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2640 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2641 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2642 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2643 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2644 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2645 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2648 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2649 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2650 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2651 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2652 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2653 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2654 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2657 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2658 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2659 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2660 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2661 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2662 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2663 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2666 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2667 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2668 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2669 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2670 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2671 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2672 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2675 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2676 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2677 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2678 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2681 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2682 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2683 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2684 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2685 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2686 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2687 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2690 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2691 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2692 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2693 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2694 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2695 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2696 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2699 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2700 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2701 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2702 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2703 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2704 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2705 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2708 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2709 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2710 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2711 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2712 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2713 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2714 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2717 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2718 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2719 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2720 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2723 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2724 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2725 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2726 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2727 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2728 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2729 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2732 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2733 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2734 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2735 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2736 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2737 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2738 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2741 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2742 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2743 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2744 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2745 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2746 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2747 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2750 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2751 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2752 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2753 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2754 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2755 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2756 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2758 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2760 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2761 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2762 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2763 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2764 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2767 #ifde‡
STM32F10X_XL


2769 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2770 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2771 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2772 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2773 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2774 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2784 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2785 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2786 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2787 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2790 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2793 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2796 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2797 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2798 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2807 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2808 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2809 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2810 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2811 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2812 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2813 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2814 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2815 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2816 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2817 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2818 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2819 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2820 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2821 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2822 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2823 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2824 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2825 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2826 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2827 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2828 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2829 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2830 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2831 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2832 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2833 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2834 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2835 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2836 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2837 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2838 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2839 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2842 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2843 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2844 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2845 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2846 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2847 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2848 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2849 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2850 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2851 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2852 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2853 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2854 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2855 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2856 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2857 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2858 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2859 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2860 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2861 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2862 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2863 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2864 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2865 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2866 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2867 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2868 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2869 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2870 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2871 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2872 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2873 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2874 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2877 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2878 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2879 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2880 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2881 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2882 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2883 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2884 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2885 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2886 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2887 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2888 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2889 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2890 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2891 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2892 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2893 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2894 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2895 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2896 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2897 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2898 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2899 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2900 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2901 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2902 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2903 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2904 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2905 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2906 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2907 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2908 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2909 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2912 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2913 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2948 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2949 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2950 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2951 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2952 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2953 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2954 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2955 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2956 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2957 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2958 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2959 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2960 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2961 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2962 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2963 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2964 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2965 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2966 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2967 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2968 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2969 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2970 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2971 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2972 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2973 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2974 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2975 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2976 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2977 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2978 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2979 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2982 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2983 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2984 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2985 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2988 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2989 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2990 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2991 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2994 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2995 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2996 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2997 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3000 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3001 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3002 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3003 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3006 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3007 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3008 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3009 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3012 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3013 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3014 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3015 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3018 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3019 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3020 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3021 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3024 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3025 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3026 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3027 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3030 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3031 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3032 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3033 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3034 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3037 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3038 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3039 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3040 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3041 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3042 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3043 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3044 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3045 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3046 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3049 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3050 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3053 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3054 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3055 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3057 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3058 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3059 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3060 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3063 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3064 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3065 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3066 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3067 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3068 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3069 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3070 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3072 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3073 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3076 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3077 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3078 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3081 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3082 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3083 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3084 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3085 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3086 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3089 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3090 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3091 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3092 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3095 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3096 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3097 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3098 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3099 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3100 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3101 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3102 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3103 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3104 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3105 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3106 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3107 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3108 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3112 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3113 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3114 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3115 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3116 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3118 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3119 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3120 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3121 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3122 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3123 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3125 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3126 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3127 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3128 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3129 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3130 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3133 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3134 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3135 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3138 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3139 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3140 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3141 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3142 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3145 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3148 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3151 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3160 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3161 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3162 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3163 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3164 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3165 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3166 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3167 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3168 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3169 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3170 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3171 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3172 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3173 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3174 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3175 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3176 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3177 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3178 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3179 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3182 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3183 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3184 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3185 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3186 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3187 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3188 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3189 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3190 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3191 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3192 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3193 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3194 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3195 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3196 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3197 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3198 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3199 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3200 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3201 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3204 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3205 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3206 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3207 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3208 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3209 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3210 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3211 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3212 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3213 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3214 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3215 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3216 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3217 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3218 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3219 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3220 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3221 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3222 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3223 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3226 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3227 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3228 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3229 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3230 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3231 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3232 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3233 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3234 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3235 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3236 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3237 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3238 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3239 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3240 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3241 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3242 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3243 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3244 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3245 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3248 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3249 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3250 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3251 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3252 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3253 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3254 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3255 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3256 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3257 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3258 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3259 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3260 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3261 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3262 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3263 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3264 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3265 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3266 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3267 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3270 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3271 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3272 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3273 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3274 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3275 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3276 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3277 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3278 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3279 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3280 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3281 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3282 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3283 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3284 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3285 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3286 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3287 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3288 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3289 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3298 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3299 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3300 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3301 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3302 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3303 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3304 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3305 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3306 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3307 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3308 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3309 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3310 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3311 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3312 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3313 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3314 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3315 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3316 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3317 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3318 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3319 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3320 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3321 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3322 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3323 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3324 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3325 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3328 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3329 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3330 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3331 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3332 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3333 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3334 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3335 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3336 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3337 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3338 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3339 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3340 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3341 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3342 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3343 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3344 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3345 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3346 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3347 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3348 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3349 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3350 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3351 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3352 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3353 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3354 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3355 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3358 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3359 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3360 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3361 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3362 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3363 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3364 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3365 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3367 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3368 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3369 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3371 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3372 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3373 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3375 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3376 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3377 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3379 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3382 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3383 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3384 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3385 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3386 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3387 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3388 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3389 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3391 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3392 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3393 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3395 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3396 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3397 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3399 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3400 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3401 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3403 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3406 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3407 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3408 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3409 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3410 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3411 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3412 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3413 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3415 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3416 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3417 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3419 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3420 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3421 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3423 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3424 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3425 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3427 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3430 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3431 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3432 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3433 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3434 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3435 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3436 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3437 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3439 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3440 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3441 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3443 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3444 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3445 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3447 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3448 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3449 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3451 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3454 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3455 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3456 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3457 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3458 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3459 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3460 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3461 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3463 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3464 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3465 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3467 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3468 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3469 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3471 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3472 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3473 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3475 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3478 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3479 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3480 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3481 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3482 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3483 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3484 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3485 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3487 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3488 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3489 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3491 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3492 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3493 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3495 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3496 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3497 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3499 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3502 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3503 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3504 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3505 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3506 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3507 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3508 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3509 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3511 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3512 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3513 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3515 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3516 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3517 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3519 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3520 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3521 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3523 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3526 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3529 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3532 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3535 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3538 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3541 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3544 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3547 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3550 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3553 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3557 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3560 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3563 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3567 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3570 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3573 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3576 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3580 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3583 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3586 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3589 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3598 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3599 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3600 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3601 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3602 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3605 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3606 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3607 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3608 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3609 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3610 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3612 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3613 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3614 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3615 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3616 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3617 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3618 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3619 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3621 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3622 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3623 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3624 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3626 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3627 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3628 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3629 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3630 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3632 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3633 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3637 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3638 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3639 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3640 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3641 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3642 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3644 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3645 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3646 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3647 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3649 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3651 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3652 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3653 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3654 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3656 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3657 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3658 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3659 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3662 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3663 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3664 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3665 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3667 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3668 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3669 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3670 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3672 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3673 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3674 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3675 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3677 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3678 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3679 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3680 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3682 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3683 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3684 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3685 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3687 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3688 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3689 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3690 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3692 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3693 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3694 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3695 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3697 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3698 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3699 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3700 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3703 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3704 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3705 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3706 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3708 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3709 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3710 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3711 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3713 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3714 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3715 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3716 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3718 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3719 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3720 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3721 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3723 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3724 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3725 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3726 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3728 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3729 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3730 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3731 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3733 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3734 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3735 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3736 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3738 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3739 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3740 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3741 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3743 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3744 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3745 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3746 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3748 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3749 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3750 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3751 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3754 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3757 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3760 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3763 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3766 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3769 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3772 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3773 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3774 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3775 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3776 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3777 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3779 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3780 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3781 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3782 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3783 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3784 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3786 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3787 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3788 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3789 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3790 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3791 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3793 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3794 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3795 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3796 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3797 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3798 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3800 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3801 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3803 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3804 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3807 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3808 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3809 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3810 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3811 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3812 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3814 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3815 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3816 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3817 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3818 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3819 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3821 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3822 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3823 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3824 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3825 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3826 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3828 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3829 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3830 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3831 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3832 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3833 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3835 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3836 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3837 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3838 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3839 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3840 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3842 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3843 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3844 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3845 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3846 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3847 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3850 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3851 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3852 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3853 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3854 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3855 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3857 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3858 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3859 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3860 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3861 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3862 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3864 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3865 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3866 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3867 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3868 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3869 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3871 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3872 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3873 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3874 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3875 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3876 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3878 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3879 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3880 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3881 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3882 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3883 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3885 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3886 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3887 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3888 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3889 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3890 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3893 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3894 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3895 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3896 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3897 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3898 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3900 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3901 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3902 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3903 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3904 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3905 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3907 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3908 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3909 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3910 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3911 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3912 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3914 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3915 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3916 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3917 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3918 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3919 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3921 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3922 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3923 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3926 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3929 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3932 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3935 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3938 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3939 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3948 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3949 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3950 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3952 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3953 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3954 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3955 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3957 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3958 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3959 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3961 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3962 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3963 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3964 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3965 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3967 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3968 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3969 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3970 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3972 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3973 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3974 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3975 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3977 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3978 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3979 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3981 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3982 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3983 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3984 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3985 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3987 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3990 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3991 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3994 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3997 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4000 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4003 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4006 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4009 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4012 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4013 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4016 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4017 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4020 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4021 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4024 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4027 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4030 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4031 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4039 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4040 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4041 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4042 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4045 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4046 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4047 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4048 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4049 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4052 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4055 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4056 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4057 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4058 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4059 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4060 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4061 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4064 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4065 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4066 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4067 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4068 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4069 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4070 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4071 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4074 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4077 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4086 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4087 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4088 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4089 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4090 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4092 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4093 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4094 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4096 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4098 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4099 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4100 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4103 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4104 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4105 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4107 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4108 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4109 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4110 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4112 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4113 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4114 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4115 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4116 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4117 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4118 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4119 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4122 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4123 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4124 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4125 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4127 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4128 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4129 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4130 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4132 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4134 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4135 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4136 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4137 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4138 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4140 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4141 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4142 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4144 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4145 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4148 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4149 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4150 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4151 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4152 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4153 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4154 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4155 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4156 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4157 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4158 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4159 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4160 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4161 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4162 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4165 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4166 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4167 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4168 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4169 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4170 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4171 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4172 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4173 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4174 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4175 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4176 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4179 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4180 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4181 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4182 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4183 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4184 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4185 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4186 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4189 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4190 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4191 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4193 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4194 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4196 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4197 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4198 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4199 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4201 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4203 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4204 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4205 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4207 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4208 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4210 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4211 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4212 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4213 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4215 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4219 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4220 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4221 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4223 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4224 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4225 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4226 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4227 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4229 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4230 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4231 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4233 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4234 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4235 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4236 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4237 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4240 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4241 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4242 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4244 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4245 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4247 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4248 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4249 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4250 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4252 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4254 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4255 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4256 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4258 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4259 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4261 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4262 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4263 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4264 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4266 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4270 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4271 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4272 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4274 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4275 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4276 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4277 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4278 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4280 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4281 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4282 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4284 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4285 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4286 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4287 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4288 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4291 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4292 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4293 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4294 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4295 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4296 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4297 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4298 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4299 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4300 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4301 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4302 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4303 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4304 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4307 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4310 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4313 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4316 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4319 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4322 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4325 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4328 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4331 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4332 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4333 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4334 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4335 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4336 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4337 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4338 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4339 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4341 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4342 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4343 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4345 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4346 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4347 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4348 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4349 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4350 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4353 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4354 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4355 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4356 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4357 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4358 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4360 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4361 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4362 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4363 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4364 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4365 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4368 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4377 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4378 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4379 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4382 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4383 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4384 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4385 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4386 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4387 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4390 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4393 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4396 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4399 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4402 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4405 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4408 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4411 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4420 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4423 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4424 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4425 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4426 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4429 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4432 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4433 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4442 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4443 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4444 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4445 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4446 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4447 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4448 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4449 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4451 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4454 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4455 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4456 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4457 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4458 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4459 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4460 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4461 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4463 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4464 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4465 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4467 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4470 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4479 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4480 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4482 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4483 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4484 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4486 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4487 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4488 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4490 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4491 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4492 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4493 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4494 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4495 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4496 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4497 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4498 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4501 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4502 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4504 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4505 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4506 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4508 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4509 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4510 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4512 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4513 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4514 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4515 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4516 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4517 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4518 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4519 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4520 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4523 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4524 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4526 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4527 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4528 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4530 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4531 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4532 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4534 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4535 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4536 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4537 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4538 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4539 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4540 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4541 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4542 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4545 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4546 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4548 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4549 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4550 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4552 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4553 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4554 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4556 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4557 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4558 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4559 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4560 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4561 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4562 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4563 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4564 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4567 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4568 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4569 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4570 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4571 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4573 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4574 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4575 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4576 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4577 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4579 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4580 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4581 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4582 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4583 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4585 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4586 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4587 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4588 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4589 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4591 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4592 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4593 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4594 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4595 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4597 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4598 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4599 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4600 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4601 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4603 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4604 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4605 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4608 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4609 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4610 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4611 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4612 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4614 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4615 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4616 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4617 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4618 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4620 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4621 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4622 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4623 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4624 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4626 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4627 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4628 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4629 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4630 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4632 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4633 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4634 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4635 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4636 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4638 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4639 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4640 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4641 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4642 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4644 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4645 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4646 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4649 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4650 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4651 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4652 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4653 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4655 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4656 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4657 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4658 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4659 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4661 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4662 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4663 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4664 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4665 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4667 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4668 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4669 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4670 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4671 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4673 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4674 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4675 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4676 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4677 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4679 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4680 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4681 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4682 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4683 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4685 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4686 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4687 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4690 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4691 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4692 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4693 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4694 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4696 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4697 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4698 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4699 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4700 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4702 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4703 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4704 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4705 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4706 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4708 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4709 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4710 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4711 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4712 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4714 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4715 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4716 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4717 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4718 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4720 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4721 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4722 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4723 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4724 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4726 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4727 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4728 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4731 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4732 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4733 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4734 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4735 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4737 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4738 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4739 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4740 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4741 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4743 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4744 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4745 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4746 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4747 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4749 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4750 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4751 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4752 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4753 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4755 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4756 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4757 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4758 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4759 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4761 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4762 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4763 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4766 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4767 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4768 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4769 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4770 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4772 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4773 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4774 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4775 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4776 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4778 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4779 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4780 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4781 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4782 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4784 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4785 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4786 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4787 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4788 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4790 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4791 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4792 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4793 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4794 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4796 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4797 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4798 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4801 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4802 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4803 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4804 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4805 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4807 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4808 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4809 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4810 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4811 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4813 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4814 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4815 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4816 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4817 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4819 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4820 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4821 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4822 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4823 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4825 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4826 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4827 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4828 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4829 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4831 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4832 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4833 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4836 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4837 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4838 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4839 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4840 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4842 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4843 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4844 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4845 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4846 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4848 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4849 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4850 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4851 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4852 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4854 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4855 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4856 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4857 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4858 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4860 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4861 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4862 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4863 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4864 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4866 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4867 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4868 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4871 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4872 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4873 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4875 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4876 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4877 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4879 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4881 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4882 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4883 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4884 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4885 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4887 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4888 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4889 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4890 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4891 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4893 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4894 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4895 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4896 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4899 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4900 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4901 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4903 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4904 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4905 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4907 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4909 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4910 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4911 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4912 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4913 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4915 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4916 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4917 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4918 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4919 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4921 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4922 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4923 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4924 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4927 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4928 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4929 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4931 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4932 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4933 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4935 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4937 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4938 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4939 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4940 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4941 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4943 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4944 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4945 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4946 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4947 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4949 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4950 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4951 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4952 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4955 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4956 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4957 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4958 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4959 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4960 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4961 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4964 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4965 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4966 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4967 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4968 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4969 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4970 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4973 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4974 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4975 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4976 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4977 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4978 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4979 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4982 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4983 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4984 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4985 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4986 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4987 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4988 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4989 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4990 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4992 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4993 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4994 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4995 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4996 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4997 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4998 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4999 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5000 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5002 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5003 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5004 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5005 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5006 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5007 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5008 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5009 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5010 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5012 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5013 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5014 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5015 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5016 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5017 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5018 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5019 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5020 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5023 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5024 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5025 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5026 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5027 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5028 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5029 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5030 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5031 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5033 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5034 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5035 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5036 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5037 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5038 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5039 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5040 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5041 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5043 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5044 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5045 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5046 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5047 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5048 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5049 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5050 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5051 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5053 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5054 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5055 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5056 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5057 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5058 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5059 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5060 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5061 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5064 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5065 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5066 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5067 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5068 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5069 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5070 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5071 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5072 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5074 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5075 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5076 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5077 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5078 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5079 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5080 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5081 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5082 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5084 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5085 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5086 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5087 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5088 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5089 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5090 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5091 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5092 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5094 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5095 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5096 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5097 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5098 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5099 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5100 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5101 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5102 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5105 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5106 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5107 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5108 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5109 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5110 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5111 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5112 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5113 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5115 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5116 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5117 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5118 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5119 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5120 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5121 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5122 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5123 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5125 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5126 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5127 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5128 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5129 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5130 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5131 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5132 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5133 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5135 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5136 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5137 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5138 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5139 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5140 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5141 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5142 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5143 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5146 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5147 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5148 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5149 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5150 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5151 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5152 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5153 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5154 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5156 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5157 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5158 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5159 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5160 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5161 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5162 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5163 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5164 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5166 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5167 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5168 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5169 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5170 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5171 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5172 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5173 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5174 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5176 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5177 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5178 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5179 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5180 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5181 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5182 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5183 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5184 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5187 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5188 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5189 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5190 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5191 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5192 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5193 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5194 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5195 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5197 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5198 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5199 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5200 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5201 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5202 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5203 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5204 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5205 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5207 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5208 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5209 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5210 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5211 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5212 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5213 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5214 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5215 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5217 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5218 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5219 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5220 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5221 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5222 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5223 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5224 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5225 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5228 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5229 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5230 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5231 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5232 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5233 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5234 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5235 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5236 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5238 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5239 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5240 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5241 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5242 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5243 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5244 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5245 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5246 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5248 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5249 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5250 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5251 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5252 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5253 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5254 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5255 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5256 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5258 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5259 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5260 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5261 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5262 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5263 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5264 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5265 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5266 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5269 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5272 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5281 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5282 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5283 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5286 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5287 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5288 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5289 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5291 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5292 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5293 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5295 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5296 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5299 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5302 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5304 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5305 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5306 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5308 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5309 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5310 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5311 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5312 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5313 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5314 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5317 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5320 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5323 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5326 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5329 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5332 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5335 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5338 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5341 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5342 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5343 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5344 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5346 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5347 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5348 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5349 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5350 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5352 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5353 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5354 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5355 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5358 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5361 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5362 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5363 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5364 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5365 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5366 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5367 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5368 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5369 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5370 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5371 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5372 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5373 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5374 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5375 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5376 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5377 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5378 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5379 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5380 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5381 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5382 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5383 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5384 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5387 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5388 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5389 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5390 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5391 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5392 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5393 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5394 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5395 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5396 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5397 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5398 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5399 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5402 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5403 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5404 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5405 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5406 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5407 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5408 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5409 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5410 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5411 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5412 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5413 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5414 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5415 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5416 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5417 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5418 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5419 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5420 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5421 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5422 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5423 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5424 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5425 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5428 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5431 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5441 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5443 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5444 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5445 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5447 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5448 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5449 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5451 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5452 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5453 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5455 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5457 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5458 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5459 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5461 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5462 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5465 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5467 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5468 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5469 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5471 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5472 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5473 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5475 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5476 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5477 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5479 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5481 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5482 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5483 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5485 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5486 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5489 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5491 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5492 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5493 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5495 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5496 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5497 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5499 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5500 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5501 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5503 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5505 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5506 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5507 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5509 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5510 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5513 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5515 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5516 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5517 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5519 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5520 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5521 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5523 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5524 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5525 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5527 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5529 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5530 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5531 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5533 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5534 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5537 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5539 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5540 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5541 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5543 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5544 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5545 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5547 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5548 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5549 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5551 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5553 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5554 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5555 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5557 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5558 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5561 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5563 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5564 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5565 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5567 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5568 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5569 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5571 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5572 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5573 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5575 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5577 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5578 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5579 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5581 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5582 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5585 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5587 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5588 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5589 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5591 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5592 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5593 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5595 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5596 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5597 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5599 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5601 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5602 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5603 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5605 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5606 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5609 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5611 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5612 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5613 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5615 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5616 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5617 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5619 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5620 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5621 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5623 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5625 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5626 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5627 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5629 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5630 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5634 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5635 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5636 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5637 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5638 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5639 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5640 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5641 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5642 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5643 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5644 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5645 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5646 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5649 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5650 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5651 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5652 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5653 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5654 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5655 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5656 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5657 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5658 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5661 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5662 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5663 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5664 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5665 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5668 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5669 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5670 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5671 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5672 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5673 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5674 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5675 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5677 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5680 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5684 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5687 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5690 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5693 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5696 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5699 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5702 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5705 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5710 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5713 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5716 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5719 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5722 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5725 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5728 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5731 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5736 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5739 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5742 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5745 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5748 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5751 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5754 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5757 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5760 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5763 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5766 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5769 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5772 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5775 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5778 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5781 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5786 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5789 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5792 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5795 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5798 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5801 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5804 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5807 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5812 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5814 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5815 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5816 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5817 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5818 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5819 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5821 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5824 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5826 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5827 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5828 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5829 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5830 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5831 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5833 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5836 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5838 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5839 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5840 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5841 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5842 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5843 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5845 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5848 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5850 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5851 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5852 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5853 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5854 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5855 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5857 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5860 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5862 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5863 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5864 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5865 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5866 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5867 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5869 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5872 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5874 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5875 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5876 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5877 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5878 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5879 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5881 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5884 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5886 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5887 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5888 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5889 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5890 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5891 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5893 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5896 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5898 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5899 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5900 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5901 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5902 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5903 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5905 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5910 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5912 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5913 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5914 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5915 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5916 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5917 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5919 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5922 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5924 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5925 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5926 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5927 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5928 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5929 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5931 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5934 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5936 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5937 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5938 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5939 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5940 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5941 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5943 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5946 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5948 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5949 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5950 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5951 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5952 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5953 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5955 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5958 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5960 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5961 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5962 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5963 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5964 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5965 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5967 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5970 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5972 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5973 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5974 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5975 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5976 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5977 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5979 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5982 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5984 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5985 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5986 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5987 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5988 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5989 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5991 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5994 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5996 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5997 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5998 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5999 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6000 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6001 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6003 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6006 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6008 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6009 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6010 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6011 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6012 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6013 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6015 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6018 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6020 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6021 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6022 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6023 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6024 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6025 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6027 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6030 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6032 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6033 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6034 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6035 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6036 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6037 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6039 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6042 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6044 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6045 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6046 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6047 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6048 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6049 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6051 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6054 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6056 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6057 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6058 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6059 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6060 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6061 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6063 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6066 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6068 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6069 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6070 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6071 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6072 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6073 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6075 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6078 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6080 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6081 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6082 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6083 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6084 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6085 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6087 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6090 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6092 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6093 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6094 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6095 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6096 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6097 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6099 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6109 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6110 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6111 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6112 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6113 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6114 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6115 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6116 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6117 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6120 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6121 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6122 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6123 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6124 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6125 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6126 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6127 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6128 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6131 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6132 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6133 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6134 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6135 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6136 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6137 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6138 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6139 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6140 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6141 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6142 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6143 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6144 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6145 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6146 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6148 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6149 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6150 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6151 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6153 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6154 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6155 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6156 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6159 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6160 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6161 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6162 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6165 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6166 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6167 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6168 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6171 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6172 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6173 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6174 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6175 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6176 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6177 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6178 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6179 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6180 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6181 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6182 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6183 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6184 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6187 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6188 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6189 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6191 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6192 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6193 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6194 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6196 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6197 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6200 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6201 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6202 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6203 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6204 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6205 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6209 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6210 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6211 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6212 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6213 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6216 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6217 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6218 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6221 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6222 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6223 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6224 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6227 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6228 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6229 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6230 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6233 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6234 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6235 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6236 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6237 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6240 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6241 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6242 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6245 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6246 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6247 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6248 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6251 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6252 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6253 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6254 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6257 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6258 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6259 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6260 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6261 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6264 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6265 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6266 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6269 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6270 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6271 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6272 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6275 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6276 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6277 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6278 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6281 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6282 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6283 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6284 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6287 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6288 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6289 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6292 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6293 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6294 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6295 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6298 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6299 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6300 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6301 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6304 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6305 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6306 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6307 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6310 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6311 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6312 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6315 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6316 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6317 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6318 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6321 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6322 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6323 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6324 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6328 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6331 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6332 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6333 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6334 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6335 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6336 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6337 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6338 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6339 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6340 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6341 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6342 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6343 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6344 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6345 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6348 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6349 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6350 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6351 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6352 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6353 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6354 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6355 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6356 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6357 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6358 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6359 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6360 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6361 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6362 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6365 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6366 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6367 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6368 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6369 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6370 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6371 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6372 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6373 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6374 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6375 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6376 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6377 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6378 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6379 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6382 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6383 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6384 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6385 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6386 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6387 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6388 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6389 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6390 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6391 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6392 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6393 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6394 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6395 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6396 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6399 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6400 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6401 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6402 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6403 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6404 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6405 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6406 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6407 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6408 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6409 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6410 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6411 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6412 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6413 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6414 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6415 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6416 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6417 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6418 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6419 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6420 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6421 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6422 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6423 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6424 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6425 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6426 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6427 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6428 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6429 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6430 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6433 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6434 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6435 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6436 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6437 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6438 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6439 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6440 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6441 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6442 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6443 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6444 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6445 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6446 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6447 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6448 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6449 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6450 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6451 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6452 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6453 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6454 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6455 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6456 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6457 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6458 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6459 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6460 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6461 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6462 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6463 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6464 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6467 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6468 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6469 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6470 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6471 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6472 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6473 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6474 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6475 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6476 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6477 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6478 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6479 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6480 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6481 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6482 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6483 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6484 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6485 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6486 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6487 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6488 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6489 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6490 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6491 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6492 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6493 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6494 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6495 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6496 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6497 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6498 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6501 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6502 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6503 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6504 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6505 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6506 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6507 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6508 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6509 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6510 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6511 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6512 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6513 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6514 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6515 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6516 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6517 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6518 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6519 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6520 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6521 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6522 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6523 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6524 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6525 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6526 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6527 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6528 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6529 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6530 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6531 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6532 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6535 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6536 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6537 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6538 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6539 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6540 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6541 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6542 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6543 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6544 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6545 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6546 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6547 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6548 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6549 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6550 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6551 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6552 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6553 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6554 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6555 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6556 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6557 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6558 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6559 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6560 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6561 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6562 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6563 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6564 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6565 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6566 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6569 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6570 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6571 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6572 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6573 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6574 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6575 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6576 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6577 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6578 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6579 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6580 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6581 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6582 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6583 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6584 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6585 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6586 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6587 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6588 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6589 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6590 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6591 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6592 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6593 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6594 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6595 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6596 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6597 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6598 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6599 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6600 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6603 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6604 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6605 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6606 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6607 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6608 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6609 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6610 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6611 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6612 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6613 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6614 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6615 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6616 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6617 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6618 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6619 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6620 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6621 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6622 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6623 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6624 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6625 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6626 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6627 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6628 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6629 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6630 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6631 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6632 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6633 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6634 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6637 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6638 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6639 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6640 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6641 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6642 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6643 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6644 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6645 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6646 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6647 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6648 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6649 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6650 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6651 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6652 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6653 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6654 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6655 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6656 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6657 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6658 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6659 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6660 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6661 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6662 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6663 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6664 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6665 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6666 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6667 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6668 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6671 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6672 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6673 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6674 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6675 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6676 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6677 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6678 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6679 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6680 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6681 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6682 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6683 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6684 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6685 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6686 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6687 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6688 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6689 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6690 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6691 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6692 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6693 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6694 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6695 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6696 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6697 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6698 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6699 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6700 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6701 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6702 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6705 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6706 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6707 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6708 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6709 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6710 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6711 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6712 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6713 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6714 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6715 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6716 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6717 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6718 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6719 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6720 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6721 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6722 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6723 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6724 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6725 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6726 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6727 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6728 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6729 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6730 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6731 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6732 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6733 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6734 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6735 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6736 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6739 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6740 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6741 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6742 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6743 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6744 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6745 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6746 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6747 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6748 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6749 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6750 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6751 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6752 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6753 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6754 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6755 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6756 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6757 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6758 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6759 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6760 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6761 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6762 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6763 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6764 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6765 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6766 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6767 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6768 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6769 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6770 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6773 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6774 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6775 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6776 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6777 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6778 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6779 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6780 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6781 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6782 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6783 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6784 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6785 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6786 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6787 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6788 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6789 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6790 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6791 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6792 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6793 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6794 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6795 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6796 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6797 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6798 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6799 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6800 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6801 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6802 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6803 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6804 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6807 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6808 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6809 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6810 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6811 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6812 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6813 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6814 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6815 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6816 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6817 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6818 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6819 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6820 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6821 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6822 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6823 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6824 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6825 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6826 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6827 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6828 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6829 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6830 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6831 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6832 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6833 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6834 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6835 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6836 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6837 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6838 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6841 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6842 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6843 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6844 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6845 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6846 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6847 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6848 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6849 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6850 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6851 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6852 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6853 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6854 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6855 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6856 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6857 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6858 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6859 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6860 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6861 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6862 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6863 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6864 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6865 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6866 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6867 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6868 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6869 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6870 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6871 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6872 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6875 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6876 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6877 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6878 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6879 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6880 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6881 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6882 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6883 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6884 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6885 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6886 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6887 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6888 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6889 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6890 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6891 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6892 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6893 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6894 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6895 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6896 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6897 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6898 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6899 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6900 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6901 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6902 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6903 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6904 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6905 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6906 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6909 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6910 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6911 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6912 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6913 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6914 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6915 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6916 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6917 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6918 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6919 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6920 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6921 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6922 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6923 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6924 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6925 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6926 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6927 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6928 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6929 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6930 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6931 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6932 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6933 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6934 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6935 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6936 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6937 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6938 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6939 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6940 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6943 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6944 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6945 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6946 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6947 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6948 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6949 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6950 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6951 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6952 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6953 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6954 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6955 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6956 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6957 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6958 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6959 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6960 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6961 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6962 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6963 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6964 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6965 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6966 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6967 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6968 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6969 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6970 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6971 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6972 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6973 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6974 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6977 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6978 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6979 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6980 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6981 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6982 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6983 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6984 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6985 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6986 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6987 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6988 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6989 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6990 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6991 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6992 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6993 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6994 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6995 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6996 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6997 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6998 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6999 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7000 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7001 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7002 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7003 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7004 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7005 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7006 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7007 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7008 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7011 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7012 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7013 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7014 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7015 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7016 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7017 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7018 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7019 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7020 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7021 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7022 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7023 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7024 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7025 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7026 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7027 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7028 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7029 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7030 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7031 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7032 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7033 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7034 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7035 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7036 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7037 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7038 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7039 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7040 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7041 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7042 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7045 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7046 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7047 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7048 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7049 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7050 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7051 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7052 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7053 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7054 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7055 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7056 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7057 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7058 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7059 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7060 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7061 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7062 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7063 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7064 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7065 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7066 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7067 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7068 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7069 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7070 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7071 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7072 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7073 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7074 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7075 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7076 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7079 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7080 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7081 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7082 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7083 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7084 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7085 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7086 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7087 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7088 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7089 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7090 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7091 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7092 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7093 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7094 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7095 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7096 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7097 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7098 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7099 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7100 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7101 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7102 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7103 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7104 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7105 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7106 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7107 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7108 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7109 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7110 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7113 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7114 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7115 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7116 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7117 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7118 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7119 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7120 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7121 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7122 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7123 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7124 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7125 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7126 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7127 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7128 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7129 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7130 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7131 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7132 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7133 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7134 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7135 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7136 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7137 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7138 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7139 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7140 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7141 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7142 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7143 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7144 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7147 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7148 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7149 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7150 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7151 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7152 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7153 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7154 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7155 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7156 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7157 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7158 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7159 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7160 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7161 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7162 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7163 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7164 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7165 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7166 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7167 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7168 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7169 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7170 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7171 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7172 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7173 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7174 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7175 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7176 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7177 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7178 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7181 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7182 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7183 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7184 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7185 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7186 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7187 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7188 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7189 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7190 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7191 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7192 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7193 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7194 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7195 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7196 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7197 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7198 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7199 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7200 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7201 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7202 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7203 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7204 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7205 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7206 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7207 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7208 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7209 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7210 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7211 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7212 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7215 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7216 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7217 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7218 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7219 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7220 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7221 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7222 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7223 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7224 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7225 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7226 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7227 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7228 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7229 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7230 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7231 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7232 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7233 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7234 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7235 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7236 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7237 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7238 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7239 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7240 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7241 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7242 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7243 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7244 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7245 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7246 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7249 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7250 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7251 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7252 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7253 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7254 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7255 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7256 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7257 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7258 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7259 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7260 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7261 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7262 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7263 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7264 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7265 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7266 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7267 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7268 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7269 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7270 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7271 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7272 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7273 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7274 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7275 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7276 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7277 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7278 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7279 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7280 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7283 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7284 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7285 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7286 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7287 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7288 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7289 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7290 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7291 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7292 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7293 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7294 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7295 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7296 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7297 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7298 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7299 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7300 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7301 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7302 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7303 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7304 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7305 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7306 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7307 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7308 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7309 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7310 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7311 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7312 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7313 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7314 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7317 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7318 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7319 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7320 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7321 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7322 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7323 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7324 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7325 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7326 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7327 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7328 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7329 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7330 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7331 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7332 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7333 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7334 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7335 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7336 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7337 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7338 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7339 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7340 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7341 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7342 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7343 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7344 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7345 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7346 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7347 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7348 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7357 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7358 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7359 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7361 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7362 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7363 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7364 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7366 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7367 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7368 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7369 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7370 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7371 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7372 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7373 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7374 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7375 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7378 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7379 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7380 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7381 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7382 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7383 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7386 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7387 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7388 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7389 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7390 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7391 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7392 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7393 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7396 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7399 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7402 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7405 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7408 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7410 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7411 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7412 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7414 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7416 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7417 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7418 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7420 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7422 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7423 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7424 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7426 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7427 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7430 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7431 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7432 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7441 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7442 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7443 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7444 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7445 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7446 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7447 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7448 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7449 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7450 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7451 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7452 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7453 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7454 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7457 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7458 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7459 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7460 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7461 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7462 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7463 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7465 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7466 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7467 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7468 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7469 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7472 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7473 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7475 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7476 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7477 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7478 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7479 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7480 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7481 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7482 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7483 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7484 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7486 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7489 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7490 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7493 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7496 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7497 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7498 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7499 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7500 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7501 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7502 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7503 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7504 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7505 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7506 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7507 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7508 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7509 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7512 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7513 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7514 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7515 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7516 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7517 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7518 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7519 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7522 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7523 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7524 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7527 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7536 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7537 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7538 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7539 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7540 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7541 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7542 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7543 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7544 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7545 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7548 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7551 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7552 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7555 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7556 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7557 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7558 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7559 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7560 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7561 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7562 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7563 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7564 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7565 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7566 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7567 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7568 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7569 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7572 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7573 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7574 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7575 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7576 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7577 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7578 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7580 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7581 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7582 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7584 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7587 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7588 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7589 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7590 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7591 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7592 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7593 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7594 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7595 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7596 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7597 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7598 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7601 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7602 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7603 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7604 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7605 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7606 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7607 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7608 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7609 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7611 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7620 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7622 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7623 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7624 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7625 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7626 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7627 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7628 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7629 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7630 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7631 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7632 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7633 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7634 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7635 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7636 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7637 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7638 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7641 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7642 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7643 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7644 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7646 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7647 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7648 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7650 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7651 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7652 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7653 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7654 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7655 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7656 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7657 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7658 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7659 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7660 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7661 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7662 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7663 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7664 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7665 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7666 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7667 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7668 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7669 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7670 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7671 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7672 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7681 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7682 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7683 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7684 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7686 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7687 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7688 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7691 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7694 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7697 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7698 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7699 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7700 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7703 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7704 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7705 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7706 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7707 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7708 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7709 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7710 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7711 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7712 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7715 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7718 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7719 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7721 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7722 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7723 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7724 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7725 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7728 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7733 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7734 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7737 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7738 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7741 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7742 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7745 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7746 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7749 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7750 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7753 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7754 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7757 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7758 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7761 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7762 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7764 #ifde‡
STM32F10X_CL


7769 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7770 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7771 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7772 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7773 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7774 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7775 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7776 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7777 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7778 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7779 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7780 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7781 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7782 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7783 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7784 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7785 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7786 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7787 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7788 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7790 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7791 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7792 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7793 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7794 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7795 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7796 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7799 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7800 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7801 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7802 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7803 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7804 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7805 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7806 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7807 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7808 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7809 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7810 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7811 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7812 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7815 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7818 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7821 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7822 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7823 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7824 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7825 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7826 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7827 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7828 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7831 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7834 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7835 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7836 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7837 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7838 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7839 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7840 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7841 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7842 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7843 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7844 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7847 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7848 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7851 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7865 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7866 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7867 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7868 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7869 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7870 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7871 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7874 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7875 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7876 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7877 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7878 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7881 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7882 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7885 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7888 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7891 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7892 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7893 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7894 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7895 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7896 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7897 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7898 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7899 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7900 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7903 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7906 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7907 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7908 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7909 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7910 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7911 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7912 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7913 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7914 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7915 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7918 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7921 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7922 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7923 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7924 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7925 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7926 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7927 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7928 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7929 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7930 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7933 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7940 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7941 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7942 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7943 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7946 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7947 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7948 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7951 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7952 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7953 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7956 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7957 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7958 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7961 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7962 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7963 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7966 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7969 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7972 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7975 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7978 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7981 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7988 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7989 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7990 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7991 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7992 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7993 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7996 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7999 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8002 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8003 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8006 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8009 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8010 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8013 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8016 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8019 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8026 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8027 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8028 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8029 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8030 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8031 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8032 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8033 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8034 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8035 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8036 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8037 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8038 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8039 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8040 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8041 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8042 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8043 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8044 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8045 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8046 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8047 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8048 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8049 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8050 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8051 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8052 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8053 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8054 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8055 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8056 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8057 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8058 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8059 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8060 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8061 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8062 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8063 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8066 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8069 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8072 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8075 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8078 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8079 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8080 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8081 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8083 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8084 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8085 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8086 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8087 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8088 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8089 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8090 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8091 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8092 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8093 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8094 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8095 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8096 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8097 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8098 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8099 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8100 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8101 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8102 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8103 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8104 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8105 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8106 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8107 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8108 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8109 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8110 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8111 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8112 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8113 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8114 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8117 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8118 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8119 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8120 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8121 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8122 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8123 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8124 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8125 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8126 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8127 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8128 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8129 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8130 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8131 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8132 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8133 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8134 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8135 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8136 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8137 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8138 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8139 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8140 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8143 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8144 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8145 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8146 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8147 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8148 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8149 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8150 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8151 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8152 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8153 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8154 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8155 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8156 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8157 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8160 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8161 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8162 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8163 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8166 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8169 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8172 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8175 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8186 #ifde‡
USE_STDPERIPH_DRIVER


8187 
	~"°m32f10x_c⁄f.h
"

8194 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8196 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8198 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8200 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8202 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8204 
	#READ_REG
(
REG
Ë((REG))

	)

8206 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8212 #ifde‡
__˝lu•lus


	@code/Libararies/CMSIS/system_stm32f10x.c

33 
	~"°m32f10x.h
"

74 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
)

76 
	#SYSCLK_FREQ_24MHz
 24000000

	)

83 
	#SYSCLK_FREQ_72MHz
 72000000

	)

88 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
)

93 
	#VECT_TAB_OFFSET
 0x2000

	)

115 #ifde‡
SYSCLK_FREQ_HSE


116 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

117 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


118 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

119 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


120 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

121 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


122 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

123 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


124 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

125 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


126 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

128 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VÆue
;

131 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

140 
SëSysClock
();

142 #ifde‡
SYSCLK_FREQ_HSE


143 
SëSysClockToHSE
();

144 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


145 
SëSysClockTo24
();

146 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


147 
SëSysClockTo36
();

148 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


149 
SëSysClockTo48
();

150 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


151 
SëSysClockTo56
();

152 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


153 
SëSysClockTo72
();

156 #ifde‡
DATA_IN_ExtSRAM


157 
Sy°emInô_ExtMemCé
();

176 
	$Sy°emInô
 ()

180 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

183 #i‚de‡
STM32F10X_CL


184 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

186 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

190 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

193 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

196 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

198 #ifde‡
STM32F10X_CL


200 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

203 
RCC
->
CIR
 = 0x00FF0000;

206 
RCC
->
CFGR2
 = 0x00000000;

207 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

209 
RCC
->
CIR
 = 0x009F0000;

212 
RCC
->
CFGR2
 = 0x00000000;

215 
RCC
->
CIR
 = 0x009F0000;

218 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
)

219 #ifde‡
DATA_IN_ExtSRAM


220 
	`Sy°emInô_ExtMemCé
();

226 
	`SëSysClock
();

229 #ifde‡
VECT_TAB_SRAM


230 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

232 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

235 
	}
}

243 
	$Sy°emC‹eClockUpd©e
 ()

245 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

247 #ifde‡ 
STM32F10X_CL


248 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

251 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

252 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

256 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

258 
tmp
)

261 
Sy°emC‹eClock
 = 
HSI_VÆue
;

264 
Sy°emC‹eClock
 = 
HSE_VÆue
;

269 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

270 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

272 #i‚de‡
STM32F10X_CL


273 
∂lmuŒ
 = (Öllmull >> 18) + 2;

275 i‡(
∂lsour˚
 == 0x00)

278 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

282 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

283 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

285 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

288 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

290 
Sy°emC‹eClock
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

294 
Sy°emC‹eClock
 = 
HSE_VÆue
 * 
∂lmuŒ
;

299 
∂lmuŒ
 =Öllmull >> 18;

301 i‡(
∂lmuŒ
 != 0x0D)

303 
∂lmuŒ
 += 2;

307 
∂lmuŒ
 = 13 / 2;

310 i‡(
∂lsour˚
 == 0x00)

313 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

319 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

320 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

322 i‡(
¥ediv1sour˚
 == 0)

325 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

331 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

332 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

333 
Sy°emC‹eClock
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

340 
Sy°emC‹eClock
 = 
HSI_VÆue
;

346 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

348 
Sy°emC‹eClock
 >>
tmp
;

349 
	}
}

356 
	$SëSysClock
()

358 #ifde‡
SYSCLK_FREQ_HSE


359 
	`SëSysClockToHSE
();

360 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


361 
	`SëSysClockTo24
();

362 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


363 
	`SëSysClockTo36
();

364 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


365 
	`SëSysClockTo48
();

366 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


367 
	`SëSysClockTo56
();

368 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


369 
	`SëSysClockTo72
();

374 
	}
}

382 #ifde‡
DATA_IN_ExtSRAM


392 
	$Sy°emInô_ExtMemCé
()

398 
RCC
->
AHBENR
 = 0x00000114;

401 
RCC
->
APB2ENR
 = 0x000001E0;

409 
GPIOD
->
CRL
 = 0x44BB44BB;

410 
GPIOD
->
CRH
 = 0xBBBBBBBB;

412 
GPIOE
->
CRL
 = 0xB44444BB;

413 
GPIOE
->
CRH
 = 0xBBBBBBBB;

415 
GPIOF
->
CRL
 = 0x44BBBBBB;

416 
GPIOF
->
CRH
 = 0xBBBB4444;

418 
GPIOG
->
CRL
 = 0x44BBBBBB;

419 
GPIOG
->
CRH
 = 0x44444B44;

424 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

425 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

426 
	}
}

429 #ifde‡
SYSCLK_FREQ_HSE


437 
	$SëSysClockToHSE
()

439 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

443 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

448 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

449 
SèπUpCou¡î
++;

450 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

452 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

454 
HSESètus
 = (
uöt32_t
)0x01;

458 
HSESètus
 = (
uöt32_t
)0x00;

461 i‡(
HSESètus
 =(
uöt32_t
)0x01)

464 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


466 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

469 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

471 #i‚de‡
STM32F10X_CL


472 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

474 i‡(
HSE_VÆue
 <= 24000000)

476 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

480 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

486 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

489 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

492 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

495 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

496 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

499 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

507 
	}
}

508 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


516 
	$SëSysClockTo24
()

518 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

522 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

527 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

528 
SèπUpCou¡î
++;

529 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

531 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

533 
HSESètus
 = (
uöt32_t
)0x01;

537 
HSESètus
 = (
uöt32_t
)0x00;

540 i‡(
HSESètus
 =(
uöt32_t
)0x01)

542 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


544 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

547 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

548 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

552 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

555 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

558 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

560 #ifde‡
STM32F10X_CL


563 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

564 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

565 
RCC_CFGR_PLLMULL6
);

569 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

570 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

571 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

572 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

575 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

577 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

580 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

582 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

583 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

586 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

587 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

591 
RCC
->
CR
 |
RCC_CR_PLLON
;

594 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

599 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

600 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

603 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

611 
	}
}

612 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


620 
	$SëSysClockTo36
()

622 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

626 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

631 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

632 
SèπUpCou¡î
++;

633 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

635 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

637 
HSESètus
 = (
uöt32_t
)0x01;

641 
HSESètus
 = (
uöt32_t
)0x00;

644 i‡(
HSESètus
 =(
uöt32_t
)0x01)

647 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

650 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

651 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

654 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

657 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

660 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

662 #ifde‡
STM32F10X_CL


666 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

667 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

668 
RCC_CFGR_PLLMULL9
);

673 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

674 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

675 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

676 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

679 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

681 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

687 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

688 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

692 
RCC
->
CR
 |
RCC_CR_PLLON
;

695 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

700 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

701 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

704 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

712 
	}
}

713 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


721 
	$SëSysClockTo48
()

723 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

727 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

732 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

733 
SèπUpCou¡î
++;

734 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

736 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

738 
HSESètus
 = (
uöt32_t
)0x01;

742 
HSESètus
 = (
uöt32_t
)0x00;

745 i‡(
HSESètus
 =(
uöt32_t
)0x01)

748 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

751 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

752 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

755 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

758 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

761 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

763 #ifde‡
STM32F10X_CL


768 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

769 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

770 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

771 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

774 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

776 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

782 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

783 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

784 
RCC_CFGR_PLLMULL6
);

787 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

788 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

792 
RCC
->
CR
 |
RCC_CR_PLLON
;

795 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

800 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

801 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

804 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

812 
	}
}

814 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


822 
	$SëSysClockTo56
()

824 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

828 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

833 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

834 
SèπUpCou¡î
++;

835 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

837 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

839 
HSESètus
 = (
uöt32_t
)0x01;

843 
HSESètus
 = (
uöt32_t
)0x00;

846 i‡(
HSESètus
 =(
uöt32_t
)0x01)

849 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

852 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

853 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

856 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

859 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

862 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

864 #ifde‡
STM32F10X_CL


869 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

870 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

871 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

872 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

875 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

877 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

883 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

884 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

885 
RCC_CFGR_PLLMULL7
);

888 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

889 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

894 
RCC
->
CR
 |
RCC_CR_PLLON
;

897 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

902 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

903 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

906 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

914 
	}
}

916 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


924 
	$SëSysClockTo72
()

926 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

930 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

935 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

936 
SèπUpCou¡î
++;

937 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

939 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

941 
HSESètus
 = (
uöt32_t
)0x01;

945 
HSESètus
 = (
uöt32_t
)0x00;

948 i‡(
HSESètus
 =(
uöt32_t
)0x01)

951 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

954 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

955 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

959 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

962 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

965 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

967 #ifde‡
STM32F10X_CL


972 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

973 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

974 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

975 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

978 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

980 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

986 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

987 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

988 
RCC_CFGR_PLLMULL9
);

991 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

992 
RCC_CFGR_PLLMULL
));

993 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

997 
RCC
->
CR
 |
RCC_CR_PLLON
;

1000 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

1005 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

1006 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

1009 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1017 
	}
}

	@code/Libararies/CMSIS/system_stm32f10x.h

32 #i‚de‡
__SYSTEM_STM32F10X_H


33 
	#__SYSTEM_STM32F10X_H


	)

35 #ifde‡
__˝lu•lus


52 
uöt32_t
 
Sy°emC‹eClock
;

78 
Sy°emInô
();

79 
Sy°emC‹eClockUpd©e
();

84 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/CBC/aes_cbc.h

84 #i‚de‡
__CRL_AES_CBC_H__


85 
	#__CRL_AES_CBC_H__


	)

87 #ifde‡
__˝lu•lus


95 #ifde‡
INCLUDE_ENCRYPTION


97 
öt32_t
 
AES_CBC_En¸y±_Inô
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

100 
öt32_t
 
AES_CBC_En¸y±_Aµíd
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
,

101 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

102 
öt32_t
 
P_öputSize
,

103 
uöt8_t
 *
P_pOuçutBuf„r
,

104 
öt32_t
 *
P_pOuçutSize
);

107 
öt32_t
 
AES_CBC_En¸y±_Föish
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
,

108 
uöt8_t
 *
P_pOuçutBuf„r
,

109 
öt32_t
 *
P_pOuçutSize
);

111 #ifde‡
INCLUDE_DECRYPTION


113 
öt32_t
 
AES_CBC_De¸y±_Inô
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

116 
öt32_t
 
AES_CBC_De¸y±_Aµíd
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
,

117 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

118 
öt32_t
 
P_öputSize
,

119 
uöt8_t
 *
P_pOuçutBuf„r
,

120 
öt32_t
 *
P_pOuçutSize
);

123 
öt32_t
 
AES_CBC_De¸y±_Föish
 (
AESCBC˘x_°t
 *
P_pAESCBC˘x
,

124 
uöt8_t
 *
P_pOuçutBuf„r
,

125 
öt32_t
 *
P_pOuçutSize
);

131 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/CCM/aes_ccm.h

122 #i‚de‡
__CRL_AES_CCM_H__


123 
	#__CRL_AES_CCM_H__


	)

125 #ifde‡
__˝lu•lus


137 
uöt32_t
 
mC⁄ãxtId
;

139 
SKÊags_ë
 
mFœgs
;

141 c⁄° 
uöt8_t
 *
pmKey
;

143 c⁄° 
uöt8_t
 *
pmN⁄˚
;

146 
öt32_t
 
mN⁄˚Size
;

148 
uöt32_t
 
amIvCTR
[4];

150 
uöt32_t
 
amIvCBC
[4];

152 
öt32_t
 
mKeySize
;

154 c⁄° 
uöt8_t
 *
pmTag
;

157 
öt32_t
 
mTagSize
;

159 
öt32_t
 
mAssD©aSize
;

161 
öt32_t
 
mPaylﬂdSize
;

163 
uöt32_t
 
amExpKey
[
CRL_AES_MAX_EXPKEY_SIZE
];

165 
uöt32_t
 
amTmpBuf
[
CRL_AES_BLOCK
/(uint32_t)];

167 
öt32_t
 
mTmpBufU£
;

168 } 
	tAESCCM˘x_°t
;

171 
öt32_t
 
AES_CCM_En¸y±_Inô
(
AESCCM˘x_°t
 *
P_pAESCCM˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pN⁄˚
);

174 
öt32_t
 
AES_CCM_Hódî_Aµíd
(
AESCCM˘x_°t
 *
P_pAESCCM˘x
,

175 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

176 
öt32_t
 
P_öputSize
);

179 
öt32_t
 
AES_CCM_En¸y±_Aµíd
 (
AESCCM˘x_°t
 *
P_pAESCCM˘x
,

180 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

181 
öt32_t
 
P_öputSize
,

182 
uöt8_t
 *
P_pOuçutBuf„r
,

183 
öt32_t
 *
P_pOuçutSize
);

186 
öt32_t
 
AES_CCM_En¸y±_Föish
 (
AESCCM˘x_°t
 *
P_pAESCCM˘x
,

187 
uöt8_t
 *
P_pOuçutBuf„r
,

188 
öt32_t
 *
P_pOuçutSize
);

191 
öt32_t
 
AES_CCM_De¸y±_Inô
(
AESCCM˘x_°t
 *
P_pAESCCM˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pN⁄˚
);

194 
öt32_t
 
AES_CCM_De¸y±_Aµíd
 (
AESCCM˘x_°t
 *
P_pAESCCM˘x
,

195 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

196 
öt32_t
 
P_öputSize
,

197 
uöt8_t
 *
P_pOuçutBuf„r
,

198 
öt32_t
 *
P_pOuçutSize
);

201 
öt32_t
 
AES_CCM_De¸y±_Föish
 (
AESCCM˘x_°t
 *
P_pAESCCM˘x
,

202 
uöt8_t
 *
P_pOuçutBuf„r
,

203 
öt32_t
 *
P_pOuçutSize
);

209 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/CMAC/aes_cmac.h

107 #i‚de‡
__CRL_AES_CMAC_H__


108 
	#__CRL_AES_CMAC_H__


	)

110 #ifde‡
__˝lu•lus


120 
uöt32_t
 
mC⁄ãxtId
;

121 
SKÊags_ë
 
mFœgs
;

122 c⁄° 
uöt8_t
 *
pmKey
;

123 c⁄° 
uöt8_t
 *
pmIv
;

124 
öt32_t
 
mIvSize
;

125 
uöt32_t
 
amIv
[4];

126 
öt32_t
 
mKeySize
;

127 
uöt32_t
 
amExpKey
[
CRL_AES_MAX_EXPKEY_SIZE
];

128 c⁄° 
uöt8_t
 *
pmTag
;

129 
öt32_t
 
mTagSize
;

130 } 
	tAESCMAC˘x_°t
;

133 
öt32_t
 
AES_CMAC_En¸y±_Inô
(
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
);

135 
öt32_t
 
AES_CMAC_En¸y±_Aµíd
 (
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
,

136 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

137 
öt32_t
 
P_öputSize
);

139 
öt32_t
 
AES_CMAC_En¸y±_Föish
 (
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
,

140 
uöt8_t
 *
P_pOuçutBuf„r
,

141 
öt32_t
 *
P_pOuçutSize
);

143 
öt32_t
 
AES_CMAC_De¸y±_Inô
(
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
);

145 
öt32_t
 
AES_CMAC_De¸y±_Aµíd
 (
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
,

146 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

147 
öt32_t
 
P_öputSize
);

149 
öt32_t
 
AES_CMAC_De¸y±_Föish
 (
AESCMAC˘x_°t
 *
P_pAESCMAC˘x
,

150 
uöt8_t
 *
P_pOuçutBuf„r
,

151 
öt32_t
 *
P_pOuçutSize
);

158 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/CTR/aes_ctr.h

81 #i‚de‡
__CRL_AES_CTR_H__


82 
	#__CRL_AES_CTR_H__


	)

84 #ifde‡
__˝lu•lus


94 
AESCBC˘x_°t
 
	tAESCTR˘x_°t
;

97 
öt32_t
 
AES_CTR_En¸y±_Inô
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

100 
öt32_t
 
AES_CTR_En¸y±_Aµíd
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
,

101 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

102 
öt32_t
 
P_öputSize
,

103 
uöt8_t
 *
P_pOuçutBuf„r
,

104 
öt32_t
 *
P_pOuçutSize
);

107 
öt32_t
 
AES_CTR_En¸y±_Föish
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
,

108 
uöt8_t
 *
P_pOuçutBuf„r
,

109 
öt32_t
 *
P_pOuçutSize
);

112 
öt32_t
 
AES_CTR_De¸y±_Inô
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

115 
öt32_t
 
AES_CTR_De¸y±_Aµíd
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
,

116 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

117 
öt32_t
 
P_öputSize
,

118 
uöt8_t
 *
P_pOuçutBuf„r
,

119 
öt32_t
 *
P_pOuçutSize
);

122 
öt32_t
 
AES_CTR_De¸y±_Föish
 (
AESCTR˘x_°t
 *
P_pAESCTR˘x
,

123 
uöt8_t
 *
P_pOuçutBuf„r
,

124 
öt32_t
 *
P_pOuçutSize
);

128 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/Common/aes_common.h

26 #i‚de‡
__AES_COMMON_H__


27 
	#__AES_COMMON_H__


	)

29 #ifde‡
__˝lu•lus


38 
	#CRL_AES128_KEY
 16

	)

39 
	#CRL_AES128_EXPANDED_KEY
 44

	)

40 
	#CRL_AES192_KEY
 24

	)

41 
	#CRL_AES192_EXPANDED_KEY
 52

	)

42 
	#CRL_AES256_KEY
 32

	)

43 
	#CRL_AES256_EXPANDED_KEY
 60

	)

46 
	#CRL_AES_BLOCK
 16

	)

48 #ifde‡
INCLUDE_AES256


49 
	#CRL_AES_MAX_EXPKEY_SIZE
 60

	)

51 #ifde‡
INCLUDE_AES192


52 
	#CRL_AES_MAX_EXPKEY_SIZE
 52

	)

54 
	#CRL_AES_MAX_EXPKEY_SIZE
 44

	)

68 
uöt32_t
 
mC⁄ãxtId
;

69 
SKÊags_ë
 
mFœgs
;

70 c⁄° 
uöt8_t
 *
pmKey
;

71 c⁄° 
uöt8_t
 *
pmIv
;

72 
öt32_t
 
mIvSize
;

73 
uöt32_t
 
amIv
[4];

74 
öt32_t
 
mKeySize
;

75 
uöt32_t
 
amExpKey
[
CRL_AES_MAX_EXPKEY_SIZE
];

76 } 
	tAESCBC˘x_°t
;

87 #ifde‡
USE_HW_AES


91 
uöt32_t
 
mC⁄ãxtId
;

92 
SKÊags_ë
 
mFœgs
;

93 c⁄° 
uöt8_t
 *
pmKey
;

94 c⁄° 
uöt8_t
 *
pmIv
;

95 
öt32_t
 
mIvSize
;

96 
uöt32_t
 
amIv
[4];

98 } 
	tSK˘x_°t
;

108 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/Common/aes_low_level.h

26 #i‚de‡
__AES_LOW_LEVEL_H__


27 
	#__AES_LOW_LEVEL_H__


	)

29 #ifde‡
__˝lu•lus


43 
	#AES_BLOCK_SIZE
 4

	)

52 
	#Xtime
(
x
Ë((((xË& 0x7F7F7F7FuË<< 1Ë^ ((((xË& 0x80808080uË>> 7Ë* 0x0000001Bu))

	)

55 
	#u¥
(
x
,
n
Ë((xË>> (8*“))Ë| ((xË<< (32 - (8*“))))

	)

58 
	#fwd_mcﬁ
(
x
Ë(
	`Xtime
(x)^(
	`u¥
(((x)^Xtime(x)),3)Ë^ (u¥((x),2)Ë^ (u¥((x),1)))

	)

61 
	#öv_mcﬁ
(
x
Ë(
f2
=
	`Xtime
(x),
f4
=Xtime(f2),
f8
=Xtime(f4),(x)^=f8, f2^=f4^f8^(
	`u¥
((f2^(x)),3))^(u¥((f4^(x)),2))^(u¥((x),1)))

	)

65 
	#rŸ3
(
x
Ë(((xË<< 8 ) | ((xË>> 24))

	)

67 
	#rŸ2
(
x
Ë(((xË<< 16Ë| ((xË>> 16))

	)

69 
	#rŸ1
(
x
Ë(((xË<< 24Ë| ((xË>> 8 ))

	)

87 
	#AES_KEY_SIZE
 4

	)

88 
	#AES_EXPKEY_SIZE
 44

	)

91 
AES128_keyscheduÀ_íc
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
expkey
) ;

93 
AES128_keyscheduÀ_dec
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
expkey
) ;

95 
AES128_í¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

97 
AES128_de¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

108 
	#AES192_BLOCK_SIZE
 4

	)

109 
	#AES192_KEY_SIZE
 6

	)

110 
	#AES192_EXPKEY_SIZE
 52

	)

113 
AES192_keyscheduÀ_íc
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
exp
) ;

115 
AES192_keyscheduÀ_dec
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
exp
) ;

117 
AES192_í¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

119 
AES192_de¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

130 
	#AES256_BLOCK_SIZE
 4

	)

131 
	#AES256_KEY_SIZE
 8

	)

132 
	#AES256_EXPKEY_SIZE
 60

	)

135 
AES256_keyscheduÀ_íc
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
exp
) ;

137 
AES256_keyscheduÀ_dec
(c⁄° 
uöt32_t
* 
key
, uöt32_t* 
exp
) ;

139 
AES256_í¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

141 
AES256_de¸y±
(c⁄° 
uöt32_t
* 
öput_poöãr
, uöt32_t* 
ouçut_poöãr
, c⁄° uöt32_t* 
expkey
) ;

147 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/ECB/aes_ecb.h

79 #i‚de‡
__CRL_AES_ECB_H__


80 
	#__CRL_AES_ECB_H__


	)

82 #ifde‡
__˝lu•lus


93 
AESCBC˘x_°t
 
	tAESECB˘x_°t
;

97 #ifde‡
INCLUDE_ENCRYPTION


99 
öt32_t
 
AES_ECB_En¸y±_Inô
(
AESECB˘x_°t
 *
P_pAESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

102 
öt32_t
 
AES_ECB_En¸y±_Aµíd
 (
AESECB˘x_°t
 *
P_pAESECB˘x
,

103 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

104 
öt32_t
 
P_öputSize
,

105 
uöt8_t
 *
P_pOuçutBuf„r
,

106 
öt32_t
 *
P_pOuçutSize
);

109 
öt32_t
 
AES_ECB_En¸y±_Föish
 (
AESECB˘x_°t
 *
P_pAESECB˘x
,

110 
uöt8_t
 *
P_pOuçutBuf„r
,

111 
öt32_t
 *
P_pOuçutSize
);

113 #ifde‡
INCLUDE_DECRYPTION


115 
öt32_t
 
AES_ECB_De¸y±_Inô
 (
AESECB˘x_°t
 *
P_pAESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

118 
öt32_t
 
AES_ECB_De¸y±_Aµíd
 (
AESECB˘x_°t
 *
P_pAESECB˘x
,

119 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

120 
öt32_t
 
P_öputSize
,

121 
uöt8_t
 *
P_pOuçutBuf„r
,

122 
öt32_t
 *
P_pOuçutSize
);

125 
öt32_t
 
AES_ECB_De¸y±_Föish
 (
AESECB˘x_°t
 *
P_pAESECB˘x
,

126 
uöt8_t
 *
P_pOuçutBuf„r
,

127 
öt32_t
 *
P_pOuçutSize
);

132 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/GCM/aes_gcm.h

115 #i‚de‡
__CRL_AES_GCM_H__


116 
	#__CRL_AES_GCM_H__


	)

118 #ifde‡
__˝lu•lus


125 
uöt32_t
 
	tpﬁy_t
[4];

127 #i‡
CRL_GFMUL
==1

128 
pﬁy_t
 
	tèbÀ16_t
[16];

129 #ñi‡
CRL_GFMUL
==2

130 
pﬁy_t
 
	tèbÀ8x16_t
[8][16];

142 
uöt32_t
 
mC⁄ãxtId
;

143 
SKÊags_ë
 
mFœgs
;

144 c⁄° 
uöt8_t
 *
pmKey
;

145 c⁄° 
uöt8_t
 *
pmIv
;

146 
öt32_t
 
mIvSize
;

147 
uöt32_t
 
amIv
[4];

148 
öt32_t
 
mKeySize
;

149 c⁄° 
uöt8_t
 *
pmTag
;

150 
öt32_t
 
mTagSize
;

151 
öt32_t
 
mAADsize
;

152 
öt32_t
 
mPaylﬂdSize
;

153 
pﬁy_t
 
mP¨tülAuth
;

154 
uöt32_t
 
amExpKey
[
CRL_AES_MAX_EXPKEY_SIZE
];

155 #i‡
CRL_GFMUL
==0

156 
pﬁy_t
 
mPªcompuãdVÆues
;

157 #ñi‡
CRL_GFMUL
==1

158 
èbÀ16_t
 
mPªcompuãdVÆues
;

159 #ñi‡
CRL_GFMUL
==2

160 
èbÀ8x16_t
 
mPªcompuãdVÆues
;

162 } 
	tAESGCM˘x_°t
;

166 
öt32_t
 
AES_GCM_En¸y±_Inô
(
AESGCM˘x_°t
 *
P_pAESGCM˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

169 
öt32_t
 
AES_GCM_Hódî_Aµíd
(
AESGCM˘x_°t
 *
P_pAESGCM˘x
,

170 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

171 
öt32_t
 
P_öputSize
);

174 
öt32_t
 
AES_GCM_En¸y±_Aµíd
 (
AESGCM˘x_°t
 *
P_pAESGCM˘x
,

175 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

176 
öt32_t
 
P_öputSize
,

177 
uöt8_t
 *
P_pOuçutBuf„r
,

178 
öt32_t
 *
P_pOuçutSize
);

181 
öt32_t
 
AES_GCM_En¸y±_Föish
 (
AESGCM˘x_°t
 *
P_pAESGCM˘x
,

182 
uöt8_t
 *
P_pOuçutBuf„r
,

183 
öt32_t
 *
P_pOuçutSize
);

186 
öt32_t
 
AES_GCM_De¸y±_Inô
 (
AESGCM˘x_°t
 *
P_pAESGCM˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

189 
öt32_t
 
AES_GCM_De¸y±_Aµíd
 (
AESGCM˘x_°t
 *
P_pAESGCM˘x
,

190 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

191 
öt32_t
 
P_öputSize
,

192 
uöt8_t
 *
P_pOuçutBuf„r
,

193 
öt32_t
 *
P_pOuçutSize
);

196 
öt32_t
 
AES_GCM_De¸y±_Föish
 (
AESGCM˘x_°t
 *
P_pAESGCM˘x
,

197 
uöt8_t
 *
P_pOuçutBuf„r
,

198 
öt32_t
 *
P_pOuçutSize
);

203 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/KEYWRAP/aes_keywrap.h

90 #i‚de‡
__CRL_AES_KEYWRAP_H__


91 
	#__CRL_AES_KEYWRAP_H__


	)

93 #ifde‡
__˝lu•lus


102 
AESCBC˘x_°t
 
	tAESKW˘x_°t
;

104 
	#CRL_KWRAP_BLOCK_SIZE
 2

	)

106 
	#CRL_AES_KWRAP_BLOCK
 8

	)

108 #ifde‡
INCLUDE_ENCRYPTION


110 
öt32_t
 
AES_KeyWøp_En¸y±_Inô
 (
AESKW˘x_°t
 *
P_pAESKW˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

113 
öt32_t
 
AES_KeyWøp_En¸y±_Aµíd
 (
AESKW˘x_°t
 *
P_pAESKW˘x
,

114 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

115 
öt32_t
 
P_öputSize
,

116 
uöt8_t
 *
P_pOuçutBuf„r
,

117 
öt32_t
 *
P_pOuçutSize
);

120 
öt32_t
 
AES_KeyWøp_En¸y±_Föish
 (
AESKW˘x_°t
 *
P_pAESKW˘x
,

121 
uöt8_t
 *
P_pOuçutBuf„r
,

122 
öt32_t
 *
P_pOuçutSize
);

124 #ifde‡
INCLUDE_DECRYPTION


126 
öt32_t
 
AES_KeyWøp_De¸y±_Inô
 (
AESKW˘x_°t
 *
P_pAESKW˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

129 
öt32_t
 
AES_KeyWøp_De¸y±_Aµíd
 (
AESKW˘x_°t
 *
P_pAESKW˘x
,

130 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

131 
öt32_t
 
P_öputSize
,

132 
uöt8_t
 *
P_pOuçutBuf„r
,

133 
öt32_t
 *
P_pOuçutSize
);

136 
öt32_t
 
AES_KeyWøp_De¸y±_Föish
 (
AESKW˘x_°t
 *
P_pAESKW˘x
,

137 
uöt8_t
 *
P_pOuçutBuf„r
,

138 
öt32_t
 *
P_pOuçutSize
);

143 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/AES/aes.h

54 
	~"Comm⁄/´s_low_Àvñ.h
"

55 
	~"Comm⁄/´s_comm⁄.h
"

58 #ifde‡
INCLUDE_ECB


59 
	~"ECB/´s_ecb.h
"

62 #ifde‡
INCLUDE_CBC


63 
	~"CBC/´s_cbc.h
"

66 #ifde‡
INCLUDE_CTR


67 
	~"CTR/´s_˘r.h
"

70 #ifde‡
INCLUDE_GCM


71 
	~"GCM/´s_gcm.h
"

74 #ifde‡
INCLUDE_CCM


75 
	~"CCM/´s_ccm.h
"

78 #ifde‡
INCLUDE_CMAC


79 
	~"CMAC/´s_cmac.h
"

82 #ifde‡
INCLUDE_KEY_WRAP


83 
	~"KEYWRAP/´s_keywøp.h
"

	@code/Libararies/Cryptographic/inc/ARC4/arc4.h

69 #i‚de‡
__CRL_ARC4_H__


70 
	#__CRL_ARC4_H__


	)

72 #ifde‡
__˝lu•lus


87 
uöt32_t
 
mC⁄ãxtId
;

88 
SKÊags_ë
 
mFœgs
;

89 c⁄° 
uöt8_t
 *
pmKey
;

90 
öt32_t
 
mKeySize
;

91 
uöt8_t
 
mX
;

92 
uöt8_t
 
mY
;

93 
uöt8_t
 
amSèã
[256];

94 } 
	tARC4˘x_°t
;

99 
öt32_t
 
ARC4_En¸y±_Inô
(
ARC4˘x_°t
 *
P_pARC4˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

101 
öt32_t
 
ARC4_En¸y±_Aµíd
(
ARC4˘x_°t
 *
P_pARC4˘x
,

102 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

103 
öt32_t
 
P_öputSize
,

104 
uöt8_t
 *
P_pOuçutBuf„r
,

105 
öt32_t
 *
P_pOuçutSize
);

107 
öt32_t
 
ARC4_En¸y±_Föish
(
ARC4˘x_°t
 *
P_pARC4˘x
,

108 
uöt8_t
 *
P_pOuçutBuf„r
,

109 
öt32_t
 *
P_pOuçutSize
);

111 
öt32_t
 
ARC4_De¸y±_Inô
(
ARC4˘x_°t
 *
P_pARC4˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

113 
öt32_t
 
ARC4_De¸y±_Aµíd
(
ARC4˘x_°t
 *
P_pARC4˘x
,

114 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

115 
öt32_t
 
P_öputSize
,

116 
uöt8_t
 *
P_pOuçutBuf„r
,

117 
öt32_t
 *
P_pOuçutSize
);

119 
öt32_t
 
ARC4_De¸y±_Föish
 (
ARC4˘x_°t
 *
P_pARC4˘x
,

120 
uöt8_t
 *
P_pOuçutBuf„r
,

121 
öt32_t
 *
P_pOuçutSize
);

125 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/Common/err_codes.h

29 #i‚de‡
__CRL_ERR_CODES_H__


30 
	#__CRL_ERR_CODES_H__


	)

32 #ifde‡
__˝lu•lus


37 
	~"c⁄fig.h
"

38 
	~"ty≥s.h
"

39 
	~"îr_codes.h
"

54 
	#AUTHENTICATION_SUCCESSFUL
 (
öt32_t
Ë(1003Ë

	)

55 
	#AUTHENTICATION_FAILED
 (
öt32_t
Ë(1004Ë

	)

56 
	#SIGNATURE_VALID
 
AUTHENTICATION_SUCCESSFUL


	)

57 
	#SIGNATURE_INVALID
 
AUTHENTICATION_FAILED


	)

58 
	#ERR_MEMORY_FAIL
 (
öt32_t
Ë(1005Ë

	)

59 
	#DMA_BAD_ADDRESS
 (
öt32_t
Ë(2101Ë

	)

60 
	#DMA_ERR_TRANSFER
 (
öt32_t
Ë(2102Ë

	)

68 
	#HW_SUCCESS
 (
öt32_t
Ë(0Ë

	)

69 
	#HW_BAD_INPUT_SIZE
 (
öt32_t
Ë(2001Ë

	)

77 
	#AES_SUCCESS
 (
öt32_t
Ë(0Ë

	)

78 
	#AES_ERR_BAD_INPUT_SIZE
 (
öt32_t
Ë(3101Ë

	)

79 
	#AES_ERR_BAD_OPERATION
 (
öt32_t
Ë(3102Ë

	)

80 
	#AES_ERR_BAD_CONTEXT
 (
öt32_t
Ë(3103Ë

	)

81 
	#AES_ERR_BAD_PARAMETER
 (
öt32_t
Ë(3104Ë

	)

89 
	#ARC4_SUCCESS
 (
öt32_t
Ë(0Ë

	)

90 
	#ARC4_ERR_BAD_OPERATION
 (
öt32_t
Ë(3202Ë

	)

91 
	#ARC4_ERR_BAD_CONTEXT
 (
öt32_t
Ë(3203Ë

	)

92 
	#ARC4_ERR_BAD_PARAMETER
 (
öt32_t
Ë(3204Ë

	)

100 
	#DES_SUCCESS
 (
öt32_t
Ë(0Ë

	)

101 
	#DES_ERR_BAD_INPUT_SIZE
 (
öt32_t
Ë(3301Ë

	)

102 
	#DES_ERR_BAD_OPERATION
 (
öt32_t
Ë(3302Ë

	)

103 
	#DES_ERR_BAD_CONTEXT
 (
öt32_t
Ë(3303Ë

	)

104 
	#DES_ERR_BAD_PARAMETER
 (
öt32_t
Ë(3304Ë

	)

112 
	#TDES_SUCCESS
 (
öt32_t
Ë(0Ë

	)

113 
	#TDES_ERR_BAD_INPUT_SIZE
 (
öt32_t
Ë(3311Ë

	)

114 
	#TDES_ERR_BAD_OPERATION
 (
öt32_t
Ë(3312Ë

	)

115 
	#TDES_ERR_BAD_CONTEXT
 (
öt32_t
Ë(3313Ë

	)

116 
	#TDES_ERR_BAD_PARAMETER
 (
öt32_t
Ë(3314Ë

	)

124 
	#HASH_SUCCESS
 (
öt32_t
Ë(0Ë

	)

125 
	#HASH_ERR_BAD_OPERATION
 (
öt32_t
Ë(4001Ë

	)

126 
	#HASH_ERR_BAD_CONTEXT
 (
öt32_t
Ë(4002Ë

	)

127 
	#HASH_ERR_BAD_PARAMETER
 (
öt32_t
Ë(4003Ë

	)

135 
	#RSA_SUCCESS
 (
öt32_t
Ë(0Ë

	)

136 
	#RSA_ERR_BAD_OPERATION
 (
öt32_t
Ë(5102Ë

	)

137 
	#RSA_ERR_BAD_KEY
 (
öt32_t
Ë(5103Ë

	)

138 
	#RSA_ERR_BAD_PARAMETER
 (
öt32_t
Ë(5104Ë

	)

139 
	#RSA_ERR_UNSUPPORTED_HASH
 (
öt32_t
Ë(5105Ë

	)

140 
	#RSA_ERR_MESSAGE_TOO_LONG
 (
öt32_t
Ë(5106Ë

	)

141 
	#RSA_ERR_MODULUS_TOO_SHORT
 (
öt32_t
Ë(5107Ë

	)

149 
	#ECC_SUCCESS
 (
öt32_t
Ë(0Ë

	)

150 
	#ECC_ERR_BAD_OPERATION
 (
öt32_t
Ë(5202Ë

	)

151 
	#ECC_ERR_BAD_CONTEXT
 (
öt32_t
Ë(5203Ë

	)

152 
	#ECC_ERR_BAD_PARAMETER
 (
öt32_t
Ë(5204Ë

	)

153 
	#ECC_ERR_BAD_PUBLIC_KEY
 (
öt32_t
Ë(5205Ë

	)

154 
	#ECC_ERR_BAD_PRIVATE_KEY
 (
öt32_t
Ë(5206Ë

	)

155 
	#ECC_ERR_MISSING_EC_PARAMETER
 (
öt32_t
Ë(5207Ë

	)

156 
	#ECC_WARN_POINT_AT_INFINITY
 (
öt32_t
Ë(5208Ë

	)

164 
	#RNG_SUCCESS
 (
öt32_t
Ë(0Ë

	)

165 
	#RNG_ERR_UNINIT_STATE
 (
öt32_t
Ë(6001Ë

	)

166 
	#RNG_ERR_BAD_OPERATION
 (
öt32_t
Ë(6002Ë

	)

167 
	#RNG_ERR_RESEED_NEEDED
 (
öt32_t
Ë(6003Ë

	)

168 
	#RNG_ERR_BAD_PARAMETER
 (
öt32_t
Ë(6004Ë

	)

169 
	#RNG_ERR_BAD_ENTROPY_SIZE
 (
öt32_t
Ë(6006Ë

	)

170 
	#RNG_ERR_BAD_PERS_STRING_SIZE
 (
öt32_t
Ë(6007Ë

	)

171 
	#RNG_ERR_BAD_ADD_INPUT_SIZE
 (
öt32_t
Ë(6008Ë

	)

172 
	#RNG_ERR_BAD_REQUEST
 (
öt32_t
Ë(6009Ë

	)

173 
	#RNG_ERR_BAD_NONCE_SIZE
 (
öt32_t
Ë(6010Ë

	)

178 
	#MATH_SUCCESS
 (
öt32_t
Ë(0Ë

	)

179 
	#MATH_ERR_BIGNUM_OVERFLOW
 (
öt32_t
Ë(5301Ë

	)

180 
	#MATH_ERR_EVEN_MODULUS
 (
öt32_t
Ë(5302Ë

	)

181 
	#MATH_ERR_BAD_PARAMETER
 (
öt32_t
Ë(5304Ë

	)

187 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/Common/macros.h

29 #i‚de‡
__CRL_MACROS_H__


30 
	#__CRL_MACROS_H__


	)

32 #ifde‡
__˝lu•lus


51 
	#WORD_COUNT
(
b
Ë((
öt32_t
Ë((
uöt32_t
Ëb + 3uË/ 4u)

	)

60 
	#MAX
(
a
,
b
Ë((((
uöt32_t
)◊)Ë> ((uöt32_t)(b))Ë? (aË: (b))

	)

69 
	#MIN
(
a
,
b
Ë((((
uöt32_t
)◊)Ë> ((uöt32_t)(b))Ë? (bË: (a))

	)

78 #ifde‡
CL_ON_STM32


79 
	#ROL
(
vÆue
, 
bôs
Ë(
uöt32_t
Ë
	`__ROR
((vÆue),32 - (bôs))

	)

81 
	#ROL
(
vÆue
, 
bôs
Ë(
uöt32_t
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

90 #ifde‡
CL_ON_STM32


91 
	#ROR
(
vÆue
, 
bôs
Ë(
uöt32_t
Ë
	`__ROR
((vÆue),(bôs))

	)

93 
	#ROR
(
vÆue
, 
bôs
Ë(
uöt32_t
Ë(((vÆueË>> (bôs)Ë| ((vÆueË<< (32 - (bôs))))

	)

101 
	#BYTE_3
(
P_w‹d
Ë(
uöt8_t
Ë(P_w‹d & 0xFFu)

	)

108 
	#BYTE_2
(
P_w‹d
Ë(
uöt8_t
Ë((P_w‹d >> 8Ë& 0xFFu)

	)

115 
	#BYTE_1
(
P_w‹d
Ë(
uöt8_t
Ë((P_w‹d >> 16Ë& 0xFFu)

	)

122 
	#BYTE_0
(
P_w‹d
Ë(
uöt8_t
Ë((P_w‹d >> 24Ë& 0xFFu)

	)

130 
	#BYTE_X
(
P_w‹d
, 
P_n
Ë(
uöt8_t
Ë((P_w‹d >> (24 - (8 * (P_n)))Ë& 0xFFu)

	)

142 
	#WORD32_TO_WORD8
(
P_x
,
P_a
,
P_b
,
P_c
,
P_d
ËP_a=(
uöt8_t
)
	`BYTE_3
(P_x),P_b=(uöt8_t)
	`BYTE_2
(P_x),P_c=(uöt8_t)
	`BYTE_1
(P_x),P_d=(uöt8_t)
	`BYTE_0
(P_x)

	)

153 
	#WORD8_TO_WORD32
(
P_b0
, 
P_b1
, 
P_b2
, 
P_b3
Ë(
uöt32_t
Ë((uöt32_t)(P_b0Ë<< 24 | (uöt32_t)(P_b1Ë<< 16 | (uöt32_t)(P_b2Ë<< 8 | (P_b3))

	)

155 #i‡
CRL_ENDIANNESS
==1

163 #ifde‡
CL_ON_STM32


164 
	#LE_CONVERT_W32
(
V¨übÀToC⁄vît
Ë(
uöt32_t
Ë(
	`__REV
(V¨übÀToC⁄vît))

	)

166 
	#LE_CONVERT_W32
(
V¨übÀToC⁄vît
Ë(
uöt32_t
Ë((
	`ROL
–(uöt32_tËV¨übÀToC⁄vît,24Ë& 0xFF00FF00u ) | (ROL–(uöt32_tËV¨übÀToC⁄vît,8Ë& 0x00FF00FFu ))

	)

169 #ñi‡
CRL_ENDIANNESS
==2

178 
	#LE_CONVERT_W32
(
V¨übÀToC⁄vît
Ë(V¨übÀToC⁄vît)

	)

185 #i‡
CRL_ENDIANNESS
==2

193 
	#BE_CONVERT_W32
(
V¨übÀToC⁄vît
Ë((
	`ROL
(V¨übÀToC⁄vît,24)&0xFF00FF00Ë| (ROL(V¨übÀToC⁄vît,8)&0x00FF00FF))

	)

196 #ifde‡
CRL_CPU_SUPPORT_MISALIGNED


206 
	#BUFFER_2_W32
(
P_pI≈utBuf„r
,
P_ödex
Ë(
	`LE_CONVERT_W32
(*((c⁄° 
uöt32_t
 *Ë((P_pI≈utBuf„r)+(P_ödex)))))

	)

217 
	#W32_2_BUFFER
(
P_pOuçutBuf„r
,
P_ödex
,
P_w‹d
Ë*((
uöt32_t
*)(P_pOuçutBuf„r+(P_ödex)))=
	`LE_CONVERT_W32
(P_w‹d)

	)

228 
	#BUFFER_2_W32
(
P_pI≈utBuf„r
,
P_ödex
Ë(
	`WORD8_TO_WORD32
(P_pI≈utBuf„r[(P_ödex)],P_pI≈utBuf„r[(P_ödex)+1],P_pI≈utBuf„r[(P_ödex)+2],P_pI≈utBuf„r[(P_ödex)+3]))

	)

239 
	#W32_2_BUFFER
(
P_pOuçutBuf„r
,
P_ödex
,
P_w‹d
Ë
	`WORD32_TO_WORD8
((P_w‹d),P_pOuçutBuf„r[(P_ödex)+3],P_pOuçutBuf„r[(P_ödex)+2],P_pOuçutBuf„r[(P_ödex)+1],P_pOuçutBuf„r[(P_ödex)])

	)

250 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/Common/sk.h

29 #i‚de‡
__CRL_SK_H__


30 
	#__CRL_SK_H__


	)

33 #ifde‡
__˝lu•lus


44 
E_SK_DEFAULT
 = (
uöt32_t
) (0x00000000),

45 
E_SK_DONT_PERFORM_KEY_SCHEDULE
 = (
uöt32_t
) (0x00000001),

48 
E_SK_USE_DMA
 = (
uöt32_t
) (0x00000008),

51 
E_SK_FINAL_APPEND
 = (
uöt32_t
) (0x00000020),

52 
E_SK_OPERATION_COMPLETED
 = (
uöt32_t
) (0x00000002),

53 
E_SK_NO_MORE_APPEND_ALLOWED
 = (
uöt32_t
) (0x00000004),

55 
E_SK_NO_MORE_HEADER_APPEND_ALLOWED
 = (
uöt32_t
) (0x00000010),

58 
E_SK_APPEND_DONE
 = (
uöt32_t
) (0x00000040),

59 } 
	tSKÊags_ë
;

73 
	#C_ENC
 (
uöt32_t
Ë(0x00000000Ë

	)

74 
	#C_DEC
 (
uöt32_t
Ë(0x00000001Ë

	)

75 
	#C_DIR_MASK
 (
uöt32_t
Ë(0x00000001Ë

	)

76 
	#C_ECB
 (
uöt32_t
Ë(0x00000002Ë

	)

77 
	#C_CBC
 (
uöt32_t
Ë(0x00000004Ë

	)

78 
	#C_CTR
 (
uöt32_t
Ë(0x00000006Ë

	)

79 
	#C_MODE_MASK
 (
uöt32_t
Ë(0x00000006Ë

	)

80 
	#C_DES
 (
uöt32_t
Ë(0x00000008Ë

	)

81 
	#C_TDES
 (
uöt32_t
Ë(0x00000010Ë

	)

82 
	#C_AES
 (
uöt32_t
Ë(0x00000018Ë

	)

83 
	#C_ALGO_MASK
 (
uöt32_t
Ë(0x00000018Ë

	)

84 
	#C_AES128
 (
uöt32_t
Ë(0x10000000Ë

	)

85 
	#C_AES192
 (
uöt32_t
Ë(0x18000000Ë

	)

86 
	#C_AES256
 (
uöt32_t
Ë(0x20000000Ë

	)

87 
	#C_AES_KEY_MASK
 (
uöt32_t
Ë(0x00000038Ë

	)

91 
	#CRL_ENC
 0

	)

92 
	#CRL_DEC
 1

	)

95 
	#CRL_ECB
 0

	)

96 
	#CRL_CBC
 1

	)

97 
	#CRL_CTR
 2

	)

107 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/Common/types.h

29 #i‚de‡
__CRL_TYPES_H__


30 
	#__CRL_TYPES_H__


	)

33 #ifde‡
__˝lu•lus


47 #i‡!
deföed
(
_STDINT_H
Ë&& !deföed(
__°döt_h
Ë&& !deföed(
_STDINT
)

49 #i‚de‡
__uöt8_t_deföed


51 
	tuöt32_t
;

52 
	tuöt8_t
;

53 
	tuöt16_t
;

54 
	tuöt64_t
;

56 
	#__uöt8_t_deföed


	)

57 
	#__uöt16_t_deföed


	)

58 
	#__uöt32_t_deföed


	)

59 
	#__uöt64_t_deföed


	)

62 #i‚de‡
__öt8_t_deföed


64 sig√d 
	töt64_t
;

65 sig√d 
	töt32_t
;

66 sig√d 
	töt16_t
;

67 sig√d 
	töt8_t
;

68 
	#__öt8_t_deföed


	)

69 
	#__öt16_t_deföed


	)

70 
	#__öt32_t_deföed


	)

71 
	#__öt64_t_deföed


	)

79 
uöt8_t
 *
	gpmBuf
;

80 
uöt16_t
 
	gmSize
;

81 
uöt16_t
 
	gmU£d
;

83 
	tmembuf_°t
;

93 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/DES/CBC/des_cbc.h

79 #i‚de‡
__CRL_DES_CBC_H__


80 
	#__CRL_DES_CBC_H__


	)

82 #ifde‡
__˝lu•lus


89 #ifde‡
INCLUDE_ENCRYPTION


91 
öt32_t
 
DES_CBC_En¸y±_Inô
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

94 
öt32_t
 
DES_CBC_En¸y±_Aµíd
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
,

95 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

96 
öt32_t
 
P_öputSize
,

97 
uöt8_t
 *
P_pOuçutBuf„r
,

98 
öt32_t
 *
P_pOuçutSize
);

101 
öt32_t
 
DES_CBC_En¸y±_Föish
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
,

102 
uöt8_t
 *
P_pOuçutBuf„r
,

103 
öt32_t
 *
P_pOuçutSize
);

105 #ifde‡
INCLUDE_DECRYPTION


107 
öt32_t
 
DES_CBC_De¸y±_Inô
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

110 
öt32_t
 
DES_CBC_De¸y±_Aµíd
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
,

111 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

112 
öt32_t
 
P_öputSize
,

113 
uöt8_t
 *
P_pOuçutBuf„r
,

114 
öt32_t
 *
P_pOuçutSize
);

117 
öt32_t
 
DES_CBC_De¸y±_Föish
 (
DESCBC˘x_°t
 *
P_pDESCBC˘x
,

118 
uöt8_t
 *
P_pOuçutBuf„r
,

119 
öt32_t
 *
P_pOuçutSize
);

125 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/DES/Common/des_common.h

26 #i‚de‡
__DES_COMMON_H__


27 
	#__DES_COMMON_H__


	)

29 #ifde‡
__˝lu•lus


37 
	#CRL_DES_BLOCK
 8

	)

38 
	#CRL_DES_KEY
 8

	)

42 
uöt32_t
 
mC⁄ãxtId
;

43 
SKÊags_ë
 
mFœgs
;

44 c⁄° 
uöt8_t
 *
pmKey
;

45 c⁄° 
uöt8_t
 *
pmIv
;

46 
öt32_t
 
mIvSize
;

47 
uöt32_t
 
amIv
[2];

48 
uöt32_t
 
amExpKey
[32];

49 } 
	tDESCBC˘x_°t
;

55 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/DES/ECB/des_ecb.h

76 #i‚de‡
__CRL_DES_ECB_H__


77 
	#__CRL_DES_ECB_H__


	)

79 #ifde‡
__˝lu•lus


87 
DESCBC˘x_°t
 
	tDESECB˘x_°t
;

89 #ifde‡
INCLUDE_ENCRYPTION


91 
öt32_t
 
DES_ECB_En¸y±_Inô
(
DESECB˘x_°t
 *
P_pDESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

94 
öt32_t
 
DES_ECB_En¸y±_Aµíd
 (
DESECB˘x_°t
 *
P_pDESECB˘x
,

95 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

96 
öt32_t
 
P_öputSize
,

97 
uöt8_t
 *
P_pOuçutBuf„r
,

98 
öt32_t
 *
P_pOuçutSize
);

101 
öt32_t
 
DES_ECB_En¸y±_Föish
 (
DESECB˘x_°t
 *
P_pDESECB˘x
,

102 
uöt8_t
 *
P_pOuçutBuf„r
,

103 
öt32_t
 *
P_pOuçutSize
);

105 #ifde‡
INCLUDE_DECRYPTION


107 
öt32_t
 
DES_ECB_De¸y±_Inô
 (
DESECB˘x_°t
 *
P_pDESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

110 
öt32_t
 
DES_ECB_De¸y±_Aµíd
 (
DESECB˘x_°t
 *
P_pDESECB˘x
,

111 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

112 
öt32_t
 
P_öputSize
,

113 
uöt8_t
 *
P_pOuçutBuf„r
,

114 
öt32_t
 *
P_pOuçutSize
);

117 
öt32_t
 
DES_ECB_De¸y±_Föish
 (
DESECB˘x_°t
 *
P_pDESECB˘x
,

118 
uöt8_t
 *
P_pOuçutBuf„r
,

119 
öt32_t
 *
P_pOuçutSize
);

125 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/DES/des.h

46 
	~"Comm⁄/des_comm⁄.h
"

48 #ifde‡
INCLUDE_ECB


49 
	~"ECB/des_ecb.h
"

52 #ifde‡
INCLUDE_CBC


53 
	~"CBC/des_cbc.h
"

	@code/Libararies/Cryptographic/inc/ECC/LowLevel/elliptic.h

29 #i‚de‡
__CRL_ELLIPTIC_H__


30 
	#__CRL_ELLIPTIC_H__


	)

32 #ifde‡
__˝lu•lus


54 
öt32_t
 
ECCsymmëricPoöt
(c⁄° 
ECpoöt_°t
 *
P_pEC≤t
,

55 
ECpoöt_°t
 *
P_pECsymmëricP¡
,

56 c⁄° 
EC_°t
 *
P_pEC˘x
,

57 
membuf_°t
 *
P_pMemBuf
);

60 
öt32_t
 
N‹mÆize
(c⁄° 
ECpoöt_°t
 *
P_pECöputP¡
,

61 
ECpoöt_°t
 *
P_pECn‹mP¡
,

62 c⁄° 
m⁄tyP¨ams_°t
* 
P_pM⁄tyP¨ams
);

65 
öt32_t
 
ECCpoöt2M⁄ty
(
ECpoöt_°t
 *
P_pEC≤t
, c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

68 
öt32_t
 
ECCpoötFromM⁄ty
(
ECpoöt_°t
 *
P_pEC≤t
, c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

71 
öt32_t
 
M⁄tyJacProjAddPoöts
(c⁄° 
ECpoöt_°t
 *
P_pEC≤t1
,

72 c⁄° 
ECpoöt_°t
 *
P_pEC≤t2
,

73 
ECpoöt_°t
 *
P_pEC≤tSum
,

74 c⁄° 
EC_°t
 *
P_pEC˘x
,

75 c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

78 
öt32_t
 
M⁄tyJacProjDoubÀPoöt
(c⁄° 
ECpoöt_°t
 *
P_pEC≤t
,

79 
ECpoöt_°t
 *
P_pEC≤tDoubÀd
,

80 c⁄° 
EC_°t
 *
P_pEC˘x
,

81 c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

84 
öt32_t
 
NAF_Bö¨y_PoötMul
(c⁄° 
BigNum_°t
 *
P_pBNk
,

85 c⁄° 
ECpoöt_°t
 * 
P_pECba£P¡
,

86 
ECpoöt_°t
 * 
P_pECªsu…P¡
,

87 c⁄° 
EC_°t
 *
P_pEC˘x
,

88 c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

90 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/ECC/ecc.h

303 #i‚de‡
__CRL_ECC_H__


304 
	#__CRL_ECC_H__


	)

306 #ifde‡
__˝lu•lus


311 
	~"../MATH/m©h.h
"

322 
BigNum_°t
 *
pmA
;

323 
BigNum_°t
 *
pmB
;

324 
BigNum_°t
 *
pmP
;

325 
BigNum_°t
 *
pmN
;

326 
BigNum_°t
 *
pmGx
;

327 
BigNum_°t
 *
pmGy
;

328 } 
	tötEC_°t
;

336 c⁄° 
uöt8_t
 *
pmA
;

338 
öt32_t
 
mAsize
;

340 c⁄° 
uöt8_t
 *
pmB
;

342 
öt32_t
 
mBsize
;

344 c⁄° 
uöt8_t
 *
pmP
;

346 
öt32_t
 
mPsize
;

348 c⁄° 
uöt8_t
 *
pmN
;

350 
öt32_t
 
mNsize
;

352 c⁄° 
uöt8_t
 *
pmGx
;

354 
öt32_t
 
mGxsize
;

356 c⁄° 
uöt8_t
 *
pmGy
;

358 
öt32_t
 
mGysize
;

360 
ötEC_°t
 *
pmI¡î«lEC
;

361 } 
	tEC_°t
;

367 
	eECP¡Fœgs_e


370 
E_POINT_GENERAL
 = 0,

372 
E_POINT_NORMALIZED
 = 1,

374 
E_POINT_INFINITY
 = 2,

376 
E_POINT_MONTY
 = 4

377 } 
	tECP¡Fœgs_ë
;

385 
BigNum_°t
 *
pmX
 ;

387 
BigNum_°t
 *
pmY
 ;

389 
BigNum_°t
 *
pmZ
 ;

391 
ECP¡Fœgs_ë
 
mFœg
;

396 } 
	tECpoöt_°t
;

401 
	eECco‹dö©e_e


403 
E_ECC_POINT_COORDINATE_X
 = 0,

405 
E_ECC_POINT_COORDINATE_Y
 = 1,

407 
E_ECC_POINT_COORDINATE_Z
 = 2,

408 } 
	tECco‹dö©e_ë
;

416 
BigNum_°t
 *
pmD
;

417 } 
	tECC¥ivKey_°t
;

425 
BigNum_°t
 *
pmR
 ;

427 
BigNum_°t
 *
pmS
 ;

428 } 
	tECDSAsig«tuª_°t
;

434 
	eECDSAsignVÆues_e


436 
E_ECDSA_SIGNATURE_R_VALUE
 = 0,

437 
E_ECDSA_SIGNATURE_S_VALUE
 = 1,

438 } 
	tECDSAsignVÆues_ë
;

446 
ECpoöt_°t
 *
pmPubKey
;

448 
EC_°t
 *
pmEC
;

449 } 
	tECDSAvîifyCtx_°t
;

458 
ECC¥ivKey_°t
 *
pmPrivKey
;

460 
EC_°t
 *
pmEC
;

462 
RNG°©e_°t
 *
pmRNG
;

463 } 
	tECDSAsignCtx_°t
;

466 
öt32_t
 
ECCöôEC
(
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

467 
öt32_t
 
ECC‰ìEC
(
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

468 
öt32_t
 
ECCöôPoöt
(
ECpoöt_°t
 **
P_µECP¡
, c⁄° 
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

469 
öt32_t
 
ECC‰ìPoöt
(
ECpoöt_°t
 **
P_pECP¡
, 
membuf_°t
 *
P_pMemBuf
);

470 
öt32_t
 
ECC£tPoötCo‹dö©e
(
ECpoöt_°t
 *
P_pECP¡
,

471 
ECco‹dö©e_ë
 
P_Co‹dö©e
,

472 c⁄° 
uöt8_t
 *
P_pCo‹dö©eVÆue
,

473 
öt32_t
 
P_co‹dö©eSize
);

474 
öt32_t
 
ECCgëPoötCo‹dö©e
(c⁄° 
ECpoöt_°t
 *
P_pECP¡
,

475 
ECco‹dö©e_ë
 
P_Co‹dö©e
,

476 
uöt8_t
 *
P_pCo‹dö©eVÆue
,

477 
öt32_t
 *
P_pCo‹dö©eSize
);

478 
öt32_t
 
ECC£tPoötGíî©‹
(
ECpoöt_°t
 *
P_pPoöt
, c⁄° 
EC_°t
 *
P_pEC˘x
);

479 
öt32_t
 
ECCc›yPoöt
(c⁄° 
ECpoöt_°t
 *
P_pOrigöÆPoöt
, ECpoöt_°à*
P_pC›yPoöt
);

480 
öt32_t
 
ECCöôPrivKey
(
ECC¥ivKey_°t
 **
P_µECC¥ivKey
, c⁄° 
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

481 
öt32_t
 
ECC‰ìPrivKey
(
ECC¥ivKey_°t
 **
P_pECC¥ivKey
, 
membuf_°t
 *
P_pMemBuf
);

482 
öt32_t
 
ECC£tPrivKeyVÆue
(
ECC¥ivKey_°t
 *
P_pECC¥ivKey
,

483 c⁄° 
uöt8_t
 *
P_pPriv©eKey
,

484 
öt32_t
 
P_¥iv©eKeySize
);

485 
öt32_t
 
ECCgëPrivKeyVÆue
(c⁄° 
ECC¥ivKey_°t
 *
P_pECC¥ivKey
,

486 
uöt8_t
 *
P_pPriv©eKey
,

487 
öt32_t
 *
P_pPriv©eKeySize
);

488 
öt32_t
 
ECCsˇœrMul
(c⁄° 
ECpoöt_°t
 *
P_pECba£P¡
,

489 c⁄° 
ECC¥ivKey_°t
 *
P_pECC¥ivKey
,

490 
ECpoöt_°t
 *
P_pECªsu…P¡
,

491 c⁄° 
EC_°t
 *
P_pEC˘x
,

492 
membuf_°t
 *
P_pMemBuf
);

493 
öt32_t
 
ECDSAöôSign
(
ECDSAsig«tuª_°t
 **
P_µSig«tuª
, c⁄° 
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

494 
öt32_t
 
ECDSA‰ìSign
(
ECDSAsig«tuª_°t
 **
P_pSig«tuª
, 
membuf_°t
 *
P_pMemBuf
);

495 
öt32_t
 
ECDSA£tSig«tuª
(
ECDSAsig«tuª_°t
 *
P_pSig«tuª
,

496 
ECDSAsignVÆues_ë
 
P_R‹S
,

497 c⁄° 
uöt8_t
 *
P_pVÆue
,

498 
öt32_t
 
P_vÆueSize
);

499 
öt32_t
 
ECDSAgëSig«tuª
(c⁄° 
ECDSAsig«tuª_°t
 *
P_pSig«tuª
,

500 
ECDSAsignVÆues_ë
 
P_R‹S
,

501 
uöt8_t
 *
P_pVÆue
,

502 
öt32_t
 *
P_pVÆueSize
);

503 
öt32_t
 
ECDSAvîify
(c⁄° 
uöt8_t
 *
P_pDige°
,

504 
öt32_t
 
P_dige°Size
,

505 c⁄° 
ECDSAsig«tuª_°t
 *
P_pSig«tuª
,

506 c⁄° 
ECDSAvîifyCtx_°t
 *
P_pVîifyCtx
,

507 
membuf_°t
 *
P_pMemBuf
);

508 
öt32_t
 
ECCvÆid©ePubKey
(c⁄° 
ECpoöt_°t
 *
pECCpubKey
, c⁄° 
EC_°t
 *
P_pEC˘x
, 
membuf_°t
 *
P_pMemBuf
);

509 
öt32_t
 
ECCkeyGí
(
ECC¥ivKey_°t
 *
P_pPrivKey
,

510 
ECpoöt_°t
 *
P_pPubKey
,

511 
RNG°©e_°t
 * 
P_pR™domSèã
,

512 c⁄° 
EC_°t
 *
P_pEC˘x
,

513 
membuf_°t
 *
P_pMemBuf
);

514 
öt32_t
 
ECDSAsign
(c⁄° 
uöt8_t
 *
P_pDige°
,

515 
öt32_t
 
P_dige°Size
,

516 c⁄° 
ECDSAsig«tuª_°t
 *
P_pSig«tuª
,

517 c⁄° 
ECDSAsignCtx_°t
 *
P_pSignCtx
,

518 
membuf_°t
 *
P_pMemBuf
);

524 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/Common/hash_common.h

28 #i‚de‡
__CRL_HASH_COMMON_H__


29 
	#__CRL_HASH_COMMON_H__


	)

31 #ifde‡
__˝lu•lus


42 
	eHashTy≥_e


44 
E_MD5
,

45 
E_SHA1
,

46 
E_SHA224
,

47 
E_SHA256
,

48 
E_SHA384
,

49 
E_SHA512
,

50 } 
	thashTy≥_ë
;

57 
	eHashFœgs_e


59 
E_HASH_DEFAULT
 = (
uöt32_t
) (0x00000000),

61 
E_HASH_DONT_PERFORM_KEY_SCHEDULE
 = (
uöt32_t
) (0x00000001),

62 
E_HASH_USE_DMA
 = (
uöt32_t
) (0x00000008),

65 
E_HASH_OPERATION_COMPLETED
 = (
uöt32_t
) (0x00000002),

66 
E_HASH_NO_MORE_APPEND_ALLOWED
 = (
uöt32_t
) (0x00000004),

69 } 
	tHashFœgs_ë
;

77 
uöt32_t
 
mC⁄ãxtId
;

78 
HashFœgs_ë
 
mFœgs
;

79 
öt32_t
 
mTagSize
;

80 
uöt8_t
 
amBuf„r
[64];

81 
uöt32_t
 
amCou¡
[2];

82 
uöt32_t
 
amSèã
[8];

83 } 
	tHASH˘x_°t
;

90 
uöt32_t
 
mC⁄ãxtId
;

91 
HashFœgs_ë
 
mFœgs
;

92 
öt32_t
 
mTagSize
;

93 c⁄° 
uöt8_t
 *
pmKey
;

94 
öt32_t
 
mKeySize
;

95 
uöt8_t
 
amKey
[64];

96 
HASH˘x_°t
 
mHASH˘x_°
;

97 } 
	tHMAC˘x_°t
;

103 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/Common/sha256_sha224_transform.h

29 #i‚de‡
__SHA256_TRANSFORM_H__


30 
	#__SHA256_TRANSFORM_H__


	)

32 #ifde‡
__˝lu•lus


38 
SHA256Upd©e
(
HASH˘x_°t
* 
P_pSHA256˘x
, c⁄° 
uöt8_t
* 
P_pI≈ut
, 
uöt32_t
 
P_öputSize
);

40 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/MD5/hmac_md5.h

84 #i‚de‡
__CRL_HMAC_MD5_H__


85 
	#__CRL_HMAC_MD5_H__


	)

87 #ifde‡
__˝lu•lus


100 
HMAC˘x_°t
 
	tHMAC_MD5˘x_°t
;

105 
öt32_t
 
HMAC_MD5_Inô
(
HMAC_MD5˘x_°t
 *
P_pHMAC_MD5˘x
);

106 
öt32_t
 
HMAC_MD5_Aµíd
(
HMAC_MD5˘x_°t
 *
P_pHMAC_MD5˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

107 
öt32_t
 
HMAC_MD5_Föish
(
HMAC_MD5˘x_°t
 *
P_pHMAC_MD5˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

114 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/MD5/md5.h

77 #i‚de‡
__CRL_MD5_H__


78 
	#__CRL_MD5_H__


	)

80 #ifde‡
__˝lu•lus


90 
	#CRL_MD5_SIZE
 16

	)

95 
HASH˘x_°t
 
	tMD5˘x_°t
;

98 
öt32_t
 
MD5_Inô
(
MD5˘x_°t
 *
P_pMD5˘x
);

100 
öt32_t
 
MD5_Aµíd
(
MD5˘x_°t
 *
P_pMD5˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

102 
öt32_t
 
MD5_Föish
(
MD5˘x_°t
 *
P_pMD5˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

107 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/MD5/md5_low_level.h

29 #i‚de‡
__MD5_LOW_LEVEL_H__


30 
	#__MD5_LOW_LEVEL_H__


	)

32 #ifde‡
__˝lu•lus


38 
¸l_u_MD5_Inô
(
MD5˘x_°t
 *
P_pMD5˘x
);

40 
¸l_u_MD5_Upd©e
(
MD5˘x_°t
 *
P_pMD5˘x
, c⁄° 
uöt8_t
 *
P_pI≈ut
, 
uöt32_t
 
P_öputSize
);

42 
¸l_u_MD5_Föish
(
MD5˘x_°t
 *
P_pMD5˘x
, 
uöt8_t
 *
P_pDige°
);

45 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA1/hmac_sha1.h

82 #i‚de‡
__CRL_HMAC_SHA1_H__


83 
	#__CRL_HMAC_SHA1_H__


	)

85 #ifde‡
__˝lu•lus


98 
HMAC˘x_°t
 
	tHMAC_SHA1˘x_°t
;

104 
öt32_t
 
HMAC_SHA1_Inô
(
HMAC_SHA1˘x_°t
 *
P_pHMAC_SHA1˘x
);

105 
öt32_t
 
HMAC_SHA1_Aµíd
(
HMAC_SHA1˘x_°t
 *
P_pHMAC_SHA1˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

106 
öt32_t
 
HMAC_SHA1_Föish
(
HMAC_SHA1˘x_°t
 *
P_pHMAC_SHA1˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

113 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA1/sha1.h

78 #i‚de‡
__CRL_SHA1_H__


79 
	#__CRL_SHA1_H__


	)

81 #ifde‡
__˝lu•lus


91 
	#CRL_SHA1_SIZE
 20

	)

96 
HASH˘x_°t
 
	tSHA1˘x_°t
;

99 
öt32_t
 
SHA1_Inô
(
SHA1˘x_°t
 *
P_pSHA1˘x
);

101 
öt32_t
 
SHA1_Aµíd
(
SHA1˘x_°t
 *
P_pSHA1˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

103 
öt32_t
 
SHA1_Föish
(
SHA1˘x_°t
 *
P_pSHA1˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

109 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA1/sha1_low_level.h

29 #i‚de‡
__SHA1_LOW_LEVEL_H__


30 
	#__SHA1_LOW_LEVEL_H__


	)

32 #ifde‡
__˝lu•lus


39 
SHA1Inô
(
SHA1˘x_°t
 *
P_pHASH˘x
);

42 
SHA1Upd©e
(
SHA1˘x_°t
* 
P_pHASH˘x
, c⁄° 
uöt8_t
* 
P_pI≈ut
, 
uöt32_t
 
P_öputSize
);

45 
SHA1FöÆ
(
SHA1˘x_°t
* 
P_pHASH˘x
, 
uöt8_t
 *
P_pDige°
);

47 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA224/hmac_sha224.h

82 #i‚de‡
__CRL_HMAC_SHA224_H__


83 
	#__CRL_HMAC_SHA224_H__


	)

85 #ifde‡
__˝lu•lus


98 
HMAC˘x_°t
 
	tHMAC_SHA224˘x_°t
;

104 
öt32_t
 
HMAC_SHA224_Inô
(
HMAC_SHA224˘x_°t
 *
P_pHMAC_SHA224˘x
);

105 
öt32_t
 
HMAC_SHA224_Aµíd
(
HMAC_SHA224˘x_°t
 *
P_pHMAC_SHA224˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

106 
öt32_t
 
HMAC_SHA224_Föish
(
HMAC_SHA224˘x_°t
 *
P_pHMAC_SHA224˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

113 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA224/sha224.h

76 #i‚de‡
__CRL_SHA224_H__


77 
	#__CRL_SHA224_H__


	)

79 #ifde‡
__˝lu•lus


88 
	#CRL_SHA224_SIZE
 28

	)

91 
HASH˘x_°t
 
	tSHA224˘x_°t
;

93 
öt32_t
 
SHA224_Inô
(
SHA224˘x_°t
 *
P_pSHA224˘x
);

95 
öt32_t
 
SHA224_Aµíd
(
SHA224˘x_°t
 *
P_pSHA224˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

97 
öt32_t
 
SHA224_Föish
(
SHA224˘x_°t
 *
P_pSHA224˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

103 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA224/sha224_low_level.h

29 #i‚de‡
__SHA224_LOW_LEVEL_H__


30 
	#__SHA224_LOW_LEVEL_H__


	)

32 #ifde‡
__˝lu•lus


40 
SHA224Inô
(
SHA224˘x_°t
* 
P_pSHA224˘x
);

42 
SHA224FöÆ
(
SHA224˘x_°t
* 
P_pSHA224˘x
, 
uöt8_t
 *
P_pDige°
);

44 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA256/hmac_sha256.h

84 #i‚de‡
__CRL_HMAC_SHA256_H__


85 
	#__CRL_HMAC_SHA256_H__


	)

87 #ifde‡
__˝lu•lus


100 
HMAC˘x_°t
 
	tHMAC_SHA256˘x_°t
;

106 
öt32_t
 
HMAC_SHA256_Inô
(
HMAC_SHA256˘x_°t
 *
P_pHMAC_SHA256˘x
);

107 
öt32_t
 
HMAC_SHA256_Aµíd
(
HMAC_SHA256˘x_°t
 *
P_pHMAC_SHA256˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

108 
öt32_t
 
HMAC_SHA256_Föish
(
HMAC_SHA256˘x_°t
 *
P_pHMAC_SHA256˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

115 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA256/sha256.h

75 #i‚de‡
__CRL_SHA256_H__


76 
	#__CRL_SHA256_H__


	)

78 #ifde‡
__˝lu•lus


87 
	#CRL_SHA256_SIZE
 32

	)

90 
HASH˘x_°t
 
	tSHA256˘x_°t
;

93 
öt32_t
 
SHA256_Inô
(
SHA256˘x_°t
 *
P_pSHA256˘x
);

95 
öt32_t
 
SHA256_Aµíd
(
SHA256˘x_°t
 *
P_pSHA256˘x
, c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
, i¡32_à
P_öputSize
);

97 
öt32_t
 
SHA256_Föish
(
SHA256˘x_°t
 *
P_pSHA256˘x
, 
uöt8_t
 *
P_pOuçutBuf„r
, i¡32_à*
P_pOuçutSize
);

102 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/SHA256/sha256_low_level.h

29 #i‚de‡
__SHA256_LOW_LEVEL_H__


30 
	#__SHA256_LOW_LEVEL_H__


	)

32 #ifde‡
__˝lu•lus


39 
SHA256Inô
(
SHA256˘x_°t
* 
P_pSHA256˘x
);

41 
SHA256FöÆ
(
SHA256˘x_°t
* 
P_pSHA256˘x
, 
uöt8_t
 *
P_pDige°
);

44 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/HASH/hash.h

49 
	~"Comm⁄/hash_comm⁄.h
"

55 #ifde‡
INCLUDE_MD5


56 
	~"MD5/md5.h
"

57 #ifde‡
INCLUDE_HMAC


58 
	~"MD5/hmac_md5.h
"

62 #ifde‡
INCLUDE_SHA1


63 
	~"SHA1/sha1.h
"

64 #ifde‡
INCLUDE_HMAC


65 
	~"SHA1/hmac_sha1.h
"

69 #ifde‡
INCLUDE_SHA224


70 
	~"SHA224/sha224.h
"

71 
	~"Comm⁄/sha256_sha224_å™sf‹m.h
"

72 #ifde‡
INCLUDE_HMAC


73 
	~"SHA224/hmac_sha224.h
"

77 #ifde‡
INCLUDE_SHA256


78 
	~"SHA256/sha256.h
"

79 
	~"Comm⁄/sha256_sha224_å™sf‹m.h
"

80 #ifde‡
INCLUDE_HMAC


81 
	~"SHA256/hmac_sha256.h
"

	@code/Libararies/Cryptographic/inc/MATH/BN/arith.h

29 #i‚de‡
__CRL_ARITH_H__


30 
	#__CRL_ARITH_H__


	)

32 #ifde‡
__˝lu•lus


37 
	~"bn.h
"

46 
öt32_t
 
AddBig
(c⁄° 
BigNum_°t
 *
P_pAddíd1BN
,

47 c⁄° 
BigNum_°t
 *
P_pAddíd2BN
,

48 
BigNum_°t
 *
P_pSumBN
,

49 
membuf_°t
 *
P_pMemBuf
);

52 
öt32_t
 
SubBig
(c⁄° 
BigNum_°t
 *
P_pMöuídBN
,

53 c⁄° 
BigNum_°t
 *
P_pSubåahídBN
,

54 
BigNum_°t
 * 
P_pDif„ªn˚BN
,

55 
membuf_°t
 *
P_pMemBuf
);

59 
öt32_t
 
Fa°Mul2
(
BigNum_°t
 *
P_pBN
);

61 
Fa°Div2
(
BigNum_°t
 *
P_pBN
);

64 
öt32_t
 
Fa°MulI¬îBa£
(
BigNum_°t
 *
P_pBN
, 
uöt16_t
 
P_exp
);

67 
Fa°DivI¬îBa£
(
BigNum_°t
 * 
P_pBN
, 
uöt16_t
 
P_exp
);

70 
öt32_t
 
Le·Shi·
(
BigNum_°t
 * 
P_pBN
, 
uöt32_t
 
P_shi·
);

72 
RightShi·
(
BigNum_°t
 *
P_pBN
, 
uöt32_t
 
P_shi·
);

75 
öt32_t
 
MulBigbyUnI¡
(
BigNum_°t
 *
P_pBN
,
uöt32_t
 
P_Á˘‹2
);

79 
öt32_t
 
Sub_Moduli_Big
(c⁄° 
BigNum_°t
 *
P_pMöuídBN
,

80 c⁄° 
BigNum_°t
 *
P_pSubåahídBN
,

81 
BigNum_°t
 *
P_pDif„ªn˚BN


88 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/BN/bn.h

29 #i‚de‡
__CRL_BN_H__


30 
	#__CRL_BN_H__


	)

32 #ifde‡
__˝lu•lus


46 
uöt32_t
 *
pmDigô
;

47 
uöt16_t
 
mNumDigôs
;

48 
uöt8_t
 
mSize
;

49 
öt8_t
 
mSignFœg
;

50 } 
	tBigNum_°t
;

54 
	#NBIT_DIGIT
 32u

	)

55 
	#MSBIT_MASK
 0x80000000u

	)

56 
	#MSBYTE_MASK
 0xFF000000u

	)

57 
	#LSBIT_MASK
 0x00000001u

	)

58 
	#MAX_DIGIT_VALUE
 0xFFFFFFFFu

	)

59 
	#SIGN_POSITIVE
 0

	)

60 
	#SIGN_NEGATIVE
 1

	)

66 
öt32_t
 
StAŒocBig
(
BigNum_°t
 **
P_µBignum
, i¡32_à
P_w‹dSize
, 
membuf_°t
 *
P_pMembuf
);

69 
StFªeBig
(
BigNum_°t
 **
P_pBignum
, 
membuf_°t
 *
P_pMembuf
);

72 
InôBig
(
BigNum_°t
 * 
P_pBN
, 
öt32_t
 
P_öôülVÆue
);

75 
öt32_t
 
C›yBig
(c⁄° 
BigNum_°t
 *
P_pI≈utBN
, BigNum_°à*
P_pOuçutBN
);

78 
öt32_t
 
IsZîoBig
(c⁄° 
BigNum_°t
 *
P_pI≈utBN
);

81 
SëZîoBig
(
BigNum_°t
 * 
P_pI≈utBN
);

84 
öt32_t
 
SignBig
(c⁄° 
BigNum_°t
 *
P_pI≈utBN
);

86 
öt32_t
 
EvíBig
(c⁄° 
BigNum_°t
 *
P_pBN
);

89 
öt32_t
 
Com∑ªBig
(c⁄° 
BigNum_°t
 *
P_pI≈ut1BN
, c⁄° BigNum_°à*
P_pI≈ut2BN
);

92 
öt32_t
 
Cou¡Bôs
(c⁄° 
BigNum_°t
 *
P_pI≈utBN
);

94 
öt32_t
 
Cou¡Byãs
(c⁄° 
BigNum_°t
 * 
P_pI≈utBN
);

97 
uöt16_t
 
GiveBô
(c⁄° 
BigNum_°t
 *
P_pBN
, 
uöt32_t
 
P_pos
);

103 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/BN/conv.h

30 #i‚de‡
__CRL_CONV_H__


31 
	#__CRL_CONV_H__


	)

33 #ifde‡
__˝lu•lus


38 
	~"bn.h
"

46 
W32_to_W8
(c⁄° 
uöt32_t
 *
P_pAºayIn
, 
uöt8_t
 *
P_pAºayOut
, 
öt32_t
 
P_ReqW8
);

49 
öt32_t
 
W8_to_Big
(c⁄° 
uöt8_t
 *
P_pAºayIn
, 
uöt32_t
 
P_AºayInSize
, 
BigNum_°t
 * 
P_outBig
);

52 
Big_to_W8
(
BigNum_°t
 * 
P_öBig
, 
uöt8_t
 *
P_pAºayOut
, 
öt32_t
 *
P_pAºayOutSize
);

55 
öt32_t
 
Big_to_fixedW8
(
BigNum_°t
 * 
P_pInBig
, 
uöt8_t
 *
P_pAºayOut
, i¡32_à
P_pAºayOutSize
);

60 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/BN/modular.h

29 #i‚de‡
__CRL_MODULAR_H__


30 
	#__CRL_MODULAR_H__


	)

32 #ifde‡
__˝lu•lus


45 
öt32_t
 
ModuœrAddBig
(c⁄° 
BigNum_°t
 * 
P_pAddíd1BN
,

46 c⁄° 
BigNum_°t
 * 
P_pAddíd2BN
,

47 
BigNum_°t
 * 
P_pModSumBN
,

48 c⁄° 
BigNum_°t
 * 
P_pModBN
,

49 
membuf_°t
 *
P_pMemBuf
);

52 
öt32_t
 
ModuœrSubBig
(c⁄° 
BigNum_°t
 * 
P_pMöuídBN
,

53 c⁄° 
BigNum_°t
 * 
P_pSubåahídBN
,

54 
BigNum_°t
 * 
P_pModDiffBN
,

55 c⁄° 
BigNum_°t
 * 
P_pModBN
,

56 
membuf_°t
 *
P_pMemBuf
);

59 
öt32_t
 
ModuœrFa°Mul2
(
BigNum_°t
 * 
P_pBN
, c⁄° BigNum_°à* 
P_pModBN
, 
membuf_°t
 *
P_pMemBuf
);

62 
öt32_t
 
ModuœrInvBig
(c⁄° 
BigNum_°t
 *
P_pI≈utBN
,

63 
BigNum_°t
 *
P_pInvî£BN
,

64 c⁄° 
BigNum_°t
 *
P_pModBN
,

65 
membuf_°t
 *
P_pMemBuf
 );

68 
öt32_t
 
ModuœrExpSlidWö
(
BigNum_°t
 * 
P_pBa£BN
,

69 c⁄° 
BigNum_°t
 * 
P_pExpBN
,

70 c⁄° 
BigNum_°t
 * 
P_pModulusBN
,

71 
BigNum_°t
 *
P_pOuçutBN
,

72 
membuf_°t
 *
P_pMemBuf
);

78 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/BN/monty.h

29 #i‚de‡
__CRL_MONTY_H__


30 
	#__CRL_MONTY_H__


	)

36 #ifde‡
__˝lu•lus


53 c⁄° 
BigNum_°t
 *
pmModulusBN
;

54 
BigNum_°t
 *
pmR2
;

55 
uöt32_t
 
mModInvLSW
;

56 
membuf_°t
 *
pmMemBuf
;

57 } 
	tm⁄tyP¨ams_°t
;

68 
öt32_t
 
M⁄tyInô
–c⁄° 
BigNum_°t
 *
P_pModulusBN
,

69 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
,

70 
membuf_°t
 *
P_pMemBuf
);

72 
M⁄tyKûlR2
(
m⁄tyP¨ams_°t
 * 
P_pM⁄tyP¨ams
);

75 
M⁄tyKûlAŒ
(
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

78 
öt32_t
 
M⁄tyExô
(c⁄° 
BigNum_°t
 *
P_pM⁄tyBN
,

79 
BigNum_°t
 *
P_pN‹mÆBN
,

80 c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

83 
öt32_t
 
M⁄tyMul
(c⁄° 
BigNum_°t
 * 
P_pFa˘‹1BN
,

84 c⁄° 
BigNum_°t
 * 
P_pFa˘‹2BN
,

85 
BigNum_°t
 * 
P_pProdu˘BN
,

86 c⁄° 
m⁄tyP¨ams_°t
 *
P_pM⁄tyP¨ams
);

89 
	#M⁄tySqr
(
P_Ba£
,
P_Squ¨e
,
P_pM⁄tyP¨ams
Ë
	`M⁄tyMul
((P_Ba£),(P_Ba£),(P_Squ¨e),(P_pM⁄tyP¨ams))

	)

95 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/BN/rng_bn.h

29 #i‚de‡
__CRL_RNG_BN_H__


30 
	#__CRL_RNG_BN_H__


	)

32 #ifde‡
__˝lu•lus


37 
	~"bn.h
"

38 
	~"../../RNG/∫g.h
"

47 
öt32_t
 
GíRndBN
(öt32_à
P_nBôs
, 
BigNum_°t
 *
P_pR™dBN
, 
RNG°©e_°t
 *
P_pR™domSèã
);

51 
öt32_t
 
GíRndBNmodN
(
BigNum_°t
 *
P_pR™dBN
, c⁄° BigNum_°à*
P_pModBN
, 
RNG°©e_°t
 *
P_pR™domSèã
);

57 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/MATH/math.h

31 
	~"BN/bn.h
"

32 
	~"BN/c⁄v.h
"

33 
	~"BN/¨ôh.h
"

34 
	~"BN/m⁄ty.h
"

35 
	~"BN/moduœr.h
"

36 #ifde‡
INCLUDE_RNG


37 
	~"BN/∫g_bn.h
"

	@code/Libararies/Cryptographic/inc/RNG/DRBG_AES128/drbg.h

29 #i‚de‡
__CRL_DRGB_H__


30 
	#__CRL_DRGB_H__


	)

32 #ifde‡
__˝lu•lus


45 
uöt32_t
 
v
[4];

46 
uöt32_t
 
key
[4];

47 
uöt32_t
 
ª£ed_cou¡î
;

48 } 
	tdrbg_´s128_°©e_°t
;

53 
	#CRL_DRBG_AES_MAX_BYTES_PER_REQUEST
 65536u

	)

54 
	#CRL_DRBG_AES128_ENTROPY_MIN_LEN
 16u

	)

55 
	#CRL_DRBG_AES_ENTROPY_MAX_LEN
 32u

	)

56 
	#CRL_DRBG_AES_MAX_PERS_STR_LEN
 32u

	)

57 
	#CRL_DRBG_AES_MAX_ADD_INPUT_LEN
 
CRL_DRBG_AES_MAX_PERS_STR_LEN


	)

58 
	#CRL_DRBG_AES_MAX_NONCE_LEN
 16u

	)

59 
	#CRL_DRBG_AES_REQS_BTW_RESEEDS
 0xFFFFFFFF

	)

60 
	#CRL_DRBG_AES128_STATE_SIZE
 36u

	)

65 
öt32_t
 
¸l_DRBG_AES128_In°™tüã
(
uöt8_t
 *
P_pSèã
,

66 c⁄° 
uöt8_t
 *
P_pE¡r›yI≈ut
,

67 
öt32_t
 
P_íå›ySize
,

68 c⁄° 
uöt8_t
 *
P_pN⁄˚
,

69 
öt32_t
 
P_n⁄˚Size
,

70 c⁄° 
uöt8_t
 *
P_pPîsSå
,

71 
öt32_t
 
P_≥rsSåSize
);

74 
öt32_t
 
¸l_DRBG_AES128_Gíî©e
(
uöt8_t
 *
P_pSèã
,

75 
uöt8_t
 *
P_pOuçut
,

76 c⁄° 
uöt8_t
 *
P_pAddI≈ut
,

77 
öt32_t
 
P_addI≈utSize
,

78 
öt32_t
 
P_nByãs
);

80 
öt32_t
 
¸l_DRBG_AES128_Re£ed
(
uöt8_t
 *
P_pSèã
,

81 c⁄° 
uöt8_t
 *
P_pE¡r›yI≈ut
,

82 
öt32_t
 
P_íå›ySize
,

83 c⁄° 
uöt8_t
 *
P_pAddI≈ut
,

84 
öt32_t
 
P_addI≈utSize
);

89 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/RNG/rng.h

104 #i‚de‡
__CRL_RNG_H__


105 
	#__CRL_RNG_H__


	)

107 #ifde‡
__˝lu•lus


112 
	~"DRBG_AES128/drbg.h
"

119 
	#C_DRBG_AES128
 0

	)

121 
	#C_HW_RNG
 1

	)

128 
uöt8_t
 
mRNG°©e
[
CRL_DRBG_AES128_STATE_SIZE
];

130 
öt32_t
 
mDRBGty≥
;

132 
uöt32_t
 
mFœg
;

133 } 
	tRNG°©e_°t
;

142 
uöt8_t
* 
pmE¡r›yD©a
;

144 
öt32_t
 
mE¡r›yD©aSize
;

146 
uöt8_t
* 
pmN⁄˚
;

148 
öt32_t
 
mN⁄˚Size
;

150 
uöt8_t
* 
pmPîsD©a
;

152 
öt32_t
 
mPîsD©aSize
;

153 } 
	tRNGöôI≈ut_°t
;

162 
uöt8_t
* 
pmE¡r›yD©a
;

164 
öt32_t
 
mE¡r›yD©aSize
;

166 
uöt8_t
* 
pmAddI≈ut
;

168 
öt32_t
 
mAddI≈utSize
;

169 } 
	tRNGªI≈ut_°t
;

176 
uöt8_t
* 
pmAddI≈ut
;

178 
öt32_t
 
mAddI≈utSize
;

179 } 
	tRNGaddI≈ut_°t
;

184 
öt32_t
 
RNGª£ed
(c⁄° 
RNGªI≈ut_°t
 *
P_pI≈utD©a
,

185 
RNG°©e_°t
 *
P_pR™domSèã
);

188 
öt32_t
 
RNGöô
(c⁄° 
RNGöôI≈ut_°t
 *
P_pI≈utD©a
,

189 
öt32_t
 
P_DRBGty≥
,

190 
RNG°©e_°t
 *
P_pR™domSèã
);

192 
öt32_t
 
RNG‰ì
–
RNG°©e_°t
 *
P_pR™domSèã
 );

195 
öt32_t
 
RNGgíByãs
(
RNG°©e_°t
 *
P_pR™domSèã
,

196 c⁄° 
RNGaddI≈ut_°t
 *
P_pAddI≈ut
,

197 
uöt8_t
 *
P_pOuçut
,

198 
öt32_t
 
P_OutLí
);

201 
öt32_t
 
RNGgíW‹ds
(
RNG°©e_°t
 *
P_pR™domSèã
,

202 c⁄° 
RNGaddI≈ut_°t
 *
P_pAddI≈ut
,

203 
uöt32_t
 *
P_pW‹dBuf
,

204 
öt32_t
 
P_BufSize
);

206 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/RSA/rsa.h

99 #i‚de‡
__CRL_RSA_H__


100 
	#__CRL_RSA_H__


	)

102 #ifde‡
__˝lu•lus


117 
uöt8_t
 *
pmModulus
;

118 
öt32_t
 
mModulusSize
;

119 
uöt8_t
 *
pmExp⁄ít
;

120 
öt32_t
 
mExp⁄ítSize
;

121 } 
	tRSApubKey_°t
;

128 
uöt8_t
 *
pmModulus
;

129 
öt32_t
 
mModulusSize
;

130 
uöt8_t
 *
pmExp⁄ít
;

131 
öt32_t
 
mExp⁄ítSize
;

132 } 
	tRSA¥ivKey_°t
;

134 
öt32_t
 
RSA_PKCS1v15_Sign
(c⁄° 
RSA¥ivKey_°t
 *
P_pPrivKey
, c⁄° 
uöt8_t
 *
P_pDige°
, 
hashTy≥_ë
 
P_hashTy≥
, uöt8_à*
P_pSig«tuª
, 
membuf_°t
 *
P_pMemBuf
);

136 
öt32_t
 
RSA_PKCS1v15_Vîify
(c⁄° 
RSApubKey_°t
 *
P_pPubKey
, c⁄° 
uöt8_t
 *
P_pDige°
, 
hashTy≥_ë
 
P_hashTy≥
, c⁄° uöt8_à*
P_pSig«tuª
, 
membuf_°t
 *
P_pMemBuf
);

142 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/RSA/rsa_low_level.h

28 #i‚de‡
__CRL_RSA_LOW_LEVEL_H__


29 
	#__CRL_RSA_LOW_LEVEL_H__


	)

31 #ifde‡
__˝lu•lus


41 
	#RSAEP
(
P_pPubKey
, 
P_pI≈ut
, 
P_pOuçut
, 
P_pMemBuf
Ë
	`RSAVP1
((P_pPubKey),(P_pI≈ut),(P_pOuçut), (P_pMemBuf)Ë

	)

42 
	#RSADP
(
P_pPrivKey
, 
P_pI≈ut
, 
P_pOuçut
, 
P_pMemBuf
Ë
	`RSASP1
((P_pPrivKey),(P_pI≈ut),(P_pOuçut), (P_pMemBuf)Ë

	)

45 
öt32_t
 
RSASP1
(c⁄° 
RSA¥ivKey_°t
 *
P_pPrivKey
, c⁄° 
uöt8_t
 * 
P_pEM
, uöt8_à*
P_pOuçut
, 
membuf_°t
 *
P_pMemBuf
);

46 
öt32_t
 
RSAVP1
(c⁄° 
RSApubKey_°t
 *
P_pPubKey
, c⁄° 
uöt8_t
 * 
P_pSig«tuª
, uöt8_à*
P_pOuçut
, 
membuf_°t
 *
P_pMemBuf
);

52 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/TDES/CBC/tdes_cbc.h

79 #i‚de‡
__CRL_TDES_CBC_H__


80 
	#__CRL_TDES_CBC_H__


	)

83 #ifde‡
__˝lu•lus


90 #ifde‡
INCLUDE_ENCRYPTION


92 
öt32_t
 
TDES_CBC_En¸y±_Inô
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

95 
öt32_t
 
TDES_CBC_En¸y±_Aµíd
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
,

96 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

97 
öt32_t
 
P_öputSize
,

98 
uöt8_t
 *
P_pOuçutBuf„r
,

99 
öt32_t
 *
P_pOuçutSize
);

102 
öt32_t
 
TDES_CBC_En¸y±_Föish
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
,

103 
uöt8_t
 *
P_pOuçutBuf„r
,

104 
öt32_t
 *
P_pOuçutSize
);

106 #ifde‡
INCLUDE_DECRYPTION


108 
öt32_t
 
TDES_CBC_De¸y±_Inô
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

111 
öt32_t
 
TDES_CBC_De¸y±_Aµíd
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
,

112 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

113 
öt32_t
 
P_öputSize
,

114 
uöt8_t
 *
P_pOuçutBuf„r
,

115 
öt32_t
 *
P_pOuçutSize
);

118 
öt32_t
 
TDES_CBC_De¸y±_Föish
 (
TDESCBC˘x_°t
 *
P_pTDESCBC˘x
,

119 
uöt8_t
 *
P_pOuçutBuf„r
,

120 
öt32_t
 *
P_pOuçutSize
);

126 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/TDES/Common/tdes_common.h

26 #i‚de‡
__TDES_COMMON_H__


27 
	#__TDES_COMMON_H__


	)

30 #ifde‡
__˝lu•lus


40 
	#CRL_TDES_BLOCK
 8

	)

41 
	#CRL_TDES_KEY
 24

	)

45 
uöt32_t
 
mC⁄ãxtId
;

46 
SKÊags_ë
 
mFœgs
;

47 c⁄° 
uöt8_t
 *
pmKey
;

48 c⁄° 
uöt8_t
 *
pmIv
;

49 
öt32_t
 
mIvSize
;

50 
uöt32_t
 
amIv
[2];

51 
uöt32_t
 
amExpKey
[96];

52 } 
	tTDESCBC˘x_°t
;

58 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/TDES/ECB/tdes_ecb.h

76 #i‚de‡
__CRL_TDES_ECB_H__


77 
	#__CRL_TDES_ECB_H__


	)

79 #ifde‡
__˝lu•lus


87 
TDESCBC˘x_°t
 
	tTDESECB˘x_°t
;

90 
öt32_t
 
TDES_ECB_En¸y±_Inô
(
TDESECB˘x_°t
 *
P_pTDESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

93 
öt32_t
 
TDES_ECB_En¸y±_Aµíd
 (
TDESECB˘x_°t
 *
P_pTDESECB˘x
,

94 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

95 
öt32_t
 
P_öputSize
,

96 
uöt8_t
 *
P_pOuçutBuf„r
,

97 
öt32_t
 *
P_pOuçutSize
);

100 
öt32_t
 
TDES_ECB_En¸y±_Föish
 (
TDESECB˘x_°t
 *
P_pTDESECB˘x
,

101 
uöt8_t
 *
P_pOuçutBuf„r
,

102 
öt32_t
 *
P_pOuçutSize
);

104 #ifde‡
INCLUDE_DECRYPTION


106 
öt32_t
 
TDES_ECB_De¸y±_Inô
 (
TDESECB˘x_°t
 *
P_pTDESECB˘x
, c⁄° 
uöt8_t
 *
P_pKey
, c⁄° uöt8_à*
P_pIv
);

109 
öt32_t
 
TDES_ECB_De¸y±_Aµíd
 (
TDESECB˘x_°t
 *
P_pTDESECB˘x
,

110 c⁄° 
uöt8_t
 *
P_pI≈utBuf„r
,

111 
öt32_t
 
P_öputSize
,

112 
uöt8_t
 *
P_pOuçutBuf„r
,

113 
öt32_t
 *
P_pOuçutSize
);

116 
öt32_t
 
TDES_ECB_De¸y±_Föish
 (
TDESECB˘x_°t
 *
P_pTDESECB˘x
,

117 
uöt8_t
 *
P_pOuçutBuf„r
,

118 
öt32_t
 *
P_pOuçutSize
);

124 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/inc/TDES/tdes.h

27 
	~"Comm⁄/tdes_comm⁄.h
"

29 #ifde‡
INCLUDE_ECB


30 
	~"ECB/tdes_ecb.h
"

33 #ifde‡
INCLUDE_CBC


34 
	~"CBC/tdes_cbc.h
"

	@code/Libararies/Cryptographic/inc/config.h

32 #i‚de‡
__CRL_CONFIG_H__


33 
	#__CRL_CONFIG_H__


	)

83 
	#CRL_ENDIANNESS
 1

	)

97 
	#CRL_CPU_SUPPORT_MISALIGNED


	)

106 
	#INCLUDE_ENCRYPTION


	)

107 
	#INCLUDE_DECRYPTION


	)

117 
	#INCLUDE_DES


	)

118 
	#INCLUDE_TDES


	)

119 
	#INCLUDE_AES128


	)

120 
	#INCLUDE_AES192


	)

121 
	#INCLUDE_AES256


	)

122 
	#INCLUDE_ARC4


	)

133 
	#INCLUDE_ECB


	)

134 
	#INCLUDE_CBC


	)

135 
	#INCLUDE_CTR


	)

136 
	#INCLUDE_GCM


	)

137 
	#INCLUDE_KEY_WRAP


	)

138 
	#INCLUDE_CCM


	)

139 
	#INCLUDE_CMAC


	)

149 
	#INCLUDE_RSA


	)

150 
	#INCLUDE_ECC


	)

160 
	#INCLUDE_MD5


	)

161 
	#INCLUDE_SHA1


	)

162 
	#INCLUDE_SHA224


	)

163 
	#INCLUDE_SHA256


	)

164 
	#INCLUDE_HMAC


	)

173 
	#INCLUDE_DRBG_AES128


	)

174 
	#CRL_RANDOM_REQUIRE_RESEED


	)

194 
	#CRL_AES_ALGORITHM
 2

	)

206 
	#RSA_WINDOW_SIZE
 4

	)

227 
	#CRL_GFMUL
 2

	)

	@code/Libararies/Cryptographic/inc/crypto.h

29 
	~"c⁄fig.h
"

34 #ifde‡
INCLUDE_DRBG_AES128


35 
	#INCLUDE_AES128


	)

36 
	#INCLUDE_ENCRYPTION


	)

39 #i‡
deföed
(
INCLUDE_AES128
Ë|| deföed(
INCLUDE_AES192
Ë|| deföed(
INCLUDE_AES256
)

40 
	#INCLUDE_AES


	)

43 #i‡
deföed
(
INCLUDE_DES
Ë|| deföed(
INCLUDE_TDES
)

44 
	#INCLUDE_DES_CORE


	)

47 #i‡
deföed
(
INCLUDE_RSA
Ë|| deföed (
INCLUDE_ECC
)

48 
	#INCLUDE_MATH


	)

51 #i‡
deföed
(
INCLUDE_SHA1
Ë|| deföed(
INCLUDE_SHA224
Ë|| deföed(
INCLUDE_SHA256
Ë|| deföed(
INCLUDE_MD5
)

52 
	#INCLUDE_HASH


	)

59 #i‡(
deföed
(
INCLUDE_ENCRYPTION
Ë|| deföed(
INCLUDE_DECRYPTION
)Ë&& !(deföed(
INCLUDE_AES
Ë|| deföed(
INCLUDE_DES_CORE
Ë|| deföed(
INCLUDE_ARC4
))

61 #ñi‡(!
deföed
(
INCLUDE_ENCRYPTION
Ë&& !deföed(
INCLUDE_DECRYPTION
)Ë&& (deföed(
INCLUDE_AES
Ë|| deföed(
INCLUDE_DES_CORE
))

65 #ifde‡
CRL_CPU_SUPPORT_MISALIGNED


66 #i‚de‡
CRL_ENDIANNESS


71 #i‡
deföed
(
INCLUDE_GCM
Ë&& !deföed(
INCLUDE_AES
)

75 #i‡
deföed
(
INCLUDE_CMAC
Ë&& !deföed(
INCLUDE_AES
)

79 #i‡
deföed
(
INCLUDE_KEY_WRAP
Ë&& !deföed(
INCLUDE_AES
)

83 #i‡
deföed
(
INCLUDE_CTR
Ë&& !deföed(
INCLUDE_AES
)

87 #i‡
deföed
(
INCLUDE_CCM
Ë&& !deföed(
INCLUDE_AES
)

91 #i‡
deföed
(
INCLUDE_DRBG_AES128
Ë&& !deföed(
INCLUDE_AES128
)

95 #i‡
deföed
(
INCLUDE_ECC_SIGN
Ë& !(deföed(
STM32F21X
Ë|| deföed(
INCLUDE_DRBG_AES128
))

99 #i‡
deföed
(
INCLUDE_RSA
Ë&& !deföed(
RSA_WINDOW_SIZE
)

100 
	#RSA_WINDOW_SIZE
 1

	)

108 #i‡
deföed
 (
STM32F0XX
)

109 
	#CL_ON_STM32


	)

110 
	~"°m32f0xx.h
"

111 
	~"°m32f0xx_rcc.h
"

115 #i‡
deföed
 (
STM32F10X_LD
Ë|| deföed (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_XL
Ë|| deföed (
STM32F10X_CL
)

116 
	#CL_ON_STM32


	)

117 
	~"°m32f10x.h
"

121 #i‡
deföed
 (
STM32F2XX
)

122 
	#CL_ON_STM32


	)

123 
	~"°m32f2xx.h
"

124 
	~"°m32f2xx_rcc.h
"

125 
	~"°m32f2xx_∫g.h
"

126 
	#USE_HW_RNG


	)

130 #i‡
deföed
 (
STM32F30X
)

131 
	#CL_ON_STM32


	)

132 
	~"°m32f30x.h
"

133 
	~"°m32f30x_rcc.h
"

137 #i‡
deföed
 (
STM32F37X
)

138 
	#CL_ON_STM32


	)

139 
	~"°m32f37x.h
"

140 
	~"°m32f37x_rcc.h
"

144 #i‡
deföed
 (
STM32F4XX
Ë|| deföed (
STM32F427X
Ë|| deföed(
STM32F429X
)

145 
	#CL_ON_STM32


	)

146 
	~"°m32f4xx.h
"

147 
	~"°m32f4xx_rcc.h
"

148 
	~"°m32f4xx_∫g.h
"

149 
	#USE_HW_RNG


	)

153 #i‡
deföed
 (
STM32F40XX
)

154 
	#CL_ON_STM32


	)

155 
	~"°m32f4xx.h
"

156 
	~"°m32f4xx_rcc.h
"

160 #i‡
deföed
 (
STM32L1XX_MD
Ë|| deföed (
STM32L1XX_MDP
Ë|| deföed (
STM32L1XX_HD
)

161 
	#CL_ON_STM32


	)

162 
	~"°m32l1xx.h
"

163 
	~"°m32l1xx_rcc.h
"

170 #ifde‡
STM32F21X


171 
	~"°m32f2xx.h
"

172 
	~"°m32f2xx_rcc.h
"

173 
	~"°m32f2xx_¸yp.h
"

174 
	~"°m32f2xx_dma.h
"

175 
	~"°m32f2xx_hash.h
"

176 
	~"°m32f2xx_∫g.h
"

177 
	#USE_HW_AES_128


	)

178 
	#USE_HW_AES_192


	)

179 
	#USE_HW_AES_256


	)

180 
	#USE_HW_DES


	)

181 
	#USE_HW_MD5


	)

182 
	#USE_HW_SHA1


	)

183 
	#USE_HW_RNG


	)

184 
	#CL_ON_STM32


	)

187 #i‡
deföed
(
STM32F41X
Ë|| deföed(
STM32F43X
)

188 
	~"°m32f4xx.h
"

189 
	~"°m32f4xx_rcc.h
"

190 
	~"°m32f4xx_¸yp.h
"

191 
	~"°m32f4xx_dma.h
"

192 
	~"°m32f4xx_hash.h
"

193 
	~"°m32f4xx_∫g.h
"

194 
	#USE_HW_AES_128


	)

195 
	#USE_HW_AES_192


	)

196 
	#USE_HW_AES_256


	)

197 
	#USE_HW_DES


	)

198 
	#USE_HW_MD5


	)

199 
	#USE_HW_SHA1


	)

200 
	#USE_HW_RNG


	)

201 
	#CL_ON_STM32


	)

208 #i‡
deföed
(
USE_HW_AES_128
Ë|| deföed(
USE_HW_AES_192
Ë|| deföed(
USE_HW_AES_256
)

209 
	#USE_HW_AES


	)

213 #i‡
deföed
(
USE_HW_AES_128
Ë&& deföed(
USE_HW_AES_192
Ë&& deföed(
USE_HW_AES_256
)

214 
	#USE_HW_AES_XXX


	)

217 
	#USE_SW_AES


	)

220 #i‚de‡
USE_HW_DES


221 
	#USE_SW_DES


	)

224 #i‚de‡
USE_HW_MD5


225 
	#USE_SW_MD5


	)

228 #i‚de‡
USE_HW_SHA1


229 
	#USE_SW_SHA1


	)

233 #i‡
deföed
(
USE_SW_AES
Ë&& deföed(
USE_HW_AES
)

234 
	#USE_HW_AES_ONLY_128


	)

238 #i‡
deföed
(
INCLUDE_DRBG_AES128
Ë|| deföed(
USE_HW_RNG
)

239 
	#INCLUDE_RNG


	)

245 
	~<°dlib.h
>

246 
	~"Comm⁄/ty≥s.h
"

247 
	~"Comm⁄/ma¸os.h
"

248 
	~"Comm⁄/îr_codes.h
"

249 
	~"Comm⁄/sk.h
"

251 #ifde‡
INCLUDE_AES


252 
	~"AES/´s.h
"

255 #ifde‡
INCLUDE_DES


256 
	~"DES/des.h
"

259 #ifde‡
INCLUDE_TDES


260 
	~"TDES/tdes.h
"

263 #ifde‡
INCLUDE_ARC4


264 
	~"ARC4/¨c4.h
"

267 #ifde‡
INCLUDE_HASH


268 
	~"HASH/hash.h
"

271 #ifde‡
INCLUDE_MATH


272 
	~"MATH/m©h.h
"

275 #ifde‡
INCLUDE_RSA


276 
	~"RSA/rß.h
"

277 
	~"RSA/rß_low_Àvñ.h
"

280 #ifde‡
INCLUDE_RNG


281 
	~"RNG/∫g.h
"

284 #ifde‡
INCLUDE_ECC


285 
	~"ECC/ecc.h
"

288 
Cry±o_DeInô
();

	@code/Libararies/Cryptographic/inc/stm32_crypto_version.h

28 #i‚de‡
__STM32_CRYPTO_VERSION_H_


29 
	#__STM32_CRYPTO_VERSION_H_


	)

31 #ifde‡
__˝lu•lus


36 
	~"c⁄fig.h
"

37 
	~<°döt.h
>

52 
uöt8_t
 
X
;

53 
uöt8_t
 
Y
;

54 
uöt8_t
 
Z
;

55 
uöt8_t
 
T
[2];

56 
uöt8_t
 
C‹ãxC⁄f
 ;

57 
uöt8_t
 
Mi¸oC⁄f
 ;

58 
uöt8_t
 
Endü¬essC⁄f
 ;

59 
uöt8_t
 
Mißlig√dC⁄f
 ;

60 
uöt8_t
 
EncDecC⁄f
;

61 
uöt16_t
 
SymKeyC⁄f
 ;

62 
uöt16_t
 
SymKeyModesC⁄f
 ;

63 
uöt16_t
 
AsymKeyC⁄f
 ;

64 
uöt16_t
 
HashC⁄f
 ;

65 
uöt8_t
 
DrbgC⁄f
 ;

66 
uöt8_t
 
AesC⁄f
 ;

67 
uöt8_t
 
RßC⁄f
 ;

68 
uöt8_t
 
GcmC⁄f
 ;

70 }
	tSTM32Cry±oLibVî_Ty≥Def
;

72 
STM32_Cry±oLibøryVîsi⁄
(
STM32Cry±oLibVî_Ty≥Def
 * 
LibVîsi⁄
);

74 #ifde‡
__˝lu•lus


	@code/Libararies/Cryptographic/md5.c

1 
	~<°rög.h
>

2 
	~"md5.h
"

4 
	#MD5_mem˝y
 
mem˝y


	)

5 
	#MD5_mem£t
 
mem£t


	)

7 
	#S11
 7

	)

8 
	#S12
 12

	)

9 
	#S13
 17

	)

10 
	#S14
 22

	)

11 
	#S21
 5

	)

12 
	#S22
 9

	)

13 
	#S23
 14

	)

14 
	#S24
 20

	)

15 
	#S31
 4

	)

16 
	#S32
 11

	)

17 
	#S33
 16

	)

18 
	#S34
 23

	)

19 
	#S41
 6

	)

20 
	#S42
 10

	)

21 
	#S43
 15

	)

22 
	#S44
 21

	)

24 c⁄° 
uöt8_t
 
	gPADDING
[64] = {

32 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

33 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

34 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

35 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

39 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

46 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
Ë{ \

	)

47 (
	ga
Ë+
F
 ((
b
), (
c
), (
d
)Ë+ (
	gx
Ë+ (
	guöt32_t
)(
	gac
); \

48 (
	ga
Ë
ROTATE_LEFT
 ((
a
), (
s
)); \

49 (
	ga
Ë+(
b
); \

51 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
Ë{ \

	)

52 (
	ga
Ë+
G
 ((
b
), (
c
), (
d
)Ë+ (
	gx
Ë+ (
	guöt32_t
)(
	gac
); \

53 (
	ga
Ë
ROTATE_LEFT
 ((
a
), (
s
)); \

54 (
	ga
Ë+(
b
); \

56 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
Ë{ \

	)

57 (
	ga
Ë+
H
 ((
b
), (
c
), (
d
)Ë+ (
	gx
Ë+ (
	guöt32_t
)(
	gac
); \

58 (
	ga
Ë
ROTATE_LEFT
 ((
a
), (
s
)); \

59 (
	ga
Ë+(
b
); \

61 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
Ë{ \

	)

62 (
	ga
Ë+
I
 ((
b
), (
c
), (
d
)Ë+ (
	gx
Ë+ (
	guöt32_t
)(
	gac
); \

63 (
	ga
Ë
ROTATE_LEFT
 ((
a
), (
s
)); \

64 (
	ga
Ë+(
b
); \

69 
	$Encode
 (
uöt8_t
 *
ouçut
, c⁄° 
uöt32_t
 *
öput
, 
uöt16_t
 
Àn
 )

71 
uöt16_t
 
i
, 
j
;

73 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

75 
ouçut
[
j
] = (
uöt8_t
)(
öput
[
i
] & 0xff);

76 *(
ouçut
+
j
+1Ë(
uöt8_t
)((
öput
[
i
] >> 8) & 0xff);

77 *(
ouçut
+
j
+2Ë(
uöt8_t
)((
öput
[
i
] >> 16) & 0xff);

78 *(
ouçut
+
j
+3Ë(
uöt8_t
)((
öput
[
i
] >> 24) & 0xff);

80 
	}
}

84 
	$Decode
 (
uöt32_t
 *
ouçut
, c⁄° 
uöt8_t
 *
öput
, 
uöt16_t
 
Àn
 )

86 
uöt16_t
 
i
, 
j
;

88 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

89 
ouçut
[
i
] = ((
uöt32_t
)
öput
[
j
]) | (((uint32_t)*(input + j + 1)) << 8) | (((uint32_t)*(input + j + 2)) << 16) | (((uint32_t)*(input + j + 3)) << 24);

90 
	}
}

115 
	$MD5Tønsf‹m
 (
uöt32_t
 
°©e
[4], c⁄° 
uöt8_t
 
block
[64])

117 
uöt32_t
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

119 
	`Decode
 (
x
, 
block
, 64);

122 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

123 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

124 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

125 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

126 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

127 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

128 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

129 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

130 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

131 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

132 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

133 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

134 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

135 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

136 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

137 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

140 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

141 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

142 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

143 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

144 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

145 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

146 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

147 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

148 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

149 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

150 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

151 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

152 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

153 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

154 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

155 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

158 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

159 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

160 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

161 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

162 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

163 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

164 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

165 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

166 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

167 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

168 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

169 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

170 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

171 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

172 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

173 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

176 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

177 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

178 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

179 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

180 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

181 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

182 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

183 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

184 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

185 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

186 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

187 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

188 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

189 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

190 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

191 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

193 
°©e
[0] +
a
;

194 
°©e
[1] +
b
;

195 
°©e
[2] +
c
;

196 
°©e
[3] +
d
;

199 
	`MD5_mem£t
 ((*)
x
, 0,  (x));

200 
	}
}

202 
	$MD5Inô
 (
MD5_CTX
 *
c⁄ãxt
)

204 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

207 
c⁄ãxt
->
°©e
[0] = 0x67452301;

208 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

209 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

210 
c⁄ãxt
->
°©e
[3] = 0x10325476;

211 
	}
}

217 
	$MD5Upd©e
 ( 
MD5_CTX
 *
c⁄ãxt
, c⁄° 
uöt8_t
 *
öput
, 
uöt32_t
 
öputLí
 )

219 
uöt16_t
 
i
, 
ödex
, 
∑πLí
;

222 
ödex
 = (
uöt16_t
)((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

225 i‡((
c⁄ãxt
->
cou¡
[0] +(
öputLí
 << 3)) < (inputLen << 3))

226 
c⁄ãxt
->
cou¡
[1]++;

228 
c⁄ãxt
->
cou¡
[1] +(
öputLí
 >> 29);

230 
∑πLí
 = 64 - 
ödex
;

234 i‡(
öputLí
 >
∑πLí
)

236 
	`MD5_mem˝y
(&
c⁄ãxt
->
buf„r
[
ödex
], (*)
öput
, ()
∑πLí
);

237 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

239 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

240 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, &
öput
[
i
]);

242 
ödex
 = 0;

245 
i
 = 0;

248 
	`MD5_mem˝y
(&
c⁄ãxt
->
buf„r
[
ödex
], (*)&
öput
[
i
],()(
öputLí
-i));

249 
	}
}

253 
	$MD5FöÆ
 ( 
uöt8_t
 
dige°
[16], 
MD5_CTX
 *
c⁄ãxt
 )

255 
uöt8_t
 
bôs
[8];

256 
uöt16_t
 
ödex
, 
∑dLí
;

259 
	`Encode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

263 
ödex
 = (
uöt16_t
)((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

264 
∑dLí
 = (
ödex
 < 56) ? (56 - index) : (120 - index);

265 
	`MD5Upd©e
 (
c⁄ãxt
, 
PADDING
, (
uöt32_t
)
∑dLí
);

268 
	`MD5Upd©e
 (
c⁄ãxt
, 
bôs
, 8L);

271 
	`Encode
 (
dige°
, 
c⁄ãxt
->
°©e
, 16);

274 
	`MD5_mem£t
 ((*)
c⁄ãxt
, 0,  (*context));

275 
	}
}

	@code/Libararies/Cryptographic/md5.h

1 #i‚de‡
MD5_INCLUDED


2 
	#MD5_INCLUDED


	)

4 
	~"°m32f10x.h
"

8 
uöt32_t
 
	m°©e
[4];

9 
uöt32_t
 
	mcou¡
[2];

10 
uöt8_t
 
	mbuf„r
[64];

11 } 
	tMD5_CTX
;

13 
MD5Inô
 (
MD5_CTX
 *);

14 
MD5Upd©e
 (
MD5_CTX
 *, c⁄° 
uöt8_t
 *, 
uöt32_t
);

15 
MD5FöÆ
 (
uöt8_t
 [16], 
MD5_CTX
 *);

	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt8_t
 
NVIC_IRQCh™√l
;

56 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

64 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

67 } 
	tNVIC_InôTy≥Def
;

114 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

115 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

116 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

117 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

126 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

127 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

128 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

129 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

130 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

140 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

142 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

144 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

146 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

148 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

151 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

152 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

157 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

159 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

161 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

171 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

172 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

173 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

174 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

195 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

196 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

197 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

198 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

199 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

201 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
ADC_Mode
;

55 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

59 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

63 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

67 
uöt32_t
 
ADC_D©aAlign
;

70 
uöt8_t
 
ADC_NbrOfCh™√l
;

73 }
	tADC_InôTy≥Def
;

82 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

83 ((
PERIPH
Ë=
ADC2
) || \

84 ((
PERIPH
Ë=
ADC3
))

86 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

87 ((
PERIPH
Ë=
ADC3
))

93 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

94 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

95 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

96 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

97 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

98 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

99 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

100 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

101 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

102 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

104 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

105 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

106 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

107 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

110 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

112 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

122 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

132 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

139 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

161 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

162 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

163 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

164 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

173 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

174 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

175 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

176 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

177 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

178 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

179 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

180 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

181 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

182 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

183 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

184 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

185 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

186 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

187 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

188 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

189 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

190 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

192 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

193 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

195 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

196 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

212 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

213 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

214 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

215 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

216 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

217 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

218 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

219 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

220 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

221 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

236 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

242 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

246 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

252 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

253 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

273 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

274 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

275 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

276 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

277 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

278 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

289 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

290 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

291 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

292 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

293 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

294 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

295 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

297 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

298 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

312 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

313 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

314 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

316 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

318 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

319 ((
IT
Ë=
ADC_IT_JEOC
))

328 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

329 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

330 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

331 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

332 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

333 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

334 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

335 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

336 ((
FLAG
Ë=
ADC_FLAG_STRT
))

345 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

355 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

365 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

375 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

386 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

395 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

405 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

427 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

428 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

429 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

434 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

435 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

436 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

437 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

439 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

440 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

441 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

442 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

444 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

445 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

451 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

452 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

453 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

454 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

455 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

456 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

457 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

458 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

460 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

462 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

464 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

58 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

59 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

60 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

69 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

70 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

71 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

72 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

73 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

74 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

85 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

86 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

87 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

88 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

89 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

90 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

91 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

92 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

93 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

94 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

95 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

96 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

97 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

98 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

99 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

100 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

101 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

102 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

103 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

104 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

105 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

106 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

107 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

108 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

109 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

110 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

111 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

112 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

113 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

114 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

115 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

116 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

117 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

118 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

119 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

120 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

121 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

122 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

123 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

124 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

125 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

126 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

128 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

129 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

130 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

131 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

132 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

133 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

134 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

135 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

136 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

137 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

138 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

139 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

140 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

141 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

143 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

164 
BKP_DeInô
();

165 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

166 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

167 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

169 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

170 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

171 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

172 
FœgSètus
 
BKP_GëFœgSètus
();

173 
BKP_CÀ¨Fœg
();

174 
ITSètus
 
BKP_GëITSètus
();

175 
BKP_CÀ¨ITPídögBô
();

177 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

46 ((
PERIPH
Ë=
CAN2
))

54 
uöt16_t
 
CAN_PªsˇÀr
;

56 
uöt8_t
 
CAN_Mode
;

59 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

66 
uöt8_t
 
CAN_BS2
;

69 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

72 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

75 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

78 
Fun˘i⁄ÆSèã
 
CAN_NART
;

81 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

84 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

86 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

133 
uöt32_t
 
StdId
;

136 
uöt32_t
 
ExtId
;

139 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

145 
uöt8_t
 
DLC
;

148 
uöt8_t
 
D©a
[8];

149 } 
	tC™TxMsg
;

157 
uöt32_t
 
StdId
;

160 
uöt32_t
 
ExtId
;

163 
uöt8_t
 
IDE
;

166 
uöt8_t
 
RTR
;

169 
uöt8_t
 
DLC
;

172 
uöt8_t
 
D©a
[8];

174 
uöt8_t
 
FMI
;

176 } 
	tC™RxMsg
;

190 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

191 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

201 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

202 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

203 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

204 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

206 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

207 ((
MODE
Ë=
CAN_Mode_Sûít
Ë|| ((MODEË=
CAN_Mode_Sûít_Lo›Back
))

216 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

217 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

218 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

219 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

221 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

222 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

231 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

232 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

233 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

234 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

235 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

236 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

237 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

238 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

239 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

240 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

241 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

242 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

243 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

244 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

245 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

246 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

248 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

257 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

258 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

259 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

260 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

261 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

262 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

263 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

264 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

266 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

276 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

285 #i‚de‡
STM32F10X_CL


286 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

288 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

298 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

301 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

302 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

311 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

314 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

315 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

325 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

327 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

328 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

337 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

346 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

347 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

348 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

349 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

359 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

360 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

361 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

371 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

372 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

373 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

383 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

384 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

385 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

386 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

396 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

397 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

399 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

409 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

410 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

420 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

421 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

431 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

432 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

433 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

435 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

436 ((
FLAG
Ë=
CAN_FLAG_BOF
))

446 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

447 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

448 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

449 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

450 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

451 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

452 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

453 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

454 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

455 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

456 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

457 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

458 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

459 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

460 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

461 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

462 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

464 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

465 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

466 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

467 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

468 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

469 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

470 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

472 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

473 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

474 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

475 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

476 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

477 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

498 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

499 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

500 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

501 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

502 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

503 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

505 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

506 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

507 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

508 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

509 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

510 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

512 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

513 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

514 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

515 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

516 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

518 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h

23 #i‚de‡
__STM32F10x_CEC_H


24 
	#__STM32F10x_CEC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
CEC_BôTimögMode
;

53 
uöt16_t
 
CEC_BôPîiodMode
;

55 }
	tCEC_InôTy≥Def
;

68 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

69 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

71 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
Ë|| \

	)

72 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

80 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

81 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

83 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
Ë|| \

	)

84 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

93 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

94 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

95 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

96 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

97 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
Ë|| \

	)

98 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

107 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

115 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

128 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

129 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

130 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

131 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

132 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

133 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

134 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

139 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

140 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

141 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

142 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

143 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

144 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

145 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

147 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

149 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
Ë|| \

	)

150 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

154 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

176 
CEC_DeInô
();

177 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

178 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

181 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

182 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

183 
uöt8_t
 
CEC_Re˚iveD©aByã
();

184 
CEC_SèπOfMesßge
();

185 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

186 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

187 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

188 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

189 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

191 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

69 
CRC_Re£tDR
();

70 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

71 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

72 
uöt32_t
 
CRC_GëCRC
();

73 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

74 
uöt8_t
 
CRC_GëIDRegi°î
();

76 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DAC_Triggî
;

54 
uöt32_t
 
DAC_WaveGíî©i⁄
;

58 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

62 
uöt32_t
 
DAC_OuçutBuf„r
;

64 }
	tDAC_InôTy≥Def
;

78 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

83 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

85 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

86 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

87 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

89 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

90 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

91 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

92 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

94 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

95 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

112 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

113 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

114 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

115 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

126 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

127 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

128 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

129 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

130 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

131 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

132 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

133 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

134 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

135 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

136 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

137 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

151 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

183 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

184 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

185 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

186 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

195 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

196 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

197 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

198 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

207 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

208 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

209 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

210 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

211 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

212 ((
ALIGN
Ë=
DAC_Align_8b_R
))

221 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

222 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

223 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

224 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

233 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

237 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

242 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

243 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

253 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

254 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

277 
DAC_DeInô
();

278 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

279 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

281 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

282 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

289 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

291 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

292 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

293 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

294 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

296 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

299 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

57 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

58 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

59 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

60 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

61 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

62 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

63 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

64 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

65 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

66 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

67 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

68 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

69 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

71 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

72 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

73 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

76 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

77 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

78 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

80 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

97 
uöt32_t
 
DBGMCU_GëREVID
();

98 
uöt32_t
 
DBGMCU_GëDEVID
();

99 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

101 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

53 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

55 
uöt32_t
 
DMA_DIR
;

58 
uöt32_t
 
DMA_Buf„rSize
;

62 
uöt32_t
 
DMA_PîùhîÆInc
;

65 
uöt32_t
 
DMA_Mem‹yInc
;

68 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

71 
uöt32_t
 
DMA_Mem‹yD©aSize
;

74 
uöt32_t
 
DMA_Mode
;

79 
uöt32_t
 
DMA_Pri‹ôy
;

82 
uöt32_t
 
DMA_M2M
;

84 }
	tDMA_InôTy≥Def
;

94 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

95 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

101 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

111 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

112 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

113 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

114 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

123 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

124 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

125 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

126 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

135 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

136 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

137 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

138 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

147 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

148 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

149 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

150 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

151 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

161 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

162 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

163 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

165 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

175 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

176 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

177 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

186 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

187 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

188 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

189 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

190 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

191 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

202 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

203 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

204 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

214 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

215 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

216 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

217 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

219 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

220 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

221 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

222 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

223 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

224 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

225 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

226 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

227 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

228 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

229 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

230 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

231 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

232 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

234 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

235 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

236 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

237 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

238 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

239 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

240 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

241 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

242 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

243 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

244 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

245 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

246 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

248 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

249 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

250 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

251 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

252 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

253 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

254 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

255 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

256 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

257 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

258 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

259 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

260 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

261 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

262 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

263 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

264 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

265 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

266 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

267 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

269 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

271 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

272 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

273 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

274 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

275 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

276 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

277 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

278 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

279 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

280 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

281 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

282 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

283 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

284 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

285 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

286 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

287 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

288 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

289 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

290 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

291 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

292 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

293 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

294 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

303 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

304 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

305 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

306 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

307 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

308 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

309 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

310 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

311 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

312 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

313 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

314 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

315 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

316 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

317 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

318 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

319 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

320 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

321 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

322 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

323 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

324 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

327 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

328 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

329 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

330 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

332 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

333 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

334 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

335 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

336 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

337 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

338 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

339 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

340 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

341 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

342 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

343 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

344 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

345 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

346 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

347 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

348 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

349 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

350 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

351 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

353 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

355 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

356 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

387 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

409 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

410 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

411 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

415 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

416 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

417 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

418 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

420 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
EXTI_Mode_I¡îru±
 = 0x00,

52 
EXTI_Mode_Evít
 = 0x04

53 }
	tEXTIMode_Ty≥Def
;

55 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

63 
EXTI_Triggî_Risög
 = 0x08,

64 
EXTI_Triggî_FÆlög
 = 0x0C,

65 
EXTI_Triggî_Risög_FÆlög
 = 0x10

66 }
	tEXTITriggî_Ty≥Def
;

68 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

69 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

77 
uöt32_t
 
EXTI_Löe
;

80 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

83 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

86 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

88 }
	tEXTI_InôTy≥Def
;

102 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

103 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

104 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

105 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

106 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

107 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

108 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

109 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

110 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

111 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

112 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

113 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

114 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

115 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

116 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

117 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

118 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

119 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

120 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

122 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

124 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

125 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

126 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

127 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

128 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

129 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

130 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

131 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

132 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

133 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

134 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

157 
EXTI_DeInô
();

158 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

159 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

161 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

162 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

163 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

164 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

166 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
FLASH_BUSY
 = 1,

52 
FLASH_ERROR_PG
,

53 
FLASH_ERROR_WRP
,

54 
FLASH_COMPLETE
,

55 
FLASH_TIMEOUT


56 }
	tFLASH_Sètus
;

70 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

71 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

72 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

73 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

74 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

84 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

86 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

87 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

96 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

97 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

98 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

109 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

110 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

111 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

112 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

113 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

114 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

115 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

116 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

119 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

120 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

121 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

122 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

123 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

124 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

125 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

126 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

127 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

128 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

129 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

131 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

132 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

133 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

134 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

135 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

145 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

147 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

149 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

151 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

153 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

155 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

157 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

159 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

161 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

163 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

165 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

167 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

169 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

171 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

173 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

175 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

177 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

179 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

181 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

183 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

185 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

187 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

189 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

191 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

193 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

195 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

197 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

199 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

201 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

203 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

205 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

207 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

211 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

213 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

215 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

217 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

227 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

228 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

229 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

239 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

240 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

241 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

251 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

252 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

253 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

255 #ifde‡
STM32F10X_XL


262 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

264 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

267 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

275 #ifde‡
STM32F10X_XL


276 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

277 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

279 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

280 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

282 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

283 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

284 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

286 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

287 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

288 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

289 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

291 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

301 #ifde‡
STM32F10X_XL


302 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

303 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

304 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

305 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

307 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

308 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

309 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

310 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

312 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

313 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

314 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

315 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

316 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

318 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

319 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

320 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

322 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

327 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

328 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

329 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

330 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

331 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

333 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

334 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

335 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

336 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

338 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

339 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

340 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

367 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

368 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

369 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

370 
FLASH_U∆ock
();

371 
FLASH_Lock
();

372 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

373 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

374 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

375 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

376 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

379 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

380 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

381 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

382 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

383 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

384 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

385 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

387 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_Sètus
 
FLASH_GëSètus
();

389 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

392 
FLASH_U∆ockB™k1
();

393 
FLASH_LockB™k1
();

394 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

395 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

396 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

398 #ifde‡
STM32F10X_XL


400 
FLASH_U∆ockB™k2
();

401 
FLASH_LockB™k2
();

402 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

403 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

404 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

405 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

408 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
FSMC_AddªssSëupTime
;

56 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

61 
uöt32_t
 
FSMC_D©aSëupTime
;

66 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

71 
uöt32_t
 
FSMC_CLKDivisi⁄
;

75 
uöt32_t
 
FSMC_D©aL©ícy
;

83 
uöt32_t
 
FSMC_Ac˚ssMode
;

85 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

93 
uöt32_t
 
FSMC_B™k
;

96 
uöt32_t
 
FSMC_D©aAddªssMux
;

100 
uöt32_t
 
FSMC_Mem‹yTy≥
;

104 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

107 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

111 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

115 
uöt32_t
 
FSMC_WøpMode
;

119 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

124 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

127 
uöt32_t
 
FSMC_WaôSig«l
;

131 
uöt32_t
 
FSMC_ExãndedMode
;

134 
uöt32_t
 
FSMC_WrôeBur°
;

137 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

139 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

140 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

180 
uöt32_t
 
FSMC_B™k
;

183 
uöt32_t
 
FSMC_Waô„©uª
;

186 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

189 
uöt32_t
 
FSMC_ECC
;

192 
uöt32_t
 
FSMC_ECCPageSize
;

194 
uöt32_t
 
FSMC_AddªssLowM≠pög
;

195 
uöt32_t
 
FSMC_TCLRSëupTime
;

199 
uöt32_t
 
FSMC_TARSëupTime
;

203 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

205 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

206 }
	tFSMC_NANDInôTy≥Def
;

214 
uöt32_t
 
FSMC_Waô„©uª
;

217 
uöt32_t
 
FSMC_TCLRSëupTime
;

221 
uöt32_t
 
FSMC_TARSëupTime
;

226 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

228 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

230 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

231 }
	tFSMC_PCCARDInôTy≥Def
;

244 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

245 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

246 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

247 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

255 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

256 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

264 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

269 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

270 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

271 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

272 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

274 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

275 ((
BANK
Ë=
FSMC_B™k3_NAND
))

277 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

278 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

281 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

282 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

293 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

294 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

295 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

296 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

306 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

307 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

308 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

309 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

310 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

311 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

321 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

322 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

323 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

324 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

346 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

347 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

348 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

349 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

359 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

361 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

362 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

385 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

386 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

387 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

388 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

398 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

399 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

400 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

401 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

410 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

411 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

413 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

414 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

436 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

446 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

456 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

466 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

476 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

486 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

496 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

497 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

498 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

499 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

500 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

501 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

502 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

503 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

521 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

522 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

523 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

524 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

535 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

537 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

538 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

547 
	#FSMC_AddªssLowM≠pög_Dúe˘
 ((
u32
)0x00000000)

	)

549 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

550 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

551 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

552 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

553 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

554 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

555 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

556 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

557 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

558 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

559 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

560 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

570 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

580 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

590 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

600 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

610 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

620 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

630 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

631 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

632 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

633 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

634 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

635 ((
IT
Ë=
FSMC_IT_Levñ
) || \

636 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

645 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

646 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

647 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

648 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

649 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

650 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

651 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

652 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

654 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

680 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

681 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

682 
FSMC_PCCARDDeInô
();

683 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

684 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

685 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

686 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

687 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

688 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

689 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

694 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

695 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

696 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

697 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

698 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

700 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

46 ((
PERIPH
Ë=
GPIOB
) || \

47 ((
PERIPH
Ë=
GPIOC
) || \

48 ((
PERIPH
Ë=
GPIOD
) || \

49 ((
PERIPH
Ë=
GPIOE
) || \

50 ((
PERIPH
Ë=
GPIOF
) || \

51 ((
PERIPH
Ë=
GPIOG
))

59 
GPIO_S≥ed_10MHz
 = 1,

60 
GPIO_S≥ed_2MHz
,

61 
GPIO_S≥ed_50MHz


62 }
	tGPIOS≥ed_Ty≥Def
;

63 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

64 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

71 { 
GPIO_Mode_AIN
 = 0x0,

72 
GPIO_Mode_IN_FLOATING
 = 0x04,

73 
GPIO_Mode_IPD
 = 0x28,

74 
GPIO_Mode_IPU
 = 0x48,

75 
GPIO_Mode_Out_OD
 = 0x14,

76 
GPIO_Mode_Out_PP
 = 0x10,

77 
GPIO_Mode_AF_OD
 = 0x1C,

78 
GPIO_Mode_AF_PP
 = 0x18

79 }
	tGPIOMode_Ty≥Def
;

81 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

82 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

83 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

84 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

92 
uöt16_t
 
GPIO_Pö
;

95 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

98 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

100 }
	tGPIO_InôTy≥Def
;

108 { 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

112 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

126 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

127 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

128 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

129 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

130 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

131 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

132 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

133 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

134 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

135 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

136 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

137 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

138 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

139 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

140 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

141 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

142 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

144 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

146 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

147 ((
PIN
Ë=
GPIO_Pö_1
) || \

148 ((
PIN
Ë=
GPIO_Pö_2
) || \

149 ((
PIN
Ë=
GPIO_Pö_3
) || \

150 ((
PIN
Ë=
GPIO_Pö_4
) || \

151 ((
PIN
Ë=
GPIO_Pö_5
) || \

152 ((
PIN
Ë=
GPIO_Pö_6
) || \

153 ((
PIN
Ë=
GPIO_Pö_7
) || \

154 ((
PIN
Ë=
GPIO_Pö_8
) || \

155 ((
PIN
Ë=
GPIO_Pö_9
) || \

156 ((
PIN
Ë=
GPIO_Pö_10
) || \

157 ((
PIN
Ë=
GPIO_Pö_11
) || \

158 ((
PIN
Ë=
GPIO_Pö_12
) || \

159 ((
PIN
Ë=
GPIO_Pö_13
) || \

160 ((
PIN
Ë=
GPIO_Pö_14
) || \

161 ((
PIN
Ë=
GPIO_Pö_15
))

171 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

176 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

177 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

178 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

179 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

180 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

181 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

182 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

183 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

184 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

185 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

186 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

187 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

188 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

189 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

191 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

193 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

194 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

195 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

196 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

197 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

198 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201000Ë

	)

199 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

202 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

204 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

205 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

206 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

207 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

208 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

210 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

211 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

212 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

213 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

214 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

215 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

219 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

220 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

221 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

222 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

223 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

224 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

225 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

226 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

227 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

228 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

229 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
))

248 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

249 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

250 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

251 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

252 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

253 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

254 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

255 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

256 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

257 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

258 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

259 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

261 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

266 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

267 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

277 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

278 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

279 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

280 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

281 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

282 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

283 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

284 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

285 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

286 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

287 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

288 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

289 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

290 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

291 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

292 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

294 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

295 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

296 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

297 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

298 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

299 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

300 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

318 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

319 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

321 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

322 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

343 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

344 
GPIO_AFIODeInô
();

345 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

346 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

347 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

348 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

349 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

350 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

351 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

352 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

353 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

354 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

355 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

357 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

359 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

360 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

362 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
I2C_ClockS≥ed
;

54 
uöt16_t
 
I2C_Mode
;

57 
uöt16_t
 
I2C_DutyCy˛e
;

60 
uöt16_t
 
I2C_OwnAddªss1
;

63 
uöt16_t
 
I2C_Ack
;

66 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

68 }
	tI2C_InôTy≥Def
;

79 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

80 ((
PERIPH
Ë=
I2C2
))

85 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

86 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

87 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

88 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

89 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

99 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

100 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

101 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

102 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

111 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

112 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

113 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

114 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

123 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

124 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

125 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

126 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

135 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

136 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

137 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

138 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

147 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

148 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

149 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

150 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

151 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

152 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

153 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

154 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

155 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

156 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

157 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

173 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

174 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

175 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

176 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

185 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

186 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

187 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

188 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

197 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

198 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

199 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

200 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

209 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

210 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

211 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

212 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

213 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

214 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

215 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

216 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

217 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

218 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

219 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

220 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

221 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

222 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

224 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

226 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

227 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

228 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

229 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

230 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

231 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

232 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

245 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

246 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

247 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

248 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

249 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

250 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

251 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

257 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

258 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

259 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

260 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

261 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

262 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

263 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

264 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

265 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

266 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

267 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

268 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

269 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

270 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

272 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

274 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

275 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

276 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

277 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

278 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

279 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

280 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

281 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

282 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

283 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

284 ((
FLAG
Ë=
I2C_FLAG_SB
))

306 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

334 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

335 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

337 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

370 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

374 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

376 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

411 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

412 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

415 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

416 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

419 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

450 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

452 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

456 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

457 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

459 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

463 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

464 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

465 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

466 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

467 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

468 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

469 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

470 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

471 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

472 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

473 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

474 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

475 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

476 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

481 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

482 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

491 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

500 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

521 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

522 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

523 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

524 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

525 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

526 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

527 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

528 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

531 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

532 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

533 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

534 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

535 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

536 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

537 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

538 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

540 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

542 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

544 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

631 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

637 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

643 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

649 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

650 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

651 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

653 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

58 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

59 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

60 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

91 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

92 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

93 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

94 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

115 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

116 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

117 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

118 
IWDG_RñﬂdCou¡î
();

119 
IWDG_E«bÀ
();

120 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

122 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

58 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

59 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

60 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

61 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

62 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

63 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

64 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

65 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

66 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

77 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

78 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

79 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

80 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

89 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

90 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

91 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

101 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

102 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

103 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

104 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

105 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

107 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

128 
PWR_DeInô
();

129 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

130 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

132 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

133 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

134 
PWR_E¡îSTANDBYMode
();

135 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

136 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

138 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SYSCLK_Fªquícy
;

48 
uöt32_t
 
HCLK_Fªquícy
;

49 
uöt32_t
 
PCLK1_Fªquícy
;

50 
uöt32_t
 
PCLK2_Fªquícy
;

51 
uöt32_t
 
ADCCLK_Fªquícy
;

52 }
	tRCC_ClocksTy≥Def
;

66 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

67 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

68 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

69 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

70 ((
HSE
Ë=
RCC_HSE_By∑ss
))

80 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

82 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_CL
)

83 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

84 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

85 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

86 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

89 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

91 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

101 #i‚de‡
STM32F10X_CL


102 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

104 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

105 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

106 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

107 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

108 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

109 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

110 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

111 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

112 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

113 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

114 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

115 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

116 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

117 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

118 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

119 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

120 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

121 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

122 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

123 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

124 ((
MUL
Ë=
RCC_PLLMul_16
))

127 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

128 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

129 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

130 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

131 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

132 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

133 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

135 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
Ë|| \

	)

136 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

137 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

138 ((
MUL
Ë=
RCC_PLLMul_6_5
))

147 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

148 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

149 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

150 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

151 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

152 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

153 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

154 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

155 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

156 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

157 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

158 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

159 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

160 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

161 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

162 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

163 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

165 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

166 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

182 #ifde‡
STM32F10X_CL


184 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

185 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

187 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
Ë|| \

	)

188 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

189 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

191 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

199 #ifde‡
STM32F10X_CL


204 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

205 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

206 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

207 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

208 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

209 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

210 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

211 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

212 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

213 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

214 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

215 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

216 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

217 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

218 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

219 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

221 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
Ë|| \

	)

222 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

238 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

239 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

240 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

241 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

242 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

243 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

244 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

245 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

246 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

248 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
Ë|| \

	)

249 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_20
))

262 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

263 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

264 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

265 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

266 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

267 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

268 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

269 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

270 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

272 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
Ë|| \

	)

273 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_20
))

288 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

289 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

290 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

291 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

292 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

302 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

303 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

304 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

305 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

306 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

307 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

308 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

309 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

310 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

311 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

312 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

324 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

325 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

326 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

327 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

328 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

329 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

330 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div16
))

340 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

341 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

342 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

343 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

344 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

345 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

347 #i‚de‡
STM32F10X_CL


348 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

349 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

350 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

351 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

352 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

354 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

355 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

356 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

357 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

358 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

359 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

360 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

361 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

369 #i‚de‡
STM32F10X_CL


374 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

375 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

377 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

378 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

386 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

389 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
Ë|| \

	)

390 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

397 #ifde‡
STM32F10X_CL


401 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

402 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

404 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| \

	)

405 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

413 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

414 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

416 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
Ë|| \

	)

417 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

428 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

429 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

430 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

431 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

432 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

433 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

442 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

443 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

444 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

445 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

446 ((
LSE
Ë=
RCC_LSE_By∑ss
))

455 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

456 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

457 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

458 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

459 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

469 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

470 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

471 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

472 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

473 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

475 #i‚de‡
STM32F10X_CL


476 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

477 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

478 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

480 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

481 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

485 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

486 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

496 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

497 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

498 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

499 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

500 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

501 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

502 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

503 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

504 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

505 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

506 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

507 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

508 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

509 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

510 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

511 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

512 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

513 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

514 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

515 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

516 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

518 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

527 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

528 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

529 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

530 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

531 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

532 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

533 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

534 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

535 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

536 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

537 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

538 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

539 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

540 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

541 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

542 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

543 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

544 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

545 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

546 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

547 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

548 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

549 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

550 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

551 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

553 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

563 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

564 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

565 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

566 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

567 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

569 #i‚de‡
STM32F10X_CL


570 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

571 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

572 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

574 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

575 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

576 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

577 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

579 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

580 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

581 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

582 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

594 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

595 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

596 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

597 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

598 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

599 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

600 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

601 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

602 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

603 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

604 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

606 #i‚de‡
STM32F10X_CL


607 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

608 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

610 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

612 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

614 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

615 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

616 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

617 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

620 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

622 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

625 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

646 
RCC_DeInô
();

647 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

648 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

649 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

650 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

651 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

652 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

654 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

655 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

658 #ifde‡ 
STM32F10X_CL


659 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

660 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

661 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

662 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

663 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

666 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

667 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

668 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

669 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

670 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

673 #i‚de‡
STM32F10X_CL


674 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

676 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

679 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

681 #ifde‡
STM32F10X_CL


682 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

683 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

686 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

687 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

688 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

689 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

691 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

695 #ifde‡
STM32F10X_CL


696 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

699 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

704 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

705 
RCC_CÀ¨Fœg
();

706 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

707 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

709 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

58 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

59 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

60 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

61 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

62 ((
IT
Ë=
RTC_IT_SEC
))

71 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

72 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

73 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

74 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

75 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

76 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

77 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

78 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

79 ((
FLAG
Ë=
RTC_FLAG_SEC
))

80 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

102 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

103 
RTC_E¡îC⁄figMode
();

104 
RTC_ExôC⁄figMode
();

105 
uöt32_t
 
RTC_GëCou¡î
();

106 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

107 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

108 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

109 
uöt32_t
 
RTC_GëDividî
();

110 
RTC_WaôF‹La°Task
();

111 
RTC_WaôF‹Synchro
();

112 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

113 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

114 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

115 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

117 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SDIO_ClockEdge
;

50 
uöt32_t
 
SDIO_ClockBy∑ss
;

54 
uöt32_t
 
SDIO_ClockPowîSave
;

58 
uöt32_t
 
SDIO_BusWide
;

61 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

64 
uöt8_t
 
SDIO_ClockDiv
;

67 } 
	tSDIO_InôTy≥Def
;

71 
uöt32_t
 
SDIO_Argumít
;

76 
uöt32_t
 
SDIO_CmdIndex
;

78 
uöt32_t
 
SDIO_Re•⁄£
;

81 
uöt32_t
 
SDIO_Waô
;

84 
uöt32_t
 
SDIO_CPSM
;

87 } 
	tSDIO_CmdInôTy≥Def
;

91 
uöt32_t
 
SDIO_D©aTimeOut
;

93 
uöt32_t
 
SDIO_D©aLígth
;

95 
uöt32_t
 
SDIO_D©aBlockSize
;

98 
uöt32_t
 
SDIO_Tøns„rDú
;

102 
uöt32_t
 
SDIO_Tøns„rMode
;

105 
uöt32_t
 
SDIO_DPSM
;

108 } 
	tSDIO_D©aInôTy≥Def
;

122 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

123 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

124 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

125 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

134 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

135 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

136 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

137 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

146 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

147 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

148 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

149 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

158 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

159 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

160 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

161 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

162 ((
WIDE
Ë=
SDIO_BusWide_8b
))

172 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

174 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

175 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

184 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

185 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

186 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

196 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

197 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

198 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

199 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

200 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

201 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

202 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

203 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

204 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

205 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

206 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

207 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

208 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

209 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

210 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

211 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

212 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

213 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

214 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

215 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

216 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

217 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

218 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

219 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

220 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

229 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

238 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

239 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

240 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

241 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

242 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

252 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

253 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

254 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

255 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

256 ((
WAIT
Ë=
SDIO_Waô_Píd
))

265 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

266 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

267 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

276 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

277 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

278 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

279 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

280 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

281 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

290 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

299 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

300 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

301 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

302 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

303 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

304 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

305 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

306 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

307 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

308 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

309 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

310 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

311 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

312 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

313 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

314 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

337 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

338 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

339 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

340 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

349 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

350 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

351 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

352 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

361 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

363 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

372 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

373 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

374 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

375 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

376 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

377 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

378 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

379 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

380 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

381 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

382 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

383 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

384 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

385 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

386 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

387 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

388 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

389 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

390 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

391 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

392 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

393 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

394 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

395 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

396 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

397 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

421 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

423 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

424 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

426 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

428 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

429 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

430 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

431 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

432 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

433 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXACT
) || \

436 ((
IT
Ë=
SDIO_IT_RXACT
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

444 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

446 ((
IT
Ë=
SDIO_IT_CEATAEND
))

448 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

458 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

459 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

460 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

461 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

482 
SDIO_DeInô
();

483 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

484 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

487 
uöt32_t
 
SDIO_GëPowîSèã
();

488 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

491 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

492 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

493 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

494 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
uöt32_t
 
SDIO_GëD©aCou¡î
();

497 
uöt32_t
 
SDIO_RódD©a
();

498 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

499 
uöt32_t
 
SDIO_GëFIFOCou¡
();

500 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

503 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

509 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

510 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

511 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

513 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
SPI_Dúe˘i⁄
;

54 
uöt16_t
 
SPI_Mode
;

57 
uöt16_t
 
SPI_D©aSize
;

60 
uöt16_t
 
SPI_CPOL
;

63 
uöt16_t
 
SPI_CPHA
;

66 
uöt16_t
 
SPI_NSS
;

70 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

76 
uöt16_t
 
SPI_Fú°Bô
;

79 
uöt16_t
 
SPI_CRCPﬁynomül
;

80 }
	tSPI_InôTy≥Def
;

89 
uöt16_t
 
I2S_Mode
;

92 
uöt16_t
 
I2S_Sènd¨d
;

95 
uöt16_t
 
I2S_D©aF‹m©
;

98 
uöt16_t
 
I2S_MCLKOuçut
;

101 
uöt32_t
 
I2S_AudioFªq
;

104 
uöt16_t
 
I2S_CPOL
;

106 }
	tI2S_InôTy≥Def
;

116 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

117 ((
PERIPH
Ë=
SPI2
) || \

118 ((
PERIPH
Ë=
SPI3
))

120 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

121 ((
PERIPH
Ë=
SPI3
))

127 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

128 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

129 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

131 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

132 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

143 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

144 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

145 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

146 ((
MODE
Ë=
SPI_Mode_Sœve
))

155 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

156 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

158 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

167 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

168 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

169 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

170 ((
CPOL
Ë=
SPI_CPOL_High
))

179 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

181 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

182 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

191 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

192 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

193 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

194 ((
NSS
Ë=
SPI_NSS_H¨d
))

203 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

205 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

206 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

207 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

208 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

209 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

210 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

211 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

212 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

227 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

229 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

230 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

239 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

240 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

241 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

242 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

243 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

244 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

245 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

255 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

256 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

257 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

258 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

259 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

260 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

261 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

273 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

274 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

275 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

276 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

277 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

278 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

289 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

290 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

291 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

292 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

301 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

302 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

303 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

304 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

305 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

306 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

307 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

308 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

309 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

310 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_96k
Ë|| \

	)

311 ((
FREQ
Ë=
I2S_AudioFªq_48k
) || \

312 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

313 ((
FREQ
Ë=
I2S_AudioFªq_32k
) || \

314 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

316 ((
FREQ
Ë=
I2S_AudioFªq_11k
) || \

317 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

318 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

327 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

328 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

329 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

330 ((
CPOL
Ë=
I2S_CPOL_High
))

339 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

340 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

341 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

350 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

351 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

352 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

353 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

362 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

363 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

364 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

373 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

374 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

375 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

376 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

385 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

386 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

387 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

388 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

389 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

390 ((
IT
Ë=
SPI_I2S_IT_ERR
))

391 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

392 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

393 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

394 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

395 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

396 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

397 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

398 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

407 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

408 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

409 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

410 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

411 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

412 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

413 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

414 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

415 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

416 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

417 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

418 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

419 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

428 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

449 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

450 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

451 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

452 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

453 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

454 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

458 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

459 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

460 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

461 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

463 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

466 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

467 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

468 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

469 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

470 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

471 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

473 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

52 
uöt16_t
 
TIM_PªsˇÀr
;

55 
uöt16_t
 
TIM_Cou¡îMode
;

58 
uöt16_t
 
TIM_Pîiod
;

62 
uöt16_t
 
TIM_ClockDivisi⁄
;

65 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

73 } 
	tTIM_TimeBa£InôTy≥Def
;

81 
uöt16_t
 
TIM_OCMode
;

84 
uöt16_t
 
TIM_OuçutSèã
;

87 
uöt16_t
 
TIM_OuçutNSèã
;

91 
uöt16_t
 
TIM_Pul£
;

94 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

97 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

101 
uöt16_t
 
TIM_OCIdÀSèã
;

105 
uöt16_t
 
TIM_OCNIdÀSèã
;

108 } 
	tTIM_OCInôTy≥Def
;

117 
uöt16_t
 
TIM_Ch™√l
;

120 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

123 
uöt16_t
 
TIM_ICSñe˘i⁄
;

126 
uöt16_t
 
TIM_ICPªsˇÀr
;

129 
uöt16_t
 
TIM_ICFûãr
;

131 } 
	tTIM_ICInôTy≥Def
;

141 
uöt16_t
 
TIM_OSSRSèã
;

144 
uöt16_t
 
TIM_OSSISèã
;

147 
uöt16_t
 
TIM_LOCKLevñ
;

150 
uöt16_t
 
TIM_DódTime
;

154 
uöt16_t
 
TIM_Bªak
;

157 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

160 
uöt16_t
 
TIM_Autom©icOuçut
;

162 } 
	tTIM_BDTRInôTy≥Def
;

168 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

169 ((
PERIPH
Ë=
TIM2
) || \

170 ((
PERIPH
Ë=
TIM3
) || \

171 ((
PERIPH
Ë=
TIM4
) || \

172 ((
PERIPH
Ë=
TIM5
) || \

173 ((
PERIPH
Ë=
TIM6
) || \

174 ((
PERIPH
Ë=
TIM7
) || \

175 ((
PERIPH
Ë=
TIM8
) || \

176 ((
PERIPH
Ë=
TIM9
) || \

177 ((
PERIPH
Ë=
TIM10
)|| \

178 ((
PERIPH
Ë=
TIM11
)|| \

179 ((
PERIPH
Ë=
TIM12
)|| \

180 ((
PERIPH
Ë=
TIM13
)|| \

181 ((
PERIPH
Ë=
TIM14
)|| \

182 ((
PERIPH
Ë=
TIM15
)|| \

183 ((
PERIPH
Ë=
TIM16
)|| \

184 ((
PERIPH
Ë=
TIM17
))

187 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

188 ((
PERIPH
Ë=
TIM8
))

191 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

192 ((
PERIPH
Ë=
TIM8
) || \

193 ((
PERIPH
Ë=
TIM15
)|| \

194 ((
PERIPH
Ë=
TIM16
)|| \

195 ((
PERIPH
Ë=
TIM17
))

198 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

199 ((
PERIPH
Ë=
TIM2
) || \

200 ((
PERIPH
Ë=
TIM3
) || \

201 ((
PERIPH
Ë=
TIM4
) || \

202 ((
PERIPH
Ë=
TIM5
) || \

203 ((
PERIPH
Ë=
TIM8
))

206 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

207 ((
PERIPH
Ë=
TIM2
) || \

208 ((
PERIPH
Ë=
TIM3
) || \

209 ((
PERIPH
Ë=
TIM4
) || \

210 ((
PERIPH
Ë=
TIM5
) || \

211 ((
PERIPH
Ë=
TIM8
) || \

212 ((
PERIPH
Ë=
TIM15
)|| \

213 ((
PERIPH
Ë=
TIM16
)|| \

214 ((
PERIPH
Ë=
TIM17
))

217 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

218 ((
PERIPH
Ë=
TIM2
) || \

219 ((
PERIPH
Ë=
TIM3
) || \

220 ((
PERIPH
Ë=
TIM4
) || \

221 ((
PERIPH
Ë=
TIM5
) || \

222 ((
PERIPH
Ë=
TIM8
) || \

223 ((
PERIPH
Ë=
TIM15
))

226 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

227 ((
PERIPH
Ë=
TIM2
) || \

228 ((
PERIPH
Ë=
TIM3
) || \

229 ((
PERIPH
Ë=
TIM4
) || \

230 ((
PERIPH
Ë=
TIM5
) || \

231 ((
PERIPH
Ë=
TIM8
) || \

232 ((
PERIPH
Ë=
TIM9
) || \

233 ((
PERIPH
Ë=
TIM12
)|| \

234 ((
PERIPH
Ë=
TIM15
))

237 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

238 ((
PERIPH
Ë=
TIM2
) || \

239 ((
PERIPH
Ë=
TIM3
) || \

240 ((
PERIPH
Ë=
TIM4
) || \

241 ((
PERIPH
Ë=
TIM5
) || \

242 ((
PERIPH
Ë=
TIM6
) || \

243 ((
PERIPH
Ë=
TIM7
) || \

244 ((
PERIPH
Ë=
TIM8
) || \

245 ((
PERIPH
Ë=
TIM9
) || \

246 ((
PERIPH
Ë=
TIM12
)|| \

247 ((
PERIPH
Ë=
TIM15
))

250 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

251 ((
PERIPH
Ë=
TIM2
) || \

252 ((
PERIPH
Ë=
TIM3
) || \

253 ((
PERIPH
Ë=
TIM4
) || \

254 ((
PERIPH
Ë=
TIM5
) || \

255 ((
PERIPH
Ë=
TIM8
) || \

256 ((
PERIPH
Ë=
TIM9
) || \

257 ((
PERIPH
Ë=
TIM10
)|| \

258 ((
PERIPH
Ë=
TIM11
)|| \

259 ((
PERIPH
Ë=
TIM12
)|| \

260 ((
PERIPH
Ë=
TIM13
)|| \

261 ((
PERIPH
Ë=
TIM14
)|| \

262 ((
PERIPH
Ë=
TIM15
)|| \

263 ((
PERIPH
Ë=
TIM16
)|| \

264 ((
PERIPH
Ë=
TIM17
))

267 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

268 ((
PERIPH
Ë=
TIM2
) || \

269 ((
PERIPH
Ë=
TIM3
) || \

270 ((
PERIPH
Ë=
TIM4
) || \

271 ((
PERIPH
Ë=
TIM5
) || \

272 ((
PERIPH
Ë=
TIM6
) || \

273 ((
PERIPH
Ë=
TIM7
) || \

274 ((
PERIPH
Ë=
TIM8
) || \

275 ((
PERIPH
Ë=
TIM15
)|| \

276 ((
PERIPH
Ë=
TIM16
)|| \

277 ((
PERIPH
Ë=
TIM17
))

287 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

288 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

289 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

290 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

291 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

292 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

293 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

294 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

295 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

297 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

298 ((
MODE
Ë=
TIM_OCMode_PWM2
))

299 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

300 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

301 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

303 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

304 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

305 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

315 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

316 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

318 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

327 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

329 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

330 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

331 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

332 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

335 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

336 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

337 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

338 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

348 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

349 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

350 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

351 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

352 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV4
))

362 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

363 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

364 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

367 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

368 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

380 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

381 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

382 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

383 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

392 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

393 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

394 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

395 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

404 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

405 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

406 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

407 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

416 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

417 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

418 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

419 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

428 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

429 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

430 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

431 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

440 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

441 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

442 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

443 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

452 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

453 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

454 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

455 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

464 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

465 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

466 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

467 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

476 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

477 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

478 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

479 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

488 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

489 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

490 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

491 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

492 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

493 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

504 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

505 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

506 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

507 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

516 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

517 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

518 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

519 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

528 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

529 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

530 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

531 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

540 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

541 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

542 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

543 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

552 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

553 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

554 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

555 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

564 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

566 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

568 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

569 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

570 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

571 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

580 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

581 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

582 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

583 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

584 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

585 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

586 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

587 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

596 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

597 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

598 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

599 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

600 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

601 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

602 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

603 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

604 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

606 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

607 ((
IT
Ë=
TIM_IT_CC1
) || \

608 ((
IT
Ë=
TIM_IT_CC2
) || \

609 ((
IT
Ë=
TIM_IT_CC3
) || \

610 ((
IT
Ë=
TIM_IT_CC4
) || \

611 ((
IT
Ë=
TIM_IT_COM
) || \

612 ((
IT
Ë=
TIM_IT_Triggî
) || \

613 ((
IT
Ë=
TIM_IT_Bªak
))

622 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

623 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

624 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

625 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

626 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

627 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

628 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

629 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

630 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

631 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

632 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

633 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

634 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

635 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

636 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

637 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

638 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

639 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

640 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

641 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

642 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

643 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

644 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

645 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

646 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

648 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

649 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

651 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

652 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

653 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

656 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

657 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

658 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_DCR
))

668 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

669 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

670 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

671 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

672 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

673 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

674 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

675 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

676 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

677 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

678 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

679 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

680 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

681 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

682 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

683 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

684 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

685 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

686 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

687 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

688 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

689 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

690 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

691 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

712 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

713 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

714 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

715 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

716 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

717 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

718 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

719 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

729 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

730 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

731 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

732 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

733 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

734 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

735 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

736 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

745 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

746 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

747 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

748 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

749 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

750 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

751 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

752 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

753 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

754 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

755 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

756 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

757 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

758 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

759 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

760 ((
SELECTION
Ë=
TIM_TS_ETRF
))

761 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

762 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

763 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

764 ((
SELECTION
Ë=
TIM_TS_ITR3
))

773 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

774 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

775 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

776 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

777 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

778 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

786 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

787 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

788 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

789 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

798 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

799 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

800 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

801 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

810 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

811 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

812 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

813 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

822 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

823 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

824 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

825 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

826 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

827 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

837 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

838 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

839 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

840 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

841 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

842 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

843 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

844 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

845 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

855 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

858 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

859 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

860 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

869 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

870 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

871 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

872 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

881 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

882 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

883 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

884 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

894 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

895 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

896 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

897 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

906 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

907 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

908 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

909 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

910 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

911 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

912 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

913 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

914 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

915 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

916 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

917 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

918 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

919 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

930 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

931 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

932 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

933 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

934 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

935 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

936 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

937 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

946 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

947 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

948 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

949 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

958 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

959 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

960 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

961 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

962 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

963 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

964 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

965 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

966 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

967 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

968 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

969 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

970 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

971 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

972 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

973 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

974 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

975 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

976 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

977 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

980 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

981 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

984 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

993 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1002 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1023 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1024 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1025 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1026 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1027 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1028 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1029 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1030 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1031 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1032 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1033 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1034 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1035 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1036 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1037 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1039 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1040 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1041 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1042 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1043 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1044 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1045 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1046 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1047 
uöt16_t
 
ExtTRGFûãr
);

1048 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1049 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1050 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1051 
uöt16_t
 
ExtTRGFûãr
);

1052 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1053 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1054 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1055 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1056 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1057 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1058 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1059 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1060 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1061 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1062 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1063 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1064 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1065 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1066 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1067 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1068 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1069 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1070 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1071 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1072 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1073 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1074 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1075 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1076 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1077 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1078 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1079 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1080 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1081 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1082 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1083 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1084 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1085 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1086 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1087 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1088 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1089 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1090 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1091 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1092 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1093 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1094 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1095 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1096 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1097 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1098 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1099 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1100 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1101 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1102 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1103 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1104 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1105 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1106 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1107 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1108 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1109 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1110 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1111 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1112 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1113 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1114 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1116 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

106 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

107 ((
PERIPH
Ë=
USART2
) || \

108 ((
PERIPH
Ë=
USART3
) || \

109 ((
PERIPH
Ë=
UART4
) || \

110 ((
PERIPH
Ë=
UART5
))

112 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

113 ((
PERIPH
Ë=
USART2
) || \

114 ((
PERIPH
Ë=
USART3
))

116 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
) || \

119 ((
PERIPH
Ë=
UART4
))

124 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

125 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

127 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

128 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

137 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

138 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

139 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

140 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

141 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

142 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

153 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

154 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

155 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

156 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

157 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

167 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

168 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

169 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

177 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

181 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

182 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

183 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

193 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

194 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

195 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

196 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

205 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

206 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

207 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

217 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

218 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

219 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

229 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

230 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

231 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

232 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

241 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

242 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

243 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

244 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

245 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

246 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

247 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

248 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

249 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

250 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

251 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

252 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

253 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

254 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

255 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

256 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

257 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

258 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

259 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

260 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

261 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

262 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

271 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

272 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

273 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

283 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

284 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

285 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

286 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

295 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

296 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

297 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

298 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

299 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

308 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

309 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

310 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

311 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

320 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

321 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

322 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

323 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

324 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

325 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

326 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

327 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

328 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

329 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

330 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

331 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

332 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

333 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

334 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

336 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

337 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

338 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

339 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

340 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

341 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

342 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

364 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

365 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

366 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

368 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

370 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

373 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

374 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

375 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

376 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

378 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

379 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

381 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

382 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

383 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

388 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

389 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

390 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

392 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

394 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

58 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

59 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

60 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

61 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

62 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

65 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

66 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

87 
WWDG_DeInô
();

88 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

89 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

90 
WWDG_E«bÀIT
();

91 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

92 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

93 
FœgSètus
 
WWDG_GëFœgSètus
();

94 
WWDG_CÀ¨Fœg
();

96 #ifde‡
__˝lu•lus


	@code/Libararies/STM32F10x_StdPeriph_Driver/src/misc.c

23 
	~"misc.h
"

46 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

95 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

98 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

101 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

102 
	}
}

111 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

113 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

116 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

117 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

118 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

120 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

123 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

124 
tmµª
 = (0x4 - 
tmµri‹ôy
);

125 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

127 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

128 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

129 
tmµri‹ôy
 =Åmppriority << 0x04;

131 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

134 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

135 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

140 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

141 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

143 
	}
}

154 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

157 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

158 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

160 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

161 
	}
}

173 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

179 i‡(
NewSèã
 !
DISABLE
)

181 
SCB
->
SCR
 |
LowPowîMode
;

185 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

187 
	}
}

197 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

200 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

201 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

203 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

207 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

209 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c

22 
	~"°m32f10x_adc.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

50 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

51 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

54 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

55 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

58 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

59 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

62 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

65 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

71 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

72 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

75 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

76 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

79 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

82 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

85 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

88 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

89 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

92 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

93 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

96 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

99 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

100 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

103 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

106 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

110 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

111 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

114 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

117 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

118 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

122 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

125 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

128 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

129 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

133 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

136 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

139 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

178 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

181 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

183 i‡(
ADCx
 =
ADC1
)

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

188 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

190 i‡(
ADCx
 =
ADC2
)

193 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

199 i‡(
ADCx
 =
ADC3
)

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

207 
	}
}

217 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

219 
uöt32_t
 
tm¥eg1
 = 0;

220 
uöt8_t
 
tm¥eg2
 = 0;

222 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

223 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

224 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

227 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

228 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

232 
tm¥eg1
 = 
ADCx
->
CR1
;

234 
tm¥eg1
 &
CR1_CLEAR_Mask
;

238 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

240 
ADCx
->
CR1
 = 
tm¥eg1
;

244 
tm¥eg1
 = 
ADCx
->
CR2
;

246 
tm¥eg1
 &
CR2_CLEAR_Mask
;

251 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

252 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

254 
ADCx
->
CR2
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
SQR1
;

260 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

263 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

264 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

266 
ADCx
->
SQR1
 = 
tm¥eg1
;

267 
	}
}

274 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

278 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

280 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

282 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

284 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

286 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

288 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

289 
	}
}

298 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

301 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 i‡(
NewSèã
 !
DISABLE
)

306 
ADCx
->
CR2
 |
CR2_ADON_Së
;

311 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

313 
	}
}

323 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
ADCx
->
CR2
 |
CR2_DMA_Së
;

336 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

338 
	}
}

352 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
uöt8_t
 
ômask
 = 0;

356 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

360 
ômask
 = (
uöt8_t
)
ADC_IT
;

361 i‡(
NewSèã
 !
DISABLE
)

364 
ADCx
->
CR1
 |
ômask
;

369 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

371 
	}
}

378 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

381 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

383 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

384 
	}
}

391 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

393 
FœgSètus
 
bô°©us
 = 
RESET
;

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

397 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

400 
bô°©us
 = 
SET
;

405 
bô°©us
 = 
RESET
;

408  
bô°©us
;

409 
	}
}

416 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

419 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

421 
ADCx
->
CR2
 |
CR2_CAL_Së
;

422 
	}
}

429 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

431 
FœgSètus
 
bô°©us
 = 
RESET
;

433 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

435 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

438 
bô°©us
 = 
SET
;

443 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

456 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

461 i‡(
NewSèã
 !
DISABLE
)

465 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

471 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

473 
	}
}

480 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

482 
FœgSètus
 
bô°©us
 = 
RESET
;

484 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

486 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

489 
bô°©us
 = 
SET
;

494 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

508 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

510 
uöt32_t
 
tm¥eg1
 = 0;

511 
uöt32_t
 
tm¥eg2
 = 0;

513 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

514 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

516 
tm¥eg1
 = 
ADCx
->
CR1
;

518 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

520 
tm¥eg2
 = 
Numbî
 - 1;

521 
tm¥eg1
 |
tm¥eg2
 << 13;

523 
ADCx
->
CR1
 = 
tm¥eg1
;

524 
	}
}

535 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 !
DISABLE
)

543 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

548 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

550 
	}
}

589 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

591 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

593 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

594 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

596 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

598 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

601 
tm¥eg1
 = 
ADCx
->
SMPR1
;

603 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

605 
tm¥eg1
 &~
tm¥eg2
;

607 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

609 
tm¥eg1
 |
tm¥eg2
;

611 
ADCx
->
SMPR1
 = 
tm¥eg1
;

616 
tm¥eg1
 = 
ADCx
->
SMPR2
;

618 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

620 
tm¥eg1
 &~
tm¥eg2
;

622 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

624 
tm¥eg1
 |
tm¥eg2
;

626 
ADCx
->
SMPR2
 = 
tm¥eg1
;

629 i‡(
R™k
 < 7)

632 
tm¥eg1
 = 
ADCx
->
SQR3
;

634 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

636 
tm¥eg1
 &~
tm¥eg2
;

638 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

640 
tm¥eg1
 |
tm¥eg2
;

642 
ADCx
->
SQR3
 = 
tm¥eg1
;

645 i‡(
R™k
 < 13)

648 
tm¥eg1
 = 
ADCx
->
SQR2
;

650 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

652 
tm¥eg1
 &~
tm¥eg2
;

654 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

656 
tm¥eg1
 |
tm¥eg2
;

658 
ADCx
->
SQR2
 = 
tm¥eg1
;

664 
tm¥eg1
 = 
ADCx
->
SQR1
;

666 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

668 
tm¥eg1
 &~
tm¥eg2
;

670 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

672 
tm¥eg1
 |
tm¥eg2
;

674 
ADCx
->
SQR1
 = 
tm¥eg1
;

676 
	}
}

685 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

688 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

689 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

690 i‡(
NewSèã
 !
DISABLE
)

693 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

698 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

700 
	}
}

707 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

710 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

712  (
uöt16_t
Ë
ADCx
->
DR
;

713 
	}
}

719 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

722  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

723 
	}
}

733 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

736 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

737 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

738 i‡(
NewSèã
 !
DISABLE
)

741 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

746 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

748 
	}
}

759 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

772 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

774 
	}
}

798 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

800 
uöt32_t
 
tm¥eg
 = 0;

802 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

803 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

805 
tm¥eg
 = 
ADCx
->
CR2
;

807 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

809 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

811 
ADCx
->
CR2
 = 
tm¥eg
;

812 
	}
}

823 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

826 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

827 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

828 i‡(
NewSèã
 !
DISABLE
)

831 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

836 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

838 
	}
}

848 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

851 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

852 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

853 i‡(
NewSèã
 !
DISABLE
)

857 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

863 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

865 
	}
}

872 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

874 
FœgSètus
 
bô°©us
 = 
RESET
;

876 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

878 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

881 
bô°©us
 = 
SET
;

886 
bô°©us
 = 
RESET
;

889  
bô°©us
;

890 
	}
}

929 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

931 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

933 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

934 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

935 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

936 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

938 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

941 
tm¥eg1
 = 
ADCx
->
SMPR1
;

943 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

945 
tm¥eg1
 &~
tm¥eg2
;

947 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

949 
tm¥eg1
 |
tm¥eg2
;

951 
ADCx
->
SMPR1
 = 
tm¥eg1
;

956 
tm¥eg1
 = 
ADCx
->
SMPR2
;

958 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

960 
tm¥eg1
 &~
tm¥eg2
;

962 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

964 
tm¥eg1
 |
tm¥eg2
;

966 
ADCx
->
SMPR2
 = 
tm¥eg1
;

970 
tm¥eg1
 = 
ADCx
->
JSQR
;

972 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

974 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

976 
tm¥eg1
 &~
tm¥eg2
;

978 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

980 
tm¥eg1
 |
tm¥eg2
;

982 
ADCx
->
JSQR
 = 
tm¥eg1
;

983 
	}
}

992 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

994 
uöt32_t
 
tm¥eg1
 = 0;

995 
uöt32_t
 
tm¥eg2
 = 0;

997 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

998 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1001 
tm¥eg1
 = 
ADCx
->
JSQR
;

1003 
tm¥eg1
 &
JSQR_JL_Re£t
;

1005 
tm¥eg2
 = 
Lígth
 - 1;

1006 
tm¥eg1
 |
tm¥eg2
 << 20;

1008 
ADCx
->
JSQR
 = 
tm¥eg1
;

1009 
	}
}

1024 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1026 
__IO
 
uöt32_t
 
tmp
 = 0;

1029 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1030 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1031 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1033 
tmp
 = (
uöt32_t
)
ADCx
;

1034 
tmp
 +
ADC_Inje˘edCh™√l
;

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1038 
	}
}

1051 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1053 
__IO
 
uöt32_t
 
tmp
 = 0;

1056 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1057 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1059 
tmp
 = (
uöt32_t
)
ADCx
;

1060 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1063  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1064 
	}
}

1081 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1083 
uöt32_t
 
tm¥eg
 = 0;

1085 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1086 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1088 
tm¥eg
 = 
ADCx
->
CR1
;

1090 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1092 
tm¥eg
 |
ADC_A«logW©chdog
;

1094 
ADCx
->
CR1
 = 
tm¥eg
;

1095 
	}
}

1106 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1107 
uöt16_t
 
LowThªshﬁd
)

1110 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1111 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1114 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1116 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1117 
	}
}

1144 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1146 
uöt32_t
 
tm¥eg
 = 0;

1148 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1149 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1151 
tm¥eg
 = 
ADCx
->
CR1
;

1153 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1155 
tm¥eg
 |
ADC_Ch™√l
;

1157 
ADCx
->
CR1
 = 
tm¥eg
;

1158 
	}
}

1166 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1169 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1170 i‡(
NewSèã
 !
DISABLE
)

1173 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1178 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1180 
	}
}

1194 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1198 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1199 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1201 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1204 
bô°©us
 = 
SET
;

1209 
bô°©us
 = 
RESET
;

1212  
bô°©us
;

1213 
	}
}

1227 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1230 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1231 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1233 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1234 
	}
}

1246 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1251 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1252 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1254 
ômask
 = 
ADC_IT
 >> 8;

1256 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1258 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1261 
bô°©us
 = 
SET
;

1266 
bô°©us
 = 
RESET
;

1269  
bô°©us
;

1270 
	}
}

1282 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1284 
uöt8_t
 
ômask
 = 0;

1286 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1287 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1289 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1291 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1292 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c

22 
	~"°m32f10x_bkp.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

53 
	#TPAL_BôNumbî
 0x01

	)

54 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

57 
	#TPE_BôNumbî
 0x00

	)

58 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

64 
	#TPIE_BôNumbî
 0x02

	)

65 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

68 
	#TIF_BôNumbî
 0x09

	)

69 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

72 
	#TEF_BôNumbî
 0x08

	)

73 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

78 
	#RTCCR_CAL_Mask
 ((
uöt16_t
)0xFF80)

	)

79 
	#RTCCR_Mask
 ((
uöt16_t
)0xFC7F)

	)

82 
	#CSR_CTE_Së
 ((
uöt16_t
)0x0001)

	)

83 
	#CSR_CTI_Së
 ((
uöt16_t
)0x0002)

	)

123 
	$BKP_DeInô
()

125 
	`RCC_BackupRe£tCmd
(
ENABLE
);

126 
	`RCC_BackupRe£tCmd
(
DISABLE
);

127 
	}
}

137 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

140 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

142 
	}
}

150 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

153 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

154 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

155 
	}
}

163 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

167 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

168 
	}
}

183 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

185 
uöt16_t
 
tm¥eg
 = 0;

187 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

188 
tm¥eg
 = 
BKP
->
RTCCR
;

190 
tm¥eg
 &
RTCCR_Mask
;

193 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

195 
BKP
->
RTCCR
 = 
tm¥eg
;

196 
	}
}

204 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

206 
uöt16_t
 
tm¥eg
 = 0;

208 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

209 
tm¥eg
 = 
BKP
->
RTCCR
;

211 
tm¥eg
 &
RTCCR_CAL_Mask
;

213 
tm¥eg
 |
CÆibøti⁄VÆue
;

215 
BKP
->
RTCCR
 = 
tm¥eg
;

216 
	}
}

225 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

227 
__IO
 
uöt32_t
 
tmp
 = 0;

230 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

232 
tmp
 = (
uöt32_t
)
BKP_BASE
;

233 
tmp
 +
BKP_DR
;

235 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

236 
	}
}

244 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

246 
__IO
 
uöt32_t
 
tmp
 = 0;

249 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

251 
tmp
 = (
uöt32_t
)
BKP_BASE
;

252 
tmp
 +
BKP_DR
;

254  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

255 
	}
}

262 
FœgSètus
 
	$BKP_GëFœgSètus
()

264  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

265 
	}
}

272 
	$BKP_CÀ¨Fœg
()

275 
BKP
->
CSR
 |
CSR_CTE_Së
;

276 
	}
}

283 
ITSètus
 
	$BKP_GëITSètus
()

285  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

286 
	}
}

293 
	$BKP_CÀ¨ITPídögBô
()

296 
BKP
->
CSR
 |
CSR_CTI_Së
;

297 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c

22 
	~"°m32f10x_ˇn.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

48 
	#MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

49 
	#MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

50 
	#MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

51 
	#MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

52 
	#MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

53 
	#MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

54 
	#MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

55 
	#MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

56 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

59 
	#MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

60 
	#MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

61 
	#MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

64 
	#TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

65 
	#TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

66 
	#TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

67 
	#TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

68 
	#TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

69 
	#TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

70 
	#TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

71 
	#TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

72 
	#TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

73 
	#TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

74 
	#TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

75 
	#TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

78 
	#RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

79 
	#RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

80 
	#RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

83 
	#RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

84 
	#RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

85 
	#RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

88 
	#ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

89 
	#ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

90 
	#ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

96 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

99 
	#INAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

102 
	#SLAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

128 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

143 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

146 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

148 i‡(
CANx
 =
CAN1
)

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

162 
	}
}

173 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

175 
uöt8_t
 
InôSètus
 = 
CANINITFAILED
;

176 
uöt32_t
 
waô_ack
 = 0x00000000;

178 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

185 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

186 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

187 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

188 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

189 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

192 
CANx
->
MCR
 &~
MCR_SLEEP
;

195 
CANx
->
MCR
 |
MCR_INRQ
 ;

198 ((
CANx
->
MSR
 & 
MSR_INAK
Ë!MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

200 
waô_ack
++;

204 i‡((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK)

206 
InôSètus
 = 
CANINITFAILED
;

211 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

213 
CANx
->
MCR
 |
MCR_TTCM
;

217 
CANx
->
MCR
 &~
MCR_TTCM
;

221 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

223 
CANx
->
MCR
 |
MCR_ABOM
;

227 
CANx
->
MCR
 &~
MCR_ABOM
;

231 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

233 
CANx
->
MCR
 |
MCR_AWUM
;

237 
CANx
->
MCR
 &~
MCR_AWUM
;

241 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

243 
CANx
->
MCR
 |
MCR_NART
;

247 
CANx
->
MCR
 &~
MCR_NART
;

251 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

253 
CANx
->
MCR
 |
MCR_RFLM
;

257 
CANx
->
MCR
 &~
MCR_RFLM
;

261 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

263 
CANx
->
MCR
 |
MCR_TXFP
;

267 
CANx
->
MCR
 &~
MCR_TXFP
;

271 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_SJW
 << 24) |

272 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_BS2
 << 20) |

273 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

276 
CANx
->
MCR
 &~
MCR_INRQ
;

279 
waô_ack
 = 0x00;

281 ((
CANx
->
MSR
 & 
MSR_INAK
Ë=MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

283 
waô_ack
++;

287 i‡((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK)

289 
InôSètus
 = 
CANINITFAILED
;

293 
InôSètus
 = 
CANINITOK
 ;

298  
InôSètus
;

299 
	}
}

308 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

310 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

312 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

313 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

314 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

315 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

316 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

318 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)0x00000001Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

321 
CAN1
->
FMR
 |
FMR_FINIT
;

324 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

327 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

330 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

340 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

341 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

342 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

345 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

348 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

350 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

351 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

352 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

354 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

355 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

356 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

360 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

363 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

368 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

372 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO0
)

375 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

378 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO1
)

381 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

385 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

387 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

391 
CAN1
->
FMR
 &~
FMR_FINIT
;

392 
	}
}

400 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

404 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

406 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

408 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

410 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

412 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

414 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

416 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

418 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

420 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

422 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

424 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

425 
	}
}

433 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

436 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

438 
CAN1
->
FMR
 |
FMR_FINIT
;

440 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

441 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

443 
CAN1
->
FMR
 &~
FMR_FINIT
;

444 
	}
}

459 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

462 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

463 
	`as£π_∑øm
(
	`IS_CAN_ITC⁄fig
(
CAN_IT
));

464 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

466 i‡(
NewSèã
 !
DISABLE
)

469 
CANx
->
IER
 |
CAN_IT
;

474 
CANx
->
IER
 &~
CAN_IT
;

476 
	}
}

486 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

488 
uöt8_t
 
å™smô_maûbox
 = 0;

490 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

491 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

492 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

493 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

496 i‡((
CANx
->
TSR
&
TSR_TME0
) == TSR_TME0)

498 
å™smô_maûbox
 = 0;

500 i‡((
CANx
->
TSR
&
TSR_TME1
) == TSR_TME1)

502 
å™smô_maûbox
 = 1;

504 i‡((
CANx
->
TSR
&
TSR_TME2
) == TSR_TME2)

506 
å™smô_maûbox
 = 2;

510 
å™smô_maûbox
 = 
CAN_NO_MB
;

513 i‡(
å™smô_maûbox
 !
CAN_NO_MB
)

516 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

517 i‡(
TxMesßge
->
IDE
 =
CAN_ID_STD
)

519 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

520 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21Ë| TxMesßge->
RTR
);

524 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

525 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
<<3Ë| TxMesßge->
IDE
 |

526 
TxMesßge
->
RTR
);

531 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

532 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

533 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

536 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

537 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

538 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

539 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

540 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

541 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

542 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

543 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

547  
å™smô_maûbox
;

548 
	}
}

556 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

559 
uöt8_t
 
°©e
 = 0;

561 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

562 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

563 
TønsmôMaûbox
)

565 (0): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP0
) << 2);

566 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK0
) >> 0);

567 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME0
) >> 26);

569 (1): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP1
) >> 6);

570 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK1
) >> 8);

571 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME1
) >> 27);

573 (2): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP2
) >> 14);

574 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK2
) >> 16);

575 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME2
) >> 28);

578 
°©e
 = 
CANTXFAILED
;

581 
°©e
)

584 (0x0): 
°©e
 = 
CANTXPENDING
;

587 (0x5): 
°©e
 = 
CANTXFAILED
;

590 (0x7): 
°©e
 = 
CANTXOK
;

593 
°©e
 = 
CANTXFAILED
;

596  
°©e
;

597 
	}
}

605 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

608 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

609 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

611 
Maûbox
)

613 (0): 
CANx
->
TSR
 |
TSR_ABRQ0
;

615 (1): 
CANx
->
TSR
 |
TSR_ABRQ1
;

617 (2): 
CANx
->
TSR
 |
TSR_ABRQ2
;

622 
	}
}

630 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

633 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

634 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

636 i‡(
FIFONumbî
 =
CAN_FIFO0
)

638 
CANx
->
RF0R
 = 
RF0R_RFOM0
;

643 
CANx
->
RF1R
 = 
RF1R_RFOM1
;

645 
	}
}

653 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

655 
uöt8_t
 
mesßge_≥ndög
=0;

657 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

658 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

659 i‡(
FIFONumbî
 =
CAN_FIFO0
)

661 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

663 i‡(
FIFONumbî
 =
CAN_FIFO1
)

665 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

669 
mesßge_≥ndög
 = 0;

671  
mesßge_≥ndög
;

672 
	}
}

682 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

685 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

686 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

688 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 i‡(
RxMesßge
->
IDE
 =
CAN_ID_STD
)

691 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

695 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

698 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

700 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

702 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

704 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

705 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

706 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

707 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

708 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

709 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

710 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

711 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

713 
	`CAN_FIFORñó£
(
CANx
, 
FIFONumbî
);

714 
	}
}

723 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

727 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

729 i‡(
NewSèã
 !
DISABLE
)

732 
CANx
->
MCR
 |
MCR_DBF
;

737 
CANx
->
MCR
 &~
MCR_DBF
;

739 
	}
}

746 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

748 
uöt8_t
 
¶ìp°©us
 = 
CANSLEEPFAILED
;

751 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

754 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~
MCR_INRQ
)Ë| 
MCR_SLEEP
);

757 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

760 
¶ìp°©us
 = 
CANSLEEPOK
;

763  (
uöt8_t
)
¶ìp°©us
;

764 
	}
}

771 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

773 
uöt32_t
 
waô_¶ak
 = 
SLAK_TimeOut
 ;

774 
uöt8_t
 
wakeup°©us
 = 
CANWAKEUPFAILED
;

777 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

780 
CANx
->
MCR
 &~
MCR_SLEEP
;

783 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

785 
waô_¶ak
--;

787 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

790 
wakeup°©us
 = 
CANWAKEUPOK
;

793  (
uöt8_t
)
wakeup°©us
;

794 
	}
}

803 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

805 
FœgSètus
 
bô°©us
 = 
RESET
;

807 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

808 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

810 i‡((
CANx
->
ESR
 & 
CAN_FLAG
Ë!(
uöt32_t
)
RESET
)

813 
bô°©us
 = 
SET
;

818 
bô°©us
 = 
RESET
;

821  
bô°©us
;

822 
	}
}

830 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

833 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

834 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

836 
CANx
->
ESR
 &~
CAN_FLAG
;

837 
	}
}

849 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

851 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

854 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

855 
CAN_IT
)

857 
CAN_IT_RQCP0
:

858 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP0
);

860 
CAN_IT_RQCP1
:

861 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP1
);

863 
CAN_IT_RQCP2
:

864 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP2
);

866 
CAN_IT_FF0
:

867 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FULL0
);

869 
CAN_IT_FOV0
:

870 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FOVR0
);

872 
CAN_IT_FF1
:

873 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FULL1
);

875 
CAN_IT_FOV1
:

876 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FOVR1
);

878 
CAN_IT_EWG
:

879 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EWGF
);

881 
CAN_IT_EPV
:

882 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EPVF
);

884 
CAN_IT_BOF
:

885 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_BOFF
);

887 
CAN_IT_SLK
:

888 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_SLAKI
);

890 
CAN_IT_WKU
:

891 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_WKUI
);

894 
≥ndögbô°©us
 = 
RESET
;

898  
≥ndögbô°©us
;

899 
	}
}

907 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

910 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

911 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

912 
CAN_IT
)

914 
CAN_IT_RQCP0
:

915 
CANx
->
TSR
 = 
TSR_RQCP0
;

917 
CAN_IT_RQCP1
:

918 
CANx
->
TSR
 = 
TSR_RQCP1
;

920 
CAN_IT_RQCP2
:

921 
CANx
->
TSR
 = 
TSR_RQCP2
;

923 
CAN_IT_FF0
:

924 
CANx
->
RF0R
 = 
RF0R_FULL0
;

926 
CAN_IT_FOV0
:

927 
CANx
->
RF0R
 = 
RF0R_FOVR0
;

929 
CAN_IT_FF1
:

930 
CANx
->
RF1R
 = 
RF1R_FULL1
;

932 
CAN_IT_FOV1
:

933 
CANx
->
RF1R
 = 
RF1R_FOVR1
;

935 
CAN_IT_EWG
:

936 
CANx
->
ESR
 &~ 
ESR_EWGF
;

938 
CAN_IT_EPV
:

939 
CANx
->
ESR
 &~ 
ESR_EPVF
;

941 
CAN_IT_BOF
:

942 
CANx
->
ESR
 &~ 
ESR_BOFF
;

944 
CAN_IT_WKU
:

945 
CANx
->
MSR
 = 
MSR_WKUI
;

947 
CAN_IT_SLK
:

948 
CANx
->
MSR
 = 
MSR_SLAKI
;

953 
	}
}

961 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

963 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

965 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

968 
≥ndögbô°©us
 = 
SET
;

973 
≥ndögbô°©us
 = 
RESET
;

975  
≥ndögbô°©us
;

976 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c

22 
	~"°m32f10x_˚c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

54 
	#PE_BôNumbî
 0x00

	)

55 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

58 
	#IE_BôNumbî
 0x01

	)

59 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

65 
	#TSOM_BôNumbî
 0x00

	)

66 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

69 
	#TEOM_BôNumbî
 0x01

	)

70 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

72 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

73 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

117 
	$CEC_DeInô
()

120 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

123 
	}
}

134 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

136 
uöt16_t
 
tm¥eg
 = 0;

139 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

144 
tm¥eg
 = 
CEC
->
CFGR
;

147 
tm¥eg
 &
CFGR_CLEAR_Mask
;

150 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

153 
CEC
->
CFGR
 = 
tm¥eg
;

155 
	}
}

163 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

168 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

170 if(
NewSèã
 =
DISABLE
)

173 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

177 
	}
}

185 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

188 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

190 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

191 
	}
}

198 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

201 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

204 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

205 
	}
}

212 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

215 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

218 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

219 
	}
}

226 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

229 
CEC
->
TXD
 = 
D©a
 ;

230 
	}
}

238 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

241  (
uöt8_t
)(
CEC
->
RXD
);

242 
	}
}

249 
	$CEC_SèπOfMesßge
()

252 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

253 
	}
}

261 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

268 
	}
}

290 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

292 
FœgSètus
 
bô°©us
 = 
RESET
;

293 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

296 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

299 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

302 
˚¸eg
 = 
CEC_FLAG
 >> 28;

305 
CEC_FLAG
 &
FLAG_Mask
;

307 if(
˚¸eg
 != 0)

310 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

313 
˚cba£
 += 0xC;

318 
˚cba£
 += 0x10;

321 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

324 
bô°©us
 = 
SET
;

329 
bô°©us
 = 
RESET
;

333  
bô°©us
;

334 
	}
}

348 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

350 
uöt32_t
 
tmp
 = 0x0;

353 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

355 
tmp
 = 
CEC
->
CSR
 & 0x2;

358 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

359 
	}
}

371 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

373 
ITSètus
 
bô°©us
 = 
RESET
;

374 
uöt32_t
 
íabÀ°©us
 = 0;

377 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

380 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

383 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

386 
bô°©us
 = 
SET
;

391 
bô°©us
 = 
RESET
;

394  
bô°©us
;

395 
	}
}

407 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

409 
uöt32_t
 
tmp
 = 0x0;

412 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

414 
tmp
 = 
CEC
->
CSR
 & 0x2;

417 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

418 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c

22 
	~"°m32f10x_¸c.h
"

47 
	#CR_RESET_Së
 ((
uöt32_t
)0x00000001)

	)

86 
	$CRC_Re£tDR
()

89 
CRC
->
CR
 = 
CR_RESET_Së
;

90 
	}
}

97 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

99 
CRC
->
DR
 = 
D©a
;

101  (
CRC
->
DR
);

102 
	}
}

110 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

112 
uöt32_t
 
ödex
 = 0;

114 
ödex
 = 0; index < 
Buf„rLígth
; index++)

116 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

118  (
CRC
->
DR
);

119 
	}
}

126 
uöt32_t
 
	$CRC_GëCRC
()

128  (
CRC
->
DR
);

129 
	}
}

136 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

138 
CRC
->
IDR
 = 
IDVÆue
;

139 
	}
}

146 
uöt8_t
 
	$CRC_GëIDRegi°î
()

148  (
CRC
->
IDR
);

149 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c

22 
	~"°m32f10x_dac.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR_EN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#CR_DMAEN_Së
 ((
uöt32_t
)0x00001000)

	)

53 
	#CR_CLEAR_Mask
 ((
uöt32_t
)0x00000FFE)

	)

56 
	#SWTRIGR_SWTRIG_Së
 ((
uöt32_t
)0x00000001)

	)

59 
	#DUAL_SWTRIG_Së
 ((
uöt32_t
)0x00000003)

	)

60 
	#DUAL_SWTRIG_Re£t
 ((
uöt32_t
)0xFFFFFFFC)

	)

63 
	#DHR12R1_Off£t
 ((
uöt32_t
)0x00000008)

	)

64 
	#DHR12R2_Off£t
 ((
uöt32_t
)0x00000014)

	)

65 
	#DHR12RD_Off£t
 ((
uöt32_t
)0x00000020)

	)

68 
	#DOR_Off£t
 ((
uöt32_t
)0x0000002C)

	)

106 
	$DAC_DeInô
()

109 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

111 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

112 
	}
}

125 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

127 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

129 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

130 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

131 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

132 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

135 
tm¥eg1
 = 
DAC
->
CR
;

137 
tm¥eg1
 &~(
CR_CLEAR_Mask
 << 
DAC_Ch™√l
);

144 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

145 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

147 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

149 
DAC
->
CR
 = 
tm¥eg1
;

150 
	}
}

158 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

162 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

164 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

166 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

168 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

169 
	}
}

181 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

184 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

185 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

186 i‡(
NewSèã
 !
DISABLE
)

189 
DAC
->
CR
 |
CR_EN_Së
 << 
DAC_Ch™√l
;

194 
DAC
->
CR
 &~(
CR_EN_Së
 << 
DAC_Ch™√l
);

196 
	}
}

197 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

211 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

214 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

216 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

218 i‡(
NewSèã
 !
DISABLE
)

221 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

226 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

228 
	}
}

241 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

244 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

245 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

246 i‡(
NewSèã
 !
DISABLE
)

249 
DAC
->
CR
 |
CR_DMAEN_Së
 << 
DAC_Ch™√l
;

254 
DAC
->
CR
 &~(
CR_DMAEN_Së
 << 
DAC_Ch™√l
);

256 
	}
}

268 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

272 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
DAC
->
SWTRIGR
 |
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4);

281 
DAC
->
SWTRIGR
 &~(
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4));

283 
	}
}

292 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

296 i‡(
NewSèã
 !
DISABLE
)

299 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_Së
 ;

304 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_Re£t
;

306 
	}
}

322 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

336 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

338 
	}
}

350 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

352 
__IO
 
uöt32_t
 
tmp
 = 0;

355 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

356 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

358 
tmp
 = (
uöt32_t
)
DAC_BASE
;

359 
tmp
 +
DHR12R1_Off£t
 + 
DAC_Align
;

362 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

363 
	}
}

375 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

377 
__IO
 
uöt32_t
 
tmp
 = 0;

380 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

381 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

383 
tmp
 = (
uöt32_t
)
DAC_BASE
;

384 
tmp
 +
DHR12R2_Off£t
 + 
DAC_Align
;

387 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

388 
	}
}

404 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

406 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

409 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

410 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

411 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

414 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

416 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

420 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

423 
tmp
 = (
uöt32_t
)
DAC_BASE
;

424 
tmp
 +
DHR12RD_Off£t
 + 
DAC_Align
;

427 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

428 
	}
}

438 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

440 
__IO
 
uöt32_t
 
tmp
 = 0;

443 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

445 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

446 
tmp
 +
DOR_Off£t
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

449  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

450 
	}
}

452 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

464 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

466 
FœgSètus
 
bô°©us
 = 
RESET
;

468 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

469 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

472 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

475 
bô°©us
 = 
SET
;

480 
bô°©us
 = 
RESET
;

483  
bô°©us
;

484 
	}
}

497 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

500 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

501 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

504 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

505 
	}
}

518 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

520 
ITSètus
 
bô°©us
 = 
RESET
;

521 
uöt32_t
 
íabÀ°©us
 = 0;

524 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

525 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

528 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

531 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

534 
bô°©us
 = 
SET
;

539 
bô°©us
 = 
RESET
;

542  
bô°©us
;

543 
	}
}

556 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

559 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

560 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

563 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

564 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c

22 
	~"°m32f10x_dbgmcu.h
"

45 
	#IDCODE_DEVID_Mask
 ((
uöt32_t
)0x00000FFF)

	)

83 
uöt32_t
 
	$DBGMCU_GëREVID
()

85 (
DBGMCU
->
IDCODE
 >> 16);

86 
	}
}

93 
uöt32_t
 
	$DBGMCU_GëDEVID
()

95 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_Mask
);

96 
	}
}

133 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

139 i‡(
NewSèã
 !
DISABLE
)

141 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

145 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

147 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c

22 
	~"°m32f10x_dma.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CCR_ENABLE_Së
 ((
uöt32_t
)0x00000001)

	)

47 
	#CCR_ENABLE_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

50 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

51 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

52 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

53 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

54 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

55 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)0x00F00000)

	)

56 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)0x0F000000)

	)

59 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

60 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

61 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

62 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

63 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

66 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

69 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

110 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

113 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

115 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
CCR_ENABLE_Së
;

308 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

352 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

355 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

357  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

358 
	}
}

414 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
tm¥eg
 = 0;

419 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

422 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

425 
tm¥eg
 = 
DMA2
->
ISR
 ;

430 
tm¥eg
 = 
DMA1
->
ISR
 ;

434 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

437 
bô°©us
 = 
SET
;

442 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

503 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
)

506 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

509 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

512 
DMA2
->
IFCR
 = 
DMA_FLAG
;

517 
DMA1
->
IFCR
 = 
DMA_FLAG
;

519 
	}
}

575 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMA_IT
)

577 
ITSètus
 
bô°©us
 = 
RESET
;

578 
uöt32_t
 
tm¥eg
 = 0;

580 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

583 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

586 
tm¥eg
 = 
DMA2
->
ISR
 ;

591 
tm¥eg
 = 
DMA1
->
ISR
 ;

595 i‡((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
)

598 
bô°©us
 = 
SET
;

603 
bô°©us
 = 
RESET
;

606  
bô°©us
;

607 
	}
}

663 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
)

666 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

669 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

672 
DMA2
->
IFCR
 = 
DMA_IT
;

677 
DMA1
->
IFCR
 = 
DMA_IT
;

679 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c

22 
	~"°m32f10x_exti.h
"

45 
	#EXTI_LöeN⁄e
 ((
uöt32_t
)0x00000Ë

	)

84 
	$EXTI_DeInô
()

86 
EXTI
->
IMR
 = 0x00000000;

87 
EXTI
->
EMR
 = 0x00000000;

88 
EXTI
->
RTSR
 = 0x00000000;

89 
EXTI
->
FTSR
 = 0x00000000;

90 
EXTI
->
PR
 = 0x000FFFFF;

91 
	}
}

100 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

102 
uöt32_t
 
tmp
 = 0;

105 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

106 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

107 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

110 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

112 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

115 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

116 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

118 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

120 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

123 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

127 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

130 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

131 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

136 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

138 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

146 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
	}
}

156 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

158 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LöeN⁄e
;

159 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

160 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

161 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

162 
	}
}

170 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

173 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

175 
EXTI
->
SWIER
 |
EXTI_Löe
;

176 
	}
}

185 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

187 
FœgSètus
 
bô°©us
 = 
RESET
;

189 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

191 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

193 
bô°©us
 = 
SET
;

197 
bô°©us
 = 
RESET
;

199  
bô°©us
;

200 
	}
}

208 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

211 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

213 
EXTI
->
PR
 = 
EXTI_Löe
;

214 
	}
}

223 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

225 
ITSètus
 
bô°©us
 = 
RESET
;

226 
uöt32_t
 
íabÀ°©us
 = 0;

228 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

230 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

231 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

233 
bô°©us
 = 
SET
;

237 
bô°©us
 = 
RESET
;

239  
bô°©us
;

240 
	}
}

248 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

251 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

253 
EXTI
->
PR
 = 
EXTI_Löe
;

254 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c

22 
	~"°m32f10x_Êash.h
"

46 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

47 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

48 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

51 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

54 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

55 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

56 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

57 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

58 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

59 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

60 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

61 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

62 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

63 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

64 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

65 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

68 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

69 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

70 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

71 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

72 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

73 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

76 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

77 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

78 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

81 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

84 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

85 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

253 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

255 
uöt32_t
 
tm¥eg
 = 0;

258 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

261 
tm¥eg
 = 
FLASH
->
ACR
;

264 
tm¥eg
 &
ACR_LATENCY_Mask
;

265 
tm¥eg
 |
FLASH_L©ícy
;

268 
FLASH
->
ACR
 = 
tm¥eg
;

269 
	}
}

280 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

283 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

286 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

287 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

288 
	}
}

299 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

302 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

305 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

306 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

307 
	}
}

318 
	$FLASH_U∆ock
()

321 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

322 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

324 #ifde‡
STM32F10X_XL


326 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

327 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

329 
	}
}

339 
	$FLASH_U∆ockB™k1
()

342 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

343 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

344 
	}
}

346 #ifde‡
STM32F10X_XL


353 
	$FLASH_U∆ockB™k2
()

356 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

357 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

359 
	}
}

371 
	$FLASH_Lock
()

374 
FLASH
->
CR
 |
CR_LOCK_Së
;

376 #ifde‡
STM32F10X_XL


378 
FLASH
->
CR2
 |
CR_LOCK_Së
;

380 
	}
}

391 
	$FLASH_LockB™k1
()

394 
FLASH
->
CR
 |
CR_LOCK_Së
;

395 
	}
}

397 #ifde‡
STM32F10X_XL


404 
	$FLASH_LockB™k2
()

407 
FLASH
->
CR2
 |
CR_LOCK_Së
;

408 
	}
}

418 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

420 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

422 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

424 #ifde‡
STM32F10X_XL


425 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

428 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

429 if(
°©us
 =
FLASH_COMPLETE
)

432 
FLASH
->
CR
|
CR_PER_Së
;

433 
FLASH
->
AR
 = 
Page_Addªss
;

434 
FLASH
->
CR
|
CR_STRT_Së
;

437 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

438 if(
°©us
 !
FLASH_TIMEOUT
)

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

448 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

449 if(
°©us
 =
FLASH_COMPLETE
)

452 
FLASH
->
CR2
|
CR_PER_Së
;

453 
FLASH
->
AR2
 = 
Page_Addªss
;

454 
FLASH
->
CR2
|
CR_STRT_Së
;

457 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

458 if(
°©us
 !
FLASH_TIMEOUT
)

461 
FLASH
->
CR2
 &
CR_PER_Re£t
;

467 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

469 if(
°©us
 =
FLASH_COMPLETE
)

472 
FLASH
->
CR
|
CR_PER_Së
;

473 
FLASH
->
AR
 = 
Page_Addªss
;

474 
FLASH
->
CR
|
CR_STRT_Së
;

477 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

478 if(
°©us
 !
FLASH_TIMEOUT
)

481 
FLASH
->
CR
 &
CR_PER_Re£t
;

487  
°©us
;

488 
	}
}

497 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

499 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

501 #ifde‡
STM32F10X_XL


503 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

505 if(
°©us
 =
FLASH_COMPLETE
)

508 
FLASH
->
CR
 |
CR_MER_Së
;

509 
FLASH
->
CR
 |
CR_STRT_Së
;

512 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

513 if(
°©us
 !
FLASH_TIMEOUT
)

516 
FLASH
->
CR
 &
CR_MER_Re£t
;

519 if(
°©us
 =
FLASH_COMPLETE
)

522 
FLASH
->
CR2
 |
CR_MER_Së
;

523 
FLASH
->
CR2
 |
CR_STRT_Së
;

526 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 !
FLASH_TIMEOUT
)

530 
FLASH
->
CR2
 &
CR_MER_Re£t
;

535 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

536 if(
°©us
 =
FLASH_COMPLETE
)

539 
FLASH
->
CR
 |
CR_MER_Së
;

540 
FLASH
->
CR
 |
CR_STRT_Së
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

544 if(
°©us
 !
FLASH_TIMEOUT
)

547 
FLASH
->
CR
 &
CR_MER_Re£t
;

553  
°©us
;

554 
	}
}

566 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

568 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

570 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

572 if(
°©us
 =
FLASH_COMPLETE
)

575 
FLASH
->
CR
 |
CR_MER_Së
;

576 
FLASH
->
CR
 |
CR_STRT_Së
;

579 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

580 if(
°©us
 !
FLASH_TIMEOUT
)

583 
FLASH
->
CR
 &
CR_MER_Re£t
;

587  
°©us
;

588 
	}
}

590 #ifde‡
STM32F10X_XL


598 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

600 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

602 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

604 if(
°©us
 =
FLASH_COMPLETE
)

607 
FLASH
->
CR2
 |
CR_MER_Së
;

608 
FLASH
->
CR2
 |
CR_STRT_Së
;

611 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

612 if(
°©us
 !
FLASH_TIMEOUT
)

615 
FLASH
->
CR2
 &
CR_MER_Re£t
;

619  
°©us
;

620 
	}
}

631 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

633 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

635 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

638 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

640 
rd±mp
 = 0x00;

644 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

645 if(
°©us
 =
FLASH_COMPLETE
)

648 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

649 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

652 
FLASH
->
CR
 |
CR_OPTER_Së
;

653 
FLASH
->
CR
 |
CR_STRT_Së
;

655 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

657 if(
°©us
 =
FLASH_COMPLETE
)

660 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

663 
FLASH
->
CR
 |
CR_OPTPG_Së
;

665 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

667 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

669 if(
°©us
 !
FLASH_TIMEOUT
)

672 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

677 i‡(
°©us
 !
FLASH_TIMEOUT
)

680 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

685  
°©us
;

686 
	}
}

696 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

698 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

699 
__IO
 
uöt32_t
 
tmp
 = 0;

702 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

704 #ifde‡
STM32F10X_XL


705 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

708 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

709 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 |
CR_PG_Së
;

715 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

717 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

719 if(
°©us
 =
FLASH_COMPLETE
)

723 
tmp
 = 
Addªss
 + 2;

725 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

728 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 !
FLASH_TIMEOUT
)

733 
FLASH
->
CR
 &
CR_PG_Re£t
;

738 i‡(
°©us
 !
FLASH_TIMEOUT
)

741 
FLASH
->
CR
 &
CR_PG_Re£t
;

746 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

749 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

751 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 |
CR_PG_Së
;

757 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

760 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

762 if(
°©us
 !
FLASH_TIMEOUT
)

765 
FLASH
->
CR
 &
CR_PG_Re£t
;

770 i‡(
°©us
 !
FLASH_TIMEOUT
)

773 
FLASH
->
CR
 &
CR_PG_Re£t
;

778 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

780 if(
°©us
 =
FLASH_COMPLETE
)

784 
FLASH
->
CR2
 |
CR_PG_Së
;

785 
tmp
 = 
Addªss
 + 2;

787 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

790 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

792 if(
°©us
 !
FLASH_TIMEOUT
)

795 
FLASH
->
CR2
 &
CR_PG_Re£t
;

800 i‡(
°©us
 !
FLASH_TIMEOUT
)

803 
FLASH
->
CR2
 &
CR_PG_Re£t
;

810 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

812 if(
°©us
 =
FLASH_COMPLETE
)

816 
FLASH
->
CR2
 |
CR_PG_Së
;

818 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

820 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

822 if(
°©us
 =
FLASH_COMPLETE
)

826 
tmp
 = 
Addªss
 + 2;

828 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

831 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

833 if(
°©us
 !
FLASH_TIMEOUT
)

836 
FLASH
->
CR2
 &
CR_PG_Re£t
;

841 i‡(
°©us
 !
FLASH_TIMEOUT
)

844 
FLASH
->
CR2
 &
CR_PG_Re£t
;

851 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

853 if(
°©us
 =
FLASH_COMPLETE
)

857 
FLASH
->
CR
 |
CR_PG_Së
;

859 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

861 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

863 if(
°©us
 =
FLASH_COMPLETE
)

867 
tmp
 = 
Addªss
 + 2;

869 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

872 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

874 if(
°©us
 !
FLASH_TIMEOUT
)

877 
FLASH
->
CR
 &
CR_PG_Re£t
;

882 i‡(
°©us
 !
FLASH_TIMEOUT
)

885 
FLASH
->
CR
 &
CR_PG_Re£t
;

892  
°©us
;

893 
	}
}

903 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

905 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

907 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

909 #ifde‡
STM32F10X_XL


911 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

913 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

915 if(
°©us
 =
FLASH_COMPLETE
)

918 
FLASH
->
CR
 |
CR_PG_Së
;

920 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

922 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

923 if(
°©us
 !
FLASH_TIMEOUT
)

926 
FLASH
->
CR
 &
CR_PG_Re£t
;

932 if(
°©us
 =
FLASH_COMPLETE
)

935 
FLASH
->
CR2
 |
CR_PG_Së
;

937 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

939 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

940 if(
°©us
 !
FLASH_TIMEOUT
)

943 
FLASH
->
CR2
 &
CR_PG_Re£t
;

949 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

951 if(
°©us
 =
FLASH_COMPLETE
)

954 
FLASH
->
CR
 |
CR_PG_Së
;

956 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

958 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

959 if(
°©us
 !
FLASH_TIMEOUT
)

962 
FLASH
->
CR
 &
CR_PG_Re£t
;

968  
°©us
;

969 
	}
}

980 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

982 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

984 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

985 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

987 if(
°©us
 =
FLASH_COMPLETE
)

990 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

991 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

993 
FLASH
->
CR
 |
CR_OPTPG_Së
;

994 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

997 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

998 if(
°©us
 !
FLASH_TIMEOUT
)

1001 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1005  
°©us
;

1006 
	}
}

1026 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

1028 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

1030 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1033 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

1035 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

1036 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

1037 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

1038 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

1039 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

1042 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1044 if(
°©us
 =
FLASH_COMPLETE
)

1047 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1048 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1049 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1050 if(
WRP0_D©a
 != 0xFF)

1052 
OB
->
WRP0
 = 
WRP0_D©a
;

1055 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1057 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1059 
OB
->
WRP1
 = 
WRP1_D©a
;

1062 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1064 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1066 
OB
->
WRP2
 = 
WRP2_D©a
;

1069 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1072 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1074 
OB
->
WRP3
 = 
WRP3_D©a
;

1077 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1080 if(
°©us
 !
FLASH_TIMEOUT
)

1083 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1087  
°©us
;

1088 
	}
}

1100 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1105 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1106 if(
°©us
 =
FLASH_COMPLETE
)

1109 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1110 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1111 
FLASH
->
CR
 |
CR_OPTER_Së
;

1112 
FLASH
->
CR
 |
CR_STRT_Së
;

1114 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1115 if(
°©us
 =
FLASH_COMPLETE
)

1118 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1120 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1121 if(
NewSèã
 !
DISABLE
)

1123 
OB
->
RDP
 = 0x00;

1127 
OB
->
RDP
 = 
RDP_Key
;

1130 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1132 if(
°©us
 !
FLASH_TIMEOUT
)

1135 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1140 if(
°©us
 !
FLASH_TIMEOUT
)

1143 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1148  
°©us
;

1149 
	}
}

1169 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1171 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1174 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1175 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1176 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1179 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1180 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1183 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1185 if(
°©us
 =
FLASH_COMPLETE
)

1188 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1190 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1193 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1194 if(
°©us
 !
FLASH_TIMEOUT
)

1197 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1201  
°©us
;

1202 
	}
}

1204 #ifde‡
STM32F10X_XL


1223 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1225 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1226 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1228 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1229 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1232 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1234 if(
°©us
 =
FLASH_COMPLETE
)

1237 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1239 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1241 
OB
->
USER
 |
OB_USER_BFB2
;

1245 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1248 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1249 if(
°©us
 !
FLASH_TIMEOUT
)

1252 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1256  
°©us
;

1257 
	}
}

1267 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1270  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1271 
	}
}

1279 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1282  (
uöt32_t
)(
FLASH
->
WRPR
);

1283 
	}
}

1291 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1293 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1294 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1296 
ªadout°©us
 = 
SET
;

1300 
ªadout°©us
 = 
RESET
;

1302  
ªadout°©us
;

1303 
	}
}

1311 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1313 
FœgSètus
 
bô°©us
 = 
RESET
;

1315 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1317 
bô°©us
 = 
SET
;

1321 
bô°©us
 = 
RESET
;

1324  
bô°©us
;

1325 
	}
}

1341 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1343 #ifde‡
STM32F10X_XL


1345 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1348 if((
FLASH_IT
 & 0x80000000) != 0x0)

1350 if(
NewSèã
 !
DISABLE
)

1353 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1358 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1363 if(
NewSèã
 !
DISABLE
)

1366 
FLASH
->
CR
 |
FLASH_IT
;

1371 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1376 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1379 if(
NewSèã
 !
DISABLE
)

1382 
FLASH
->
CR
 |
FLASH_IT
;

1387 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1390 
	}
}

1408 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1410 
FœgSètus
 
bô°©us
 = 
RESET
;

1412 #ifde‡
STM32F10X_XL


1414 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1415 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1417 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1419 
bô°©us
 = 
SET
;

1423 
bô°©us
 = 
RESET
;

1428 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1430 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1432 
bô°©us
 = 
SET
;

1436 
bô°©us
 = 
RESET
;

1441 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1443 
bô°©us
 = 
SET
;

1447 
bô°©us
 = 
RESET
;

1453 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1454 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1456 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1458 
bô°©us
 = 
SET
;

1462 
bô°©us
 = 
RESET
;

1467 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1469 
bô°©us
 = 
SET
;

1473 
bô°©us
 = 
RESET
;

1479  
bô°©us
;

1480 
	}
}

1494 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1496 #ifde‡
STM32F10X_XL


1498 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1500 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1503 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1508 
FLASH
->
SR
 = 
FLASH_FLAG
;

1513 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1516 
FLASH
->
SR
 = 
FLASH_FLAG
;

1518 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1540 
Êash°©us
 = 
FLASH_ERROR_PG
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1546 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1550 
Êash°©us
 = 
FLASH_COMPLETE
;

1555  
Êash°©us
;

1556 
	}
}

1566 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1568 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1570 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1572 
Êash°©us
 = 
FLASH_BUSY
;

1576 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1578 
Êash°©us
 = 
FLASH_ERROR_PG
;

1582 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1584 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1588 
Êash°©us
 = 
FLASH_COMPLETE
;

1593  
Êash°©us
;

1594 
	}
}

1596 #ifde‡
STM32F10X_XL


1604 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1606 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1608 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1610 
Êash°©us
 = 
FLASH_BUSY
;

1614 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1616 
Êash°©us
 = 
FLASH_ERROR_PG
;

1620 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1622 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1626 
Êash°©us
 = 
FLASH_COMPLETE
;

1631  
Êash°©us
;

1632 
	}
}

1646 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1648 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1651 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1653 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1655 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1656 
Timeout
--;

1658 if(
Timeout
 == 0x00 )

1660 
°©us
 = 
FLASH_TIMEOUT
;

1663  
°©us
;

1664 
	}
}

1674 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1676 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1679 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1681 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1683 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1684 
Timeout
--;

1686 if(
Timeout
 == 0x00 )

1688 
°©us
 = 
FLASH_TIMEOUT
;

1691  
°©us
;

1692 
	}
}

1694 #ifde‡
STM32F10X_XL


1702 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1704 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1707 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1709 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1711 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1712 
Timeout
--;

1714 if(
Timeout
 == 0x00 )

1716 
°©us
 = 
FLASH_TIMEOUT
;

1719  
°©us
;

1720 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c

22 
	~"°m32f10x_fsmc.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

49 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

50 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

53 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

54 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

55 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

56 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

57 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

101 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

104 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

107 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

109 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

114 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

116 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

117 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

118 
	}
}

128 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

131 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

133 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

136 
FSMC_B™k2
->
PCR2
 = 0x00000018;

137 
FSMC_B™k2
->
SR2
 = 0x00000040;

138 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

139 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

145 
FSMC_B™k3
->
PCR3
 = 0x00000018;

146 
FSMC_B™k3
->
SR3
 = 0x00000040;

147 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

148 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

150 
	}
}

157 
	$FSMC_PCCARDDeInô
()

160 
FSMC_B™k4
->
PCR4
 = 0x00000018;

161 
FSMC_B™k4
->
SR4
 = 0x00000000;

162 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

163 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

165 
	}
}

175 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

178 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

179 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

182 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

183 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

184 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

188 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

190 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

191 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

192 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

194 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

195 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

196 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

199 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

200 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

201 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

202 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

211 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

213 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

216 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

217 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

218 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

219 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

223 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

227 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

229 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

230 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

231 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

232 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

233 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

234 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

235 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

236 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

237 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

238 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

239 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

240 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

245 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

247 
	}
}

256 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

258 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

261 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

262 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

263 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

264 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

265 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

266 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

267 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

268 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

269 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

270 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

271 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

272 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

273 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

279 
PCR_Mem‹yTy≥_NAND
 |

280 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

281 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

282 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

283 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

284 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

287 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

288 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

289 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

290 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

293 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

298 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

301 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

302 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

303 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

308 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

309 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

310 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

312 
	}
}

321 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

324 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

325 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

326 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

328 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

329 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

330 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

331 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

334 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

339 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

343 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

344 
FSMC_Mem‹yD©aWidth_16b
 |

345 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

346 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

349 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

350 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

351 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

355 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

356 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

361 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

362 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

365 
	}
}

373 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

376 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

377 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

378 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

379 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

380 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

381 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

382 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

402 
	}
}

410 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

413 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

414 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

415 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

416 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

417 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

418 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

419 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

420 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

421 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

422 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

423 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

424 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

425 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

426 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

427 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

428 
	}
}

436 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

439 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

440 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

441 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

442 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

443 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

444 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

445 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

446 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

447 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
	}
}

467 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

469 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

470 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

472 i‡(
NewSèã
 !
DISABLE
)

475 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

480 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

482 
	}
}

493 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

503 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

507 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

513 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

515 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

519 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

522 
	}
}

530 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 i‡(
NewSèã
 !
DISABLE
)

537 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

542 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

544 
	}
}

556 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(
NewSèã
 !
DISABLE
)

564 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

566 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

570 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

576 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

578 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

582 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

585 
	}
}

595 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

597 
uöt32_t
 
eccvÆ
 = 0x00000000;

599 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

602 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

607 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

610 (
eccvÆ
);

611 
	}
}

629 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

631 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

632 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

633 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

635 i‡(
NewSèã
 !
DISABLE
)

638 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

640 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

643 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

645 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

650 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

656 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

659 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

662 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

664 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

669 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

672 
	}
}

689 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

691 
FœgSètus
 
bô°©us
 = 
RESET
;

692 
uöt32_t
 
tmp§
 = 0x00000000;

695 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

696 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

698 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

700 
tmp§
 = 
FSMC_B™k2
->
SR2
;

702 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

704 
tmp§
 = 
FSMC_B™k3
->
SR3
;

709 
tmp§
 = 
FSMC_B™k4
->
SR4
;

713 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

715 
bô°©us
 = 
SET
;

719 
bô°©us
 = 
RESET
;

722  
bô°©us
;

723 
	}
}

739 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

742 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

743 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

745 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

747 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

749 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

751 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

756 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

758 
	}
}

774 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

776 
ITSètus
 
bô°©us
 = 
RESET
;

777 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

780 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

781 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

783 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

785 
tmp§
 = 
FSMC_B™k2
->
SR2
;

787 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

789 
tmp§
 = 
FSMC_B™k3
->
SR3
;

794 
tmp§
 = 
FSMC_B™k4
->
SR4
;

797 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

799 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

800 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

802 
bô°©us
 = 
SET
;

806 
bô°©us
 = 
RESET
;

808  
bô°©us
;

809 
	}
}

825 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

828 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

829 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

831 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

833 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

835 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

837 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

842 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

844 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c

22 
	~"°m32f10x_gpio.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

52 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

53 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

54 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

59 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

60 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

61 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

64 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

65 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

66 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

67 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

68 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

69 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

107 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

110 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

112 i‡(
GPIOx
 =
GPIOA
)

114 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

117 i‡(
GPIOx
 =
GPIOB
)

119 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

122 i‡(
GPIOx
 =
GPIOC
)

124 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

127 i‡(
GPIOx
 =
GPIOD
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

132 i‡(
GPIOx
 =
GPIOE
)

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOF
)

139 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

144 i‡(
GPIOx
 =
GPIOG
)

146 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

150 
	}
}

158 
	$GPIO_AFIODeInô
()

160 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

162 
	}
}

172 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

174 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

175 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

177 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

178 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

179 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

182 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

183 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

186 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

188 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

192 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

194 
tm¥eg
 = 
GPIOx
->
CRL
;

195 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

197 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

199 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

200 i‡(
cuºíçö
 =
pos
)

202 
pos
 = 
pöpos
 << 2;

204 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

205 
tm¥eg
 &~
pömask
;

207 
tm¥eg
 |(
cuºítmode
 << 
pos
);

209 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

211 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

216 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

218 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

223 
GPIOx
->
CRL
 = 
tm¥eg
;

227 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

229 
tm¥eg
 = 
GPIOx
->
CRH
;

230 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

232 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

234 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

235 i‡(
cuºíçö
 =
pos
)

237 
pos
 = 
pöpos
 << 2;

239 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

240 
tm¥eg
 &~
pömask
;

242 
tm¥eg
 |(
cuºítmode
 << 
pos
);

244 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

246 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

249 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

251 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

255 
GPIOx
->
CRH
 = 
tm¥eg
;

257 
	}
}

265 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

268 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

269 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

270 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

271 
	}
}

280 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

282 
uöt8_t
 
bô°©us
 = 0x00;

285 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

286 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

288 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

290 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

294 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

296  
bô°©us
;

297 
	}
}

304 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

307 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

309  ((
uöt16_t
)
GPIOx
->
IDR
);

310 
	}
}

319 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

321 
uöt8_t
 
bô°©us
 = 0x00;

323 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

324 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

326 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

328 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

332 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

334  
bô°©us
;

335 
	}
}

342 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

345 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

347  ((
uöt16_t
)
GPIOx
->
ODR
);

348 
	}
}

357 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

360 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

361 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

363 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

364 
	}
}

373 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

376 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

377 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

379 
GPIOx
->
BRR
 = 
GPIO_Pö
;

380 
	}
}

393 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

396 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

398 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

400 i‡(
BôVÆ
 !
Bô_RESET
)

402 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

406 
GPIOx
->
BRR
 = 
GPIO_Pö
;

408 
	}
}

416 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

419 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

421 
GPIOx
->
ODR
 = 
P‹tVÆ
;

422 
	}
}

431 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

433 
uöt32_t
 
tmp
 = 0x00010000;

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
tmp
 |
GPIO_Pö
;

441 
GPIOx
->
LCKR
 = 
tmp
;

443 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

445 
GPIOx
->
LCKR
 = 
tmp
;

447 
tmp
 = 
GPIOx
->
LCKR
;

449 
tmp
 = 
GPIOx
->
LCKR
;

450 
	}
}

461 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

463 
uöt32_t
 
tm¥eg
 = 0x00;

465 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

466 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

468 
tm¥eg
 = 
AFIO
->
EVCR
;

470 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

471 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

472 
tm¥eg
 |
GPIO_PöSour˚
;

473 
AFIO
->
EVCR
 = 
tm¥eg
;

474 
	}
}

482 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

488 
	}
}

541 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

543 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

546 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

547 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

551 
tm¥eg
 = 
AFIO
->
MAPR2
;

555 
tm¥eg
 = 
AFIO
->
MAPR
;

558 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

559 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

561 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

563 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

564 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

566 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

568 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

569 
tm¥eg
 &~
tmp1
;

570 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

574 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

575 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

578 i‡(
NewSèã
 !
DISABLE
)

580 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

585 
AFIO
->
MAPR2
 = 
tm¥eg
;

589 
AFIO
->
MAPR
 = 
tm¥eg
;

591 
	}
}

601 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

603 
uöt32_t
 
tmp
 = 0x00;

605 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

606 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

608 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

609 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

610 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

611 
	}
}

622 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

624 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

627 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

628 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c

22 
	~"°m32f10x_i2c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

49 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

52 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

53 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

56 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

57 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

60 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

61 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

64 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

65 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

68 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

69 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

72 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

73 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

76 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

77 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

80 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

81 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

84 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

85 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

88 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

91 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

92 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

95 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

96 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

99 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

102 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

103 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

106 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

107 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

110 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

113 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

116 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

119 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

122 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

161 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

164 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

166 i‡(
I2Cx
 =
I2C1
)

169 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

171 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

178 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

180 
	}
}

190 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

192 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

193 
uöt16_t
 
ªsu…
 = 0x04;

194 
uöt32_t
 
p˛k1
 = 8000000;

195 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

197 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

198 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

199 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

200 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

201 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

202 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

207 
tm¥eg
 = 
I2Cx
->
CR2
;

209 
tm¥eg
 &
CR2_FREQ_Re£t
;

211 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

212 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

214 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

215 
tm¥eg
 |
‰eqønge
;

217 
I2Cx
->
CR2
 = 
tm¥eg
;

221 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

224 
tm¥eg
 = 0;

227 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

230 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

232 i‡(
ªsu…
 < 0x04)

235 
ªsu…
 = 0x04;

238 
tm¥eg
 |
ªsu…
;

240 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

245 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

248 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

253 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

255 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

259 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

262 
ªsu…
 |(
uöt16_t
)0x0001;

265 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

267 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

271 
I2Cx
->
CCR
 = 
tm¥eg
;

273 
I2Cx
->
CR1
 |
CR1_PE_Së
;

277 
tm¥eg
 = 
I2Cx
->
CR1
;

279 
tm¥eg
 &
CR1_CLEAR_Mask
;

283 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

285 
I2Cx
->
CR1
 = 
tm¥eg
;

289 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

290 
	}
}

297 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

301 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

303 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

305 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

307 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

309 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

311 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

312 
	}
}

321 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

324 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

326 i‡(
NewSèã
 !
DISABLE
)

329 
I2Cx
->
CR1
 |
CR1_PE_Së
;

334 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

336 
	}
}

345 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

348 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

349 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

350 i‡(
NewSèã
 !
DISABLE
)

353 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

358 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

360 
	}
}

369 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

372 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

374 i‡(
NewSèã
 !
DISABLE
)

377 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

382 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

384 
	}
}

393 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

397 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

398 i‡(
NewSèã
 !
DISABLE
)

401 
I2Cx
->
CR1
 |
CR1_START_Së
;

406 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

408 
	}
}

417 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

420 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

422 i‡(
NewSèã
 !
DISABLE
)

425 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

430 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

432 
	}
}

441 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

444 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

445 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

446 i‡(
NewSèã
 !
DISABLE
)

449 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

454 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

456 
	}
}

464 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

466 
uöt16_t
 
tm¥eg
 = 0;

469 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

472 
tm¥eg
 = 
I2Cx
->
OAR2
;

475 
tm¥eg
 &
OAR2_ADD2_Re£t
;

478 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

481 
I2Cx
->
OAR2
 = 
tm¥eg
;

482 
	}
}

491 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

495 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

504 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

506 
	}
}

515 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

518 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

519 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

528 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

530 
	}
}

544 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

551 i‡(
NewSèã
 !
DISABLE
)

554 
I2Cx
->
CR2
 |
I2C_IT
;

559 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

561 
	}
}

569 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

572 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

574 
I2Cx
->
DR
 = 
D©a
;

575 
	}
}

582 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

585 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

587  (
uöt8_t
)
I2Cx
->
DR
;

588 
	}
}

600 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

603 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

604 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

606 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

609 
Addªss
 |
OAR1_ADD0_Së
;

614 
Addªss
 &
OAR1_ADD0_Re£t
;

617 
I2Cx
->
DR
 = 
Addªss
;

618 
	}
}

635 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

637 
__IO
 
uöt32_t
 
tmp
 = 0;

640 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

641 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

643 
tmp
 = (
uöt32_t
Ë
I2Cx
;

644 
tmp
 +
I2C_Regi°î
;

647  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

648 
	}
}

657 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

660 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

661 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

662 i‡(
NewSèã
 !
DISABLE
)

665 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

670 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

672 
	}
}

683 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

686 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

687 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

688 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

691 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

696 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

698 
	}
}

707 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

710 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

711 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

712 i‡(
NewSèã
 !
DISABLE
)

715 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

720 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

722 
	}
}

733 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

736 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

737 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

738 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

741 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

746 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

748 
	}
}

757 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

760 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

762 i‡(
NewSèã
 !
DISABLE
)

765 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

770 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

772 
	}
}

779 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

784  ((
I2Cx
->
SR2
) >> 8);

785 
	}
}

794 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

797 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

798 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

799 i‡(
NewSèã
 !
DISABLE
)

802 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

807 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

809 
	}
}

818 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

821 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

822 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

823 i‡(
NewSèã
 =
DISABLE
)

826 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

831 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

833 
	}
}

844 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

847 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

848 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

849 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

852 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

857 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

859 
	}
}

984 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

986 
uöt32_t
 
œ°evít
 = 0;

987 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

988 
Eº‹Sètus
 
°©us
 = 
ERROR
;

991 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

992 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

995 
Êag1
 = 
I2Cx
->
SR1
;

996 
Êag2
 = 
I2Cx
->
SR2
;

997 
Êag2
 = flag2 << 16;

1000 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1003 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1006 
°©us
 = 
SUCCESS
;

1011 
°©us
 = 
ERROR
;

1014  
°©us
;

1015 
	}
}

1032 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1034 
uöt32_t
 
œ°evít
 = 0;

1035 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1038 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049  
œ°evít
;

1050 
	}
}

1087 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1089 
FœgSètus
 
bô°©us
 = 
RESET
;

1090 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1093 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1094 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1097 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1100 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1103 
I2C_FLAG
 &
FLAG_Mask
;

1105 if(
i2¸eg
 != 0)

1108 
i2cxba£
 += 0x14;

1113 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1115 
i2cxba£
 += 0x18;

1118 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1121 
bô°©us
 = 
SET
;

1126 
bô°©us
 = 
RESET
;

1130  
bô°©us
;

1131 
	}
}

1166 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1168 
uöt32_t
 
Êagpos
 = 0;

1170 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1171 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1173 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1175 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1176 
	}
}

1200 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1202 
ITSètus
 
bô°©us
 = 
RESET
;

1203 
uöt32_t
 
íabÀ°©us
 = 0;

1206 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1207 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1210 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1213 
I2C_IT
 &
FLAG_Mask
;

1216 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1219 
bô°©us
 = 
SET
;

1224 
bô°©us
 = 
RESET
;

1227  
bô°©us
;

1228 
	}
}

1261 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1263 
uöt32_t
 
Êagpos
 = 0;

1265 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1266 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1268 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1270 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1271 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c

22 
	~"°m32f10x_iwdg.h
"

48 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

49 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

91 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

94 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

95 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

96 
	}
}

111 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

114 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

115 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

116 
	}
}

124 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

127 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

128 
IWDG
->
RLR
 = 
Rñﬂd
;

129 
	}
}

137 
	$IWDG_RñﬂdCou¡î
()

139 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

140 
	}
}

147 
	$IWDG_E«bÀ
()

149 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

150 
	}
}

160 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

162 
FœgSètus
 
bô°©us
 = 
RESET
;

164 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

165 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

167 
bô°©us
 = 
SET
;

171 
bô°©us
 = 
RESET
;

174  
bô°©us
;

175 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c

22 
	~"°m32f10x_pwr.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

64 
	#EWUP_BôNumbî
 0x08

	)

65 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

70 
	#CR_PDDS_Së
 ((
uöt32_t
)0x00000002)

	)

71 
	#CR_DS_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_CWUF_Së
 ((
uöt32_t
)0x00000004)

	)

73 
	#CR_PLS_Mask
 ((
uöt32_t
)0xFFFFFF1F)

	)

78 
	#SCB_SysCål
 ((
uöt32_t
)0xE000ED10)

	)

81 
	#SysCål_SLEEPDEEP_Së
 ((
uöt32_t
)0x00000004)

	)

82 
	#SysCål_SLEEPDEEP_Re£t
 ((
uöt32_t
)0xFFFFFFFB)

	)

121 
	$PWR_DeInô
()

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

124 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

125 
	}
}

133 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

137 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

138 
	}
}

146 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

149 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

150 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

151 
	}
}

167 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

169 
uöt32_t
 
tm¥eg
 = 0;

171 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

172 
tm¥eg
 = 
PWR
->
CR
;

174 
tm¥eg
 &
CR_PLS_Mask
;

176 
tm¥eg
 |
PWR_PVDLevñ
;

178 
PWR
->
CR
 = 
tm¥eg
;

179 
	}
}

187 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

190 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

206 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

208 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

211 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

214 
tm¥eg
 = 
PWR
->
CR
;

216 
tm¥eg
 &
CR_DS_Mask
;

218 
tm¥eg
 |
PWR_Reguœt‹
;

220 
PWR
->
CR
 = 
tm¥eg
;

222 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

225 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

228 
	`__WFI
();

233 
	`__WFE
();

237 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 &
SysCål_SLEEPDEEP_Re£t
;

238 
	}
}

245 
	$PWR_E¡îSTANDBYMode
()

248 
PWR
->
CR
 |
CR_CWUF_Së
;

250 
PWR
->
CR
 |
CR_PDDS_Së
;

252 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

254 #i‡
	`deföed
 ( 
__CC_ARM
 )

255 
	`__f‹˚_°‹es
();

258 
	`__WFI
();

259 
	}
}

270 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

272 
FœgSètus
 
bô°©us
 = 
RESET
;

274 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

276 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

278 
bô°©us
 = 
SET
;

282 
bô°©us
 = 
RESET
;

285  
bô°©us
;

286 
	}
}

296 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

299 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

301 
PWR
->
CR
 |
PWR_FLAG
 << 2;

302 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c

22 
	~"°m32f10x_rcc.h
"

46 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

52 
	#HSION_BôNumbî
 0x00

	)

53 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

56 
	#PLLON_BôNumbî
 0x18

	)

57 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

59 #ifde‡
STM32F10X_CL


61 
	#PLL2ON_BôNumbî
 0x1A

	)

62 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

65 
	#PLL3ON_BôNumbî
 0x1C

	)

66 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

70 
	#CSSON_BôNumbî
 0x13

	)

71 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

76 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

78 #i‚de‡
STM32F10X_CL


79 
	#USBPRE_BôNumbî
 0x16

	)

80 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

82 
	#OTGFSPRE_BôNumbî
 0x16

	)

83 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

89 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

90 
	#RTCEN_BôNumbî
 0x0F

	)

91 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

94 
	#BDRST_BôNumbî
 0x10

	)

95 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

100 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

101 
	#LSION_BôNumbî
 0x00

	)

102 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

104 #ifde‡
STM32F10X_CL


108 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

109 
	#I2S2SRC_BôNumbî
 0x11

	)

110 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

113 
	#I2S3SRC_BôNumbî
 0x12

	)

114 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

120 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

121 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

122 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

123 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

124 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

127 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

128 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

130 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

133 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

134 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

135 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

136 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

137 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

138 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

139 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

140 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

141 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

142 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

143 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

144 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

145 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

148 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

150 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

152 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

153 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

155 #ifde‡
STM32F10X_CL


156 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

157 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

158 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

162 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

164 #i‚de‡
HSI_VÆue


166 
	#HSI_VÆue
 ((
uöt32_t
)8000000)

	)

170 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

173 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

176 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

179 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

181 #i‚de‡
HSESèπUp_TimeOut


183 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500)

	)

202 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

203 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

226 
	$RCC_DeInô
()

229 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

232 #i‚de‡
STM32F10X_CL


233 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

235 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

239 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

242 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

245 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

247 #ifde‡
STM32F10X_CL


249 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

252 
RCC
->
CIR
 = 0x00FF0000;

255 
RCC
->
CFGR2
 = 0x00000000;

256 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

258 
RCC
->
CIR
 = 0x009F0000;

261 
RCC
->
CFGR2
 = 0x00000000;

264 
RCC
->
CIR
 = 0x009F0000;

267 
	}
}

279 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

282 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

285 
RCC
->
CR
 &
CR_HSEON_Re£t
;

287 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

289 
RCC_HSE
)

291 
RCC_HSE_ON
:

293 
RCC
->
CR
 |
CR_HSEON_Së
;

296 
RCC_HSE_By∑ss
:

298 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

304 
	}
}

313 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

315 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

316 
Eº‹Sètus
 
°©us
 = 
ERROR
;

317 
FœgSètus
 
HSESètus
 = 
RESET
;

322 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

323 
SèπUpCou¡î
++;

324 } (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
Ë&& (
HSESètus
 =
RESET
));

326 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

328 
°©us
 = 
SUCCESS
;

332 
°©us
 = 
ERROR
;

334  (
°©us
);

335 
	}
}

343 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

345 
uöt32_t
 
tm¥eg
 = 0;

347 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

348 
tm¥eg
 = 
RCC
->
CR
;

350 
tm¥eg
 &
CR_HSITRIM_Mask
;

352 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

354 
RCC
->
CR
 = 
tm¥eg
;

355 
	}
}

363 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

366 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

367 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

368 
	}
}

387 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

389 
uöt32_t
 
tm¥eg
 = 0;

392 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

393 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

395 
tm¥eg
 = 
RCC
->
CFGR
;

397 
tm¥eg
 &
CFGR_PLL_Mask
;

399 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

401 
RCC
->
CFGR
 = 
tm¥eg
;

402 
	}
}

410 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

415 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

416 
	}
}

418 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

435 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

437 
uöt32_t
 
tm¥eg
 = 0;

440 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

441 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

443 
tm¥eg
 = 
RCC
->
CFGR2
;

445 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

447 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

449 
RCC
->
CFGR2
 = 
tm¥eg
;

450 
	}
}

453 #ifde‡
STM32F10X_CL


463 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

465 
uöt32_t
 
tm¥eg
 = 0;

468 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

470 
tm¥eg
 = 
RCC
->
CFGR2
;

472 
tm¥eg
 &~
CFGR2_PREDIV2
;

474 
tm¥eg
 |
RCC_PREDIV2_Div
;

476 
RCC
->
CFGR2
 = 
tm¥eg
;

477 
	}
}

488 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

490 
uöt32_t
 
tm¥eg
 = 0;

493 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

495 
tm¥eg
 = 
RCC
->
CFGR2
;

497 
tm¥eg
 &~
CFGR2_PLL2MUL
;

499 
tm¥eg
 |
RCC_PLL2Mul
;

501 
RCC
->
CFGR2
 = 
tm¥eg
;

502 
	}
}

514 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

519 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

520 
	}
}

532 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

534 
uöt32_t
 
tm¥eg
 = 0;

537 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

539 
tm¥eg
 = 
RCC
->
CFGR2
;

541 
tm¥eg
 &~
CFGR2_PLL3MUL
;

543 
tm¥eg
 |
RCC_PLL3Mul
;

545 
RCC
->
CFGR2
 = 
tm¥eg
;

546 
	}
}

555 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

560 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

561 
	}
}

573 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

575 
uöt32_t
 
tm¥eg
 = 0;

577 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

578 
tm¥eg
 = 
RCC
->
CFGR
;

580 
tm¥eg
 &
CFGR_SW_Mask
;

582 
tm¥eg
 |
RCC_SYSCLKSour˚
;

584 
RCC
->
CFGR
 = 
tm¥eg
;

585 
	}
}

596 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

598  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

599 
	}
}

617 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

619 
uöt32_t
 
tm¥eg
 = 0;

621 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

622 
tm¥eg
 = 
RCC
->
CFGR
;

624 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

626 
tm¥eg
 |
RCC_SYSCLK
;

628 
RCC
->
CFGR
 = 
tm¥eg
;

629 
	}
}

643 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

645 
uöt32_t
 
tm¥eg
 = 0;

647 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

648 
tm¥eg
 = 
RCC
->
CFGR
;

650 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

652 
tm¥eg
 |
RCC_HCLK
;

654 
RCC
->
CFGR
 = 
tm¥eg
;

655 
	}
}

669 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

671 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

674 
tm¥eg
 = 
RCC
->
CFGR
;

676 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

678 
tm¥eg
 |
RCC_HCLK
 << 3;

680 
RCC
->
CFGR
 = 
tm¥eg
;

681 
	}
}

709 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 i‡(
NewSèã
 !
DISABLE
)

717 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

722 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

724 
	}
}

726 #i‚de‡
STM32F10X_CL


737 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

740 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

742 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

743 
	}
}

755 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

758 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

760 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

761 
	}
}

775 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

777 
uöt32_t
 
tm¥eg
 = 0;

779 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

780 
tm¥eg
 = 
RCC
->
CFGR
;

782 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

784 
tm¥eg
 |
RCC_PCLK2
;

786 
RCC
->
CFGR
 = 
tm¥eg
;

787 
	}
}

789 #ifde‡
STM32F10X_CL


801 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

804 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

806 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

807 
	}
}

820 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

823 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

825 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

826 
	}
}

838 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

841 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

844 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

846 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

848 
RCC_LSE
)

850 
RCC_LSE_ON
:

852 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

855 
RCC_LSE_By∑ss
:

857 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

863 
	}
}

871 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

874 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

875 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

876 
	}
}

888 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

891 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

893 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

894 
	}
}

902 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

905 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

906 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

907 
	}
}

915 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

917 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

919 #ifde‡ 
STM32F10X_CL


920 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

923 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

924 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

928 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

930 
tmp
)

933 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

936 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
;

941 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

942 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

944 #i‚de‡
STM32F10X_CL


945 
∂lmuŒ
 = (Öllmull >> 18) + 2;

947 i‡(
∂lsour˚
 == 0x00)

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

953 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

954 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

956 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

959 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

961 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

965 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
 * 
∂lmuŒ
;

970 
∂lmuŒ
 =Öllmull >> 18;

972 i‡(
∂lmuŒ
 != 0x0D)

974 
∂lmuŒ
 += 2;

978 
∂lmuŒ
 = 13 / 2;

981 i‡(
∂lsour˚
 == 0x00)

983 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

989 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

990 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

992 i‡(
¥ediv1sour˚
 == 0)

994 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1000 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

1001 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1009 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

1015 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1016 
tmp
 =Åmp >> 4;

1017 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1019 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1021 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1022 
tmp
 =Åmp >> 8;

1023 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1025 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1027 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1028 
tmp
 =Åmp >> 11;

1029 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1031 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1033 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1034 
tmp
 =Åmp >> 14;

1035 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1037 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1038 
	}
}

1071 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1074 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1075 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 i‡(
NewSèã
 !
DISABLE
)

1079 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1083 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1085 
	}
}

1102 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1105 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1109 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1113 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1115 
	}
}

1133 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1136 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1138 i‡(
NewSèã
 !
DISABLE
)

1140 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1144 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1146 
	}
}

1148 #ifde‡
STM32F10X_CL


1160 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1163 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1166 i‡(
NewSèã
 !
DISABLE
)

1168 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1172 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1174 
	}
}

1192 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1195 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1196 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1197 i‡(
NewSèã
 !
DISABLE
)

1199 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1203 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1205 
	}
}

1223 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1226 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1228 i‡(
NewSèã
 !
DISABLE
)

1230 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1234 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1236 
	}
}

1244 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1247 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1248 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1249 
	}
}

1257 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1260 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1261 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1262 
	}
}

1289 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1292 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1295 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1296 
	}
}

1333 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1335 
uöt32_t
 
tmp
 = 0;

1336 
uöt32_t
 
°©u§eg
 = 0;

1337 
FœgSètus
 
bô°©us
 = 
RESET
;

1339 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1342 
tmp
 = 
RCC_FLAG
 >> 5;

1343 i‡(
tmp
 == 1)

1345 
°©u§eg
 = 
RCC
->
CR
;

1347 i‡(
tmp
 == 2)

1349 
°©u§eg
 = 
RCC
->
BDCR
;

1353 
°©u§eg
 = 
RCC
->
CSR
;

1357 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1358 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1360 
bô°©us
 = 
SET
;

1364 
bô°©us
 = 
RESET
;

1368  
bô°©us
;

1369 
	}
}

1378 
	$RCC_CÀ¨Fœg
()

1381 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1382 
	}
}

1409 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1411 
ITSètus
 
bô°©us
 = 
RESET
;

1413 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1416 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1426  
bô°©us
;

1427 
	}
}

1455 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1458 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1462 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1463 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c

22 
	~"°m32f10x_πc.h
"

44 
	#CRL_CNF_Së
 ((
uöt16_t
)0x0010Ë

	)

45 
	#CRL_CNF_Re£t
 ((
uöt16_t
)0xFFEFË

	)

46 
	#RTC_LSB_Mask
 ((
uöt32_t
)0x0000FFFFË

	)

47 
	#PRLH_MSB_Mask
 ((
uöt32_t
)0x000F0000Ë

	)

92 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

95 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

96 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

98 i‡(
NewSèã
 !
DISABLE
)

100 
RTC
->
CRH
 |
RTC_IT
;

104 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

106 
	}
}

113 
	$RTC_E¡îC⁄figMode
()

116 
RTC
->
CRL
 |
CRL_CNF_Së
;

117 
	}
}

124 
	$RTC_ExôC⁄figMode
()

127 
RTC
->
CRL
 &
CRL_CNF_Re£t
;

128 
	}
}

135 
uöt32_t
 
	$RTC_GëCou¡î
()

137 
uöt16_t
 
tmp
 = 0;

138 
tmp
 = 
RTC
->
CNTL
;

139  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

140 
	}
}

147 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

149 
	`RTC_E¡îC⁄figMode
();

151 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

153 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_Mask
);

154 
	`RTC_ExôC⁄figMode
();

155 
	}
}

162 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

165 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

167 
	`RTC_E¡îC⁄figMode
();

169 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_Mask
) >> 16;

171 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_Mask
);

172 
	`RTC_ExôC⁄figMode
();

173 
	}
}

180 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

182 
	`RTC_E¡îC⁄figMode
();

184 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

186 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_Mask
);

187 
	`RTC_ExôC⁄figMode
();

188 
	}
}

195 
uöt32_t
 
	$RTC_GëDividî
()

197 
uöt32_t
 
tmp
 = 0x00;

198 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

199 
tmp
 |
RTC
->
DIVL
;

200  
tmp
;

201 
	}
}

209 
	$RTC_WaôF‹La°Task
()

212 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

215 
	}
}

225 
	$RTC_WaôF‹Synchro
()

228 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

230 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

233 
	}
}

246 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

248 
FœgSètus
 
bô°©us
 = 
RESET
;

251 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

253 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

255 
bô°©us
 = 
SET
;

259 
bô°©us
 = 
RESET
;

261  
bô°©us
;

262 
	}
}

275 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

278 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

281 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

282 
	}
}

293 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

295 
ITSètus
 
bô°©us
 = 
RESET
;

297 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

299 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

300 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

302 
bô°©us
 = 
SET
;

306 
bô°©us
 = 
RESET
;

308  
bô°©us
;

309 
	}
}

320 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

323 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

326 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

327 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c

22 
	~"°m32f10x_sdio.h
"

23 
	~"°m32f10x_rcc.h
"

39 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

44 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

45 
	#CLKEN_BôNumbî
 0x08

	)

46 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

51 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

52 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

53 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

56 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

57 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

60 
	#NIEN_BôNumbî
 0x0D

	)

61 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

64 
	#ATACMD_BôNumbî
 0x0E

	)

65 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

70 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

71 
	#DMAEN_BôNumbî
 0x03

	)

72 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

75 
	#RWSTART_BôNumbî
 0x08

	)

76 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

79 
	#RWSTOP_BôNumbî
 0x09

	)

80 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

83 
	#RWMOD_BôNumbî
 0x0A

	)

84 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

87 
	#SDIOEN_BôNumbî
 0x0B

	)

88 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

95 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

100 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

105 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

110 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

113 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

160 
	$SDIO_DeInô
()

162 
SDIO
->
POWER
 = 0x00000000;

163 
SDIO
->
CLKCR
 = 0x00000000;

164 
SDIO
->
ARG
 = 0x00000000;

165 
SDIO
->
CMD
 = 0x00000000;

166 
SDIO
->
DTIMER
 = 0x00000000;

167 
SDIO
->
DLEN
 = 0x00000000;

168 
SDIO
->
DCTRL
 = 0x00000000;

169 
SDIO
->
ICR
 = 0x00C007FF;

170 
SDIO
->
MASK
 = 0x00000000;

171 
	}
}

180 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

182 
uöt32_t
 
tm¥eg
 = 0;

185 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

188 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

189 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

193 
tm¥eg
 = 
SDIO
->
CLKCR
;

196 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

204 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

205 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

209 
SDIO
->
CLKCR
 = 
tm¥eg
;

210 
	}
}

218 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

221 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

222 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

223 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

224 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

226 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

227 
	}
}

234 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

239 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

240 
	}
}

250 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

253 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

255 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

256 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

257 
	}
}

268 
uöt32_t
 
	$SDIO_GëPowîSèã
()

270  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

271 
	}
}

306 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

310 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

312 i‡(
NewSèã
 !
DISABLE
)

315 
SDIO
->
MASK
 |
SDIO_IT
;

320 
SDIO
->
MASK
 &~
SDIO_IT
;

322 
	}
}

330 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

333 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

335 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

336 
	}
}

345 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

347 
uöt32_t
 
tm¥eg
 = 0;

350 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

351 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

352 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

353 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

357 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

361 
tm¥eg
 = 
SDIO
->
CMD
;

363 
tm¥eg
 &
CMD_CLEAR_MASK
;

368 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


369 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

372 
SDIO
->
CMD
 = 
tm¥eg
;

373 
	}
}

381 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

384 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

385 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

387 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

389 
	}
}

396 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

398  (
uöt8_t
)(
SDIO
->
RESPCMD
);

399 
	}
}

411 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

413 
__IO
 
uöt32_t
 
tmp
 = 0;

416 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

418 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

420  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

421 
	}
}

430 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

432 
uöt32_t
 
tm¥eg
 = 0;

435 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

436 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

437 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

439 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

443 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

447 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

451 
tm¥eg
 = 
SDIO
->
DCTRL
;

453 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

458 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


459 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

462 
SDIO
->
DCTRL
 = 
tm¥eg
;

463 
	}
}

471 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

474 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

477 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

479 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

480 
	}
}

487 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

489  
SDIO
->
DCOUNT
;

490 
	}
}

497 
uöt32_t
 
	$SDIO_RódD©a
()

499  
SDIO
->
FIFO
;

500 
	}
}

507 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

509 
SDIO
->
FIFO
 = 
D©a
;

510 
	}
}

517 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

519  
SDIO
->
FIFOCNT
;

520 
	}
}

528 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

534 
	}
}

542 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

547 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

548 
	}
}

558 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

561 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

563 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

564 
	}
}

572 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

575 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

577 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

578 
	}
}

586 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

591 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

592 
	}
}

600 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

603 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

605 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

606 
	}
}

613 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

619 
	}
}

626 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

632 
	}
}

665 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

667 
FœgSètus
 
bô°©us
 = 
RESET
;

670 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

672 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

678 
bô°©us
 = 
RESET
;

680  
bô°©us
;

681 
	}
}

703 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

706 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

708 
SDIO
->
ICR
 = 
SDIO_FLAG
;

709 
	}
}

742 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

744 
ITSètus
 
bô°©us
 = 
RESET
;

747 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

748 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

750 
bô°©us
 = 
SET
;

754 
bô°©us
 = 
RESET
;

756  
bô°©us
;

757 
	}
}

778 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

781 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

783 
SDIO
->
ICR
 = 
SDIO_IT
;

784 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c

22 
	~"°m32f10x_•i.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

49 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

52 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

53 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

56 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

59 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

60 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

63 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

64 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

67 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

68 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

71 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

72 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

75 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

76 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

77 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

78 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

118 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

121 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

123 i‡(
SPIx
 =
SPI1
)

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

130 i‡(
SPIx
 =
SPI2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

139 i‡(
SPIx
 =
SPI3
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

147 
	}
}

157 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

159 
uöt16_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

165 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

166 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

167 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

168 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

170 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

171 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

172 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

173 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

177 
tm¥eg
 = 
SPIx
->
CR1
;

179 
tm¥eg
 &
CR1_CLEAR_Mask
;

188 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

189 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

190 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

191 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

193 
SPIx
->
CR1
 = 
tm¥eg
;

196 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

200 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

201 
	}
}

218 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

220 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

221 
uöt32_t
 
tmp
 = 0;

222 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

223 
uöt32_t
 
sour˚˛ock
 = 0;

226 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

227 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

228 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

229 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

230 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

231 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

232 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

236 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

237 
SPIx
->
I2SPR
 = 0x0002;

240 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

243 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

245 
i2sodd
 = (
uöt16_t
)0;

246 
i2sdiv
 = (
uöt16_t
)2;

252 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

255 
∑ckëÀngth
 = 1;

260 
∑ckëÀngth
 = 2;

264 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

267 
tmp
 = 
I2S2_CLOCK_SRC
;

272 
tmp
 = 
I2S3_CLOCK_SRC
;

277 #ifde‡
STM32F10X_CL


278 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

281 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

284 if((
tmp
 > 5) && (tmp < 15))

287 
tmp
 += 2;

291 i‡(
tmp
 == 15)

294 
tmp
 = 20;

298 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

301 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

306 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

309 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

313 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

316 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

320 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

323 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

328 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

332 
tmp
 =Åmp / 10;

335 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

338 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

341 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

345 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

348 
i2sdiv
 = 2;

349 
i2sodd
 = 0;

353 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

356 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

357 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

358 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

361 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

362 
	}
}

369 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

373 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

375 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

377 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

379 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

381 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

383 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

385 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

387 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

389 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

390 
	}
}

397 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

401 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

404 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

407 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

410 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

413 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

416 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

417 
	}
}

426 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

429 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

430 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

431 i‡(
NewSèã
 !
DISABLE
)

434 
SPIx
->
CR1
 |
CR1_SPE_Së
;

439 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

441 
	}
}

450 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

453 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

455 i‡(
NewSèã
 !
DISABLE
)

458 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

463 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

465 
	}
}

481 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

483 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

485 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

490 
ôpos
 = 
SPI_I2S_IT
 >> 4;

493 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

495 i‡(
NewSèã
 !
DISABLE
)

498 
SPIx
->
CR2
 |
ômask
;

503 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

505 
	}
}

520 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

523 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

524 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

525 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

526 i‡(
NewSèã
 !
DISABLE
)

529 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

534 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

536 
	}
}

546 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

549 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

552 
SPIx
->
DR
 = 
D©a
;

553 
	}
}

562 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

565 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

568  
SPIx
->
DR
;

569 
	}
}

580 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

583 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

584 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

585 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

588 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

593 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

595 
	}
}

604 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

607 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

609 i‡(
NewSèã
 !
DISABLE
)

612 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

617 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

619 
	}
}

630 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

633 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

634 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

636 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

638 
SPIx
->
CR1
 |
SPI_D©aSize
;

639 
	}
}

646 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

649 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

652 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

653 
	}
}

662 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

665 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

667 i‡(
NewSèã
 !
DISABLE
)

670 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

675 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

677 
	}
}

688 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

690 
uöt16_t
 
¸¸eg
 = 0;

692 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

693 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

694 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

697 
¸¸eg
 = 
SPIx
->
TXCRCR
;

702 
¸¸eg
 = 
SPIx
->
RXCRCR
;

705  
¸¸eg
;

706 
	}
}

713 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

716 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

719  
SPIx
->
CRCPR
;

720 
	}
}

731 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

734 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

735 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

736 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

739 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

744 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

746 
	}
}

765 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

767 
FœgSètus
 
bô°©us
 = 
RESET
;

769 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

770 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

772 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

775 
bô°©us
 = 
SET
;

780 
bô°©us
 = 
RESET
;

783  
bô°©us
;

784 
	}
}

803 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

806 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

807 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

810 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

811 
	}
}

828 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

830 
ITSètus
 
bô°©us
 = 
RESET
;

831 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

834 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

835 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

838 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

841 
ômask
 = 
SPI_I2S_IT
 >> 4;

844 
ômask
 = 0x01 << itmask;

847 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

850 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

853 
bô°©us
 = 
SET
;

858 
bô°©us
 = 
RESET
;

861  
bô°©us
;

862 
	}
}

882 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

884 
uöt16_t
 
ôpos
 = 0;

886 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

887 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

890 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

893 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

894 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c

22 
	~"°m32f10x_tim.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

48 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

49 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

76 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

77 
uöt16_t
 
TIM_ICFûãr
);

78 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

79 
uöt16_t
 
TIM_ICFûãr
);

80 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

81 
uöt16_t
 
TIM_ICFûãr
);

82 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

83 
uöt16_t
 
TIM_ICFûãr
);

121 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

124 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

126 i‡(
TIMx
 =
TIM1
)

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

131 i‡(
TIMx
 =
TIM2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

136 i‡(
TIMx
 =
TIM3
)

138 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

141 i‡(
TIMx
 =
TIM4
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

146 i‡(
TIMx
 =
TIM5
)

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

151 i‡(
TIMx
 =
TIM6
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

156 i‡(
TIMx
 =
TIM7
)

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

161 i‡(
TIMx
 =
TIM8
)

163 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

166 i‡(
TIMx
 =
TIM9
)

168 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

171 i‡(
TIMx
 =
TIM10
)

173 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

176 i‡(
TIMx
 =
TIM11
)

178 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

181 i‡(
TIMx
 =
TIM12
)

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

186 i‡(
TIMx
 =
TIM13
)

188 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

191 i‡(
TIMx
 =
TIM14
)

193 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

196 i‡(
TIMx
 =
TIM15
)

198 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

201 i‡(
TIMx
 =
TIM16
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

208 i‡(
TIMx
 =
TIM17
)

210 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

214 
	}
}

224 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

226 
uöt16_t
 
tmp¸1
 = 0;

229 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

230 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

231 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

233 
tmp¸1
 = 
TIMx
->
CR1
;

235 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

236 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

239 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

240 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

243 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

246 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

247 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

250 
TIMx
->
CR1
 = 
tmp¸1
;

253 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

256 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

258 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

261 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

266 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

267 
	}
}

277 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

279 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

282 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

283 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

284 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

287 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

289 
tmpc˚r
 = 
TIMx
->
CCER
;

291 
tmp¸2
 = 
TIMx
->
CR2
;

294 
tmpccmrx
 = 
TIMx
->
CCMR1
;

297 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

298 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

301 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

304 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

306 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

309 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

311 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

312 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

314 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

315 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

316 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

320 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

322 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

325 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

327 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

330 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

331 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

334 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

339 
TIMx
->
CR2
 = 
tmp¸2
;

342 
TIMx
->
CCMR1
 = 
tmpccmrx
;

345 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

348 
TIMx
->
CCER
 = 
tmpc˚r
;

349 
	}
}

360 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

362 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

365 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

366 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

367 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

370 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

373 
tmpc˚r
 = 
TIMx
->
CCER
;

375 
tmp¸2
 = 
TIMx
->
CR2
;

378 
tmpccmrx
 = 
TIMx
->
CCMR1
;

381 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

382 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

385 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

388 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

390 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

393 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

395 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

397 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

398 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

399 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

403 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

405 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

408 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

410 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

413 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

414 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

417 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

422 
TIMx
->
CR2
 = 
tmp¸2
;

425 
TIMx
->
CCMR1
 = 
tmpccmrx
;

428 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

431 
TIMx
->
CCER
 = 
tmpc˚r
;

432 
	}
}

442 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

444 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

447 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

448 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

449 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

452 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

455 
tmpc˚r
 = 
TIMx
->
CCER
;

457 
tmp¸2
 = 
TIMx
->
CR2
;

460 
tmpccmrx
 = 
TIMx
->
CCMR2
;

463 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

464 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

466 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

469 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

471 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

474 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

476 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

478 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

479 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

480 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

484 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

486 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

488 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

491 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

493 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

494 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

496 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

501 
TIMx
->
CR2
 = 
tmp¸2
;

504 
TIMx
->
CCMR2
 = 
tmpccmrx
;

507 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

510 
TIMx
->
CCER
 = 
tmpc˚r
;

511 
	}
}

521 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

523 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

526 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

527 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

528 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

531 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

534 
tmpc˚r
 = 
TIMx
->
CCER
;

536 
tmp¸2
 = 
TIMx
->
CR2
;

539 
tmpccmrx
 = 
TIMx
->
CCMR2
;

542 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

543 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

546 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

549 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

551 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

554 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

556 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

558 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

560 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

562 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

565 
TIMx
->
CR2
 = 
tmp¸2
;

568 
TIMx
->
CCMR2
 = 
tmpccmrx
;

571 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

574 
TIMx
->
CCER
 = 
tmpc˚r
;

575 
	}
}

585 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

588 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

589 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

590 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

594 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

596 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

598 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

599 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

600 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

602 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

608 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

618 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

634 
	}
}

644 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

646 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

647 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

649 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

651 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

653 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

657 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

660 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

662 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

666 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

668 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

671 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

672 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

674 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

676 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

678 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

683 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

684 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

686 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

688 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

690 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

692 
	}
}

702 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

705 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

706 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

707 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

708 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

709 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

710 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

711 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

714 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

715 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

716 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

717 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

718 
	}
}

726 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

729 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

730 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

731 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

732 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

733 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

734 
	}
}

742 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

745 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

746 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

747 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

748 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

749 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

750 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

751 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

752 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

753 
	}
}

761 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

764 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

765 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

766 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

767 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

768 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

769 
	}
}

777 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

780 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

781 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

782 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

783 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

784 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

785 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

786 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

787 
	}
}

796 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

799 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

800 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

802 i‡(
NewSèã
 !
DISABLE
)

805 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

810 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

812 
	}
}

821 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

824 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

825 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

826 i‡(
NewSèã
 !
DISABLE
)

829 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

834 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

836 
	}
}

862 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

866 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

867 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 !
DISABLE
)

872 
TIMx
->
DIER
 |
TIM_IT
;

877 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

879 
	}
}

899 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

902 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

903 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

906 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

907 
	}
}

927 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

930 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

931 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

932 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

934 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

935 
	}
}

954 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

957 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

958 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

959 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

961 i‡(
NewSèã
 !
DISABLE
)

964 
TIMx
->
DIER
 |
TIM_DMASour˚
;

969 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

971 
	}
}

979 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

982 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

984 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

985 
	}
}

998 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1001 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1002 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1004 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1006 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1007 
	}
}

1025 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1026 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1029 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1030 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1031 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1032 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1034 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1036 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1040 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1043 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1045 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1046 
	}
}

1065 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1066 
uöt16_t
 
ExtTRGFûãr
)

1068 
uöt16_t
 
tmpsm¸
 = 0;

1070 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1071 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1072 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1073 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1075 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1078 
tmpsm¸
 = 
TIMx
->
SMCR
;

1080 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1082 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1084 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1085 
tmpsm¸
 |
TIM_TS_ETRF
;

1087 
TIMx
->
SMCR
 = 
tmpsm¸
;

1088 
	}
}

1107 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1108 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1111 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1113 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1114 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1116 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1118 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1119 
	}
}

1138 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1139 
uöt16_t
 
ExtTRGFûãr
)

1141 
uöt16_t
 
tmpsm¸
 = 0;

1143 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1144 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1145 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1146 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1147 
tmpsm¸
 = 
TIMx
->
SMCR
;

1149 
tmpsm¸
 &
SMCR_ETR_Mask
;

1151 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1153 
TIMx
->
SMCR
 = 
tmpsm¸
;

1154 
	}
}

1166 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1169 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1170 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1172 
TIMx
->
PSC
 = 
PªsˇÀr
;

1174 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1175 
	}
}

1189 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1191 
uöt16_t
 
tmp¸1
 = 0;

1193 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1194 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1195 
tmp¸1
 = 
TIMx
->
CR1
;

1197 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1199 
tmp¸1
 |
TIM_Cou¡îMode
;

1201 
TIMx
->
CR1
 = 
tmp¸1
;

1202 
	}
}

1219 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1221 
uöt16_t
 
tmpsm¸
 = 0;

1223 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1224 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1226 
tmpsm¸
 = 
TIMx
->
SMCR
;

1228 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1230 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1232 
TIMx
->
SMCR
 = 
tmpsm¸
;

1233 
	}
}

1254 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1255 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1257 
uöt16_t
 
tmpsm¸
 = 0;

1258 
uöt16_t
 
tmpccmr1
 = 0;

1259 
uöt16_t
 
tmpc˚r
 = 0;

1262 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1263 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1264 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1265 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1268 
tmpsm¸
 = 
TIMx
->
SMCR
;

1271 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1274 
tmpc˚r
 = 
TIMx
->
CCER
;

1277 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1278 
tmpsm¸
 |
TIM_EncodîMode
;

1281 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1282 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1285 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1286 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1289 
TIMx
->
SMCR
 = 
tmpsm¸
;

1291 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1293 
TIMx
->
CCER
 = 
tmpc˚r
;

1294 
	}
}

1305 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1307 
uöt16_t
 
tmpccmr1
 = 0;

1309 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1310 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1311 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1313 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1315 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1317 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1318 
	}
}

1329 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1331 
uöt16_t
 
tmpccmr1
 = 0;

1333 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1334 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1335 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1337 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1339 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1341 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1342 
	}
}

1353 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1355 
uöt16_t
 
tmpccmr2
 = 0;

1357 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1358 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1359 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1361 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1363 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1365 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1366 
	}
}

1377 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1379 
uöt16_t
 
tmpccmr2
 = 0;

1381 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1382 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1383 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1385 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1387 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1389 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1390 
	}
}

1399 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1402 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1404 i‡(
NewSèã
 !
DISABLE
)

1407 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1412 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1414 
	}
}

1423 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1436 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1438 
	}
}

1448 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1453 i‡(
NewSèã
 !
DISABLE
)

1456 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1461 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1463 
	}
}

1473 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1476 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1477 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1478 i‡(
NewSèã
 !
DISABLE
)

1481 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1486 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1488 
	}
}

1499 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1501 
uöt16_t
 
tmpccmr1
 = 0;

1503 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1504 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1505 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1507 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1509 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1511 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1512 
	}
}

1524 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1526 
uöt16_t
 
tmpccmr1
 = 0;

1528 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1529 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1530 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1532 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1534 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1536 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1537 
	}
}

1548 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1550 
uöt16_t
 
tmpccmr2
 = 0;

1552 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1553 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1554 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1556 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1558 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1560 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1561 
	}
}

1572 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1574 
uöt16_t
 
tmpccmr2
 = 0;

1576 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1577 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1578 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1580 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1582 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1584 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1585 
	}
}

1596 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1598 
uöt16_t
 
tmpccmr1
 = 0;

1600 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1601 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1603 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1605 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1607 
tmpccmr1
 |
TIM_OCFa°
;

1609 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1610 
	}
}

1622 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1624 
uöt16_t
 
tmpccmr1
 = 0;

1626 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1627 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1629 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1631 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1633 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1635 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1636 
	}
}

1647 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1649 
uöt16_t
 
tmpccmr2
 = 0;

1651 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1652 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1654 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1656 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1658 
tmpccmr2
 |
TIM_OCFa°
;

1660 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1661 
	}
}

1672 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1674 
uöt16_t
 
tmpccmr2
 = 0;

1676 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1677 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1679 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1681 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1683 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1685 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1686 
	}
}

1697 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1699 
uöt16_t
 
tmpccmr1
 = 0;

1701 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1702 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1704 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1707 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1709 
tmpccmr1
 |
TIM_OCCÀ¨
;

1711 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1712 
	}
}

1723 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1725 
uöt16_t
 
tmpccmr1
 = 0;

1727 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1728 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1729 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1731 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1733 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1735 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1736 
	}
}

1747 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1749 
uöt16_t
 
tmpccmr2
 = 0;

1751 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1752 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1753 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1755 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1757 
tmpccmr2
 |
TIM_OCCÀ¨
;

1759 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1760 
	}
}

1771 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1773 
uöt16_t
 
tmpccmr2
 = 0;

1775 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1776 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1777 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1779 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1781 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1783 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1784 
	}
}

1795 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1797 
uöt16_t
 
tmpc˚r
 = 0;

1799 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1800 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1801 
tmpc˚r
 = 
TIMx
->
CCER
;

1803 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1804 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1806 
TIMx
->
CCER
 = 
tmpc˚r
;

1807 
	}
}

1818 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1820 
uöt16_t
 
tmpc˚r
 = 0;

1822 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1823 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1825 
tmpc˚r
 = 
TIMx
->
CCER
;

1827 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1828 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1830 
TIMx
->
CCER
 = 
tmpc˚r
;

1831 
	}
}

1842 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1844 
uöt16_t
 
tmpc˚r
 = 0;

1846 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1847 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1848 
tmpc˚r
 = 
TIMx
->
CCER
;

1850 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1851 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1853 
TIMx
->
CCER
 = 
tmpc˚r
;

1854 
	}
}

1865 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1867 
uöt16_t
 
tmpc˚r
 = 0;

1869 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1870 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1872 
tmpc˚r
 = 
TIMx
->
CCER
;

1874 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1875 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1877 
TIMx
->
CCER
 = 
tmpc˚r
;

1878 
	}
}

1889 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1891 
uöt16_t
 
tmpc˚r
 = 0;

1893 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1894 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1895 
tmpc˚r
 = 
TIMx
->
CCER
;

1897 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1898 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1900 
TIMx
->
CCER
 = 
tmpc˚r
;

1901 
	}
}

1912 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1914 
uöt16_t
 
tmpc˚r
 = 0;

1917 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1918 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1920 
tmpc˚r
 = 
TIMx
->
CCER
;

1922 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1923 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1925 
TIMx
->
CCER
 = 
tmpc˚r
;

1926 
	}
}

1937 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1939 
uöt16_t
 
tmpc˚r
 = 0;

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1943 
tmpc˚r
 = 
TIMx
->
CCER
;

1945 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1948 
TIMx
->
CCER
 = 
tmpc˚r
;

1949 
	}
}

1964 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1966 
uöt16_t
 
tmp
 = 0;

1969 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1970 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1971 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1973 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1976 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1979 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1980 
	}
}

1994 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1996 
uöt16_t
 
tmp
 = 0;

1999 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2000 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2001 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2003 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2006 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2009 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2010 
	}
}

2035 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2037 
uöt32_t
 
tmp
 = 0;

2038 
uöt16_t
 
tmp1
 = 0;

2041 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2042 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2043 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2045 
tmp
 = (
uöt32_t
Ë
TIMx
;

2046 
tmp
 +
CCMR_Off£t
;

2048 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2051 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2053 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2055 
tmp
 +(
TIM_Ch™√l
>>1);

2058 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2061 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2065 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2073 
	}
}

2082 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2085 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2086 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2087 i‡(
NewSèã
 !
DISABLE
)

2090 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2095 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2097 
	}
}

2110 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2113 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2114 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2115 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2118 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2123 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2125 
	}
}

2134 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2137 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2139 i‡(
NewSèã
 !
DISABLE
)

2142 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2147 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2149 
	}
}

2160 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2163 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2164 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2166 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2168 
TIMx
->
CR1
 |
TIM_OPMode
;

2169 
	}
}

2192 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2195 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2196 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2198 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2200 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2201 
	}
}

2215 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2218 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2219 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2221 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2223 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2224 
	}
}

2236 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2239 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2240 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2242 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2245 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2246 
	}
}

2254 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2257 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2259 
TIMx
->
CNT
 = 
Cou¡î
;

2260 
	}
}

2268 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2271 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2273 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2274 
	}
}

2282 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2285 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2287 
TIMx
->
CCR1
 = 
Com∑ª1
;

2288 
	}
}

2296 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2299 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2301 
TIMx
->
CCR2
 = 
Com∑ª2
;

2302 
	}
}

2310 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2313 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2315 
TIMx
->
CCR3
 = 
Com∑ª3
;

2316 
	}
}

2324 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2327 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2329 
TIMx
->
CCR4
 = 
Com∑ª4
;

2330 
	}
}

2343 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2346 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2347 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2349 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2351 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2352 
	}
}

2365 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2368 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2369 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2371 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2373 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2374 
	}
}

2387 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2390 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2391 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2393 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2395 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2396 
	}
}

2409 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2412 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2413 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2415 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2417 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2418 
	}
}

2431 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2434 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2435 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2437 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2439 
TIMx
->
CR1
 |
TIM_CKD
;

2440 
	}
}

2447 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2450 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2452  
TIMx
->
CCR1
;

2453 
	}
}

2460 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2463 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2465  
TIMx
->
CCR2
;

2466 
	}
}

2473 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2476 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2478  
TIMx
->
CCR3
;

2479 
	}
}

2486 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2489 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2491  
TIMx
->
CCR4
;

2492 
	}
}

2499 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2502 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2504  
TIMx
->
CNT
;

2505 
	}
}

2512 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2515 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2517  
TIMx
->
PSC
;

2518 
	}
}

2546 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2548 
ITSètus
 
bô°©us
 = 
RESET
;

2550 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2551 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2553 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2555 
bô°©us
 = 
SET
;

2559 
bô°©us
 = 
RESET
;

2561  
bô°©us
;

2562 
	}
}

2590 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2593 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2594 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2597 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2598 
	}
}

2622 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2624 
ITSètus
 
bô°©us
 = 
RESET
;

2625 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2627 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2628 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2630 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2632 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2633 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2635 
bô°©us
 = 
SET
;

2639 
bô°©us
 = 
RESET
;

2641  
bô°©us
;

2642 
	}
}

2666 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2669 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2670 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2672 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2673 
	}
}

2691 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2692 
uöt16_t
 
TIM_ICFûãr
)

2694 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2696 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2697 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2698 
tmpc˚r
 = 
TIMx
->
CCER
;

2700 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2701 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2703 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2704 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2706 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2707 
TIMx
->
CCER
 = 
tmpc˚r
;

2708 
	}
}

2726 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2727 
uöt16_t
 
TIM_ICFûãr
)

2729 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2731 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2732 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2733 
tmpc˚r
 = 
TIMx
->
CCER
;

2734 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2736 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2737 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2738 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2740 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2741 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2743 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2744 
TIMx
->
CCER
 = 
tmpc˚r
;

2745 
	}
}

2763 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2764 
uöt16_t
 
TIM_ICFûãr
)

2766 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2768 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2769 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2770 
tmpc˚r
 = 
TIMx
->
CCER
;

2771 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2773 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2774 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2776 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2777 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2779 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2780 
TIMx
->
CCER
 = 
tmpc˚r
;

2781 
	}
}

2799 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2800 
uöt16_t
 
TIM_ICFûãr
)

2802 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2805 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2806 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2807 
tmpc˚r
 = 
TIMx
->
CCER
;

2808 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2810 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2811 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2812 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2815 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2816 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2818 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2819 
TIMx
->
CCER
 = 
tmpc˚r
;

2820 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c

22 
	~"°m32f10x_ußπ.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

47 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

49 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

51 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

52 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

53 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

54 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

55 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

57 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

58 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

60 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

61 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

62 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

64 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

65 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

67 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

68 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

70 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

71 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

73 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

74 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

76 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

77 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

78 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

79 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

80 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

83 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

84 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

87 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

88 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

128 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

131 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

133 i‡(
USARTx
 =
USART1
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

138 i‡(
USARTx
 =
USART2
)

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

143 i‡(
USARTx
 =
USART3
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

146 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

148 i‡(
USARTx
 =
UART4
)

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

155 i‡(
USARTx
 =
UART5
)

157 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

161 
	}
}

173 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

175 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

176 
uöt32_t
 
öãgîdividî
 = 0x00;

177 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

178 
uöt32_t
 
ußπxba£
 = 0;

179 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

181 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

182 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

183 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

184 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

185 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

186 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

187 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

189 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

191 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

194 
ußπxba£
 = (
uöt32_t
)
USARTx
;

197 
tm¥eg
 = 
USARTx
->
CR2
;

199 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

202 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

205 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

208 
tm¥eg
 = 
USARTx
->
CR1
;

210 
tm¥eg
 &
CR1_CLEAR_Mask
;

215 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

216 
USART_InôSåu˘
->
USART_Mode
;

218 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

221 
tm¥eg
 = 
USARTx
->
CR3
;

223 
tm¥eg
 &
CR3_CLEAR_Mask
;

226 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

228 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

232 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

233 i‡(
ußπxba£
 =
USART1_BASE
)

235 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

239 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

243 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

246 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

251 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

253 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

256 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

259 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

261 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

265 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

269 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

270 
	}
}

278 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

281 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

282 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

283 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

284 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

285 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

286 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

287 
	}
}

299 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

301 
uöt32_t
 
tm¥eg
 = 0x00;

303 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

304 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

305 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

306 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

307 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

310 
tm¥eg
 = 
USARTx
->
CR2
;

312 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

318 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

319 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

321 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

322 
	}
}

330 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

333 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

334 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

335 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

336 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

337 
	}
}

348 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

351 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

352 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

354 i‡(
NewSèã
 !
DISABLE
)

357 
USARTx
->
CR1
 |
CR1_UE_Së
;

362 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

364 
	}
}

385 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

387 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

388 
uöt32_t
 
ußπxba£
 = 0x00;

390 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

391 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

392 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

394 i‡(
USART_IT
 =
USART_IT_CTS
)

396 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

399 
ußπxba£
 = (
uöt32_t
)
USARTx
;

402 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

405 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

406 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

408 i‡(
ußπªg
 == 0x01)

410 
ußπxba£
 += 0x0C;

412 i‡(
ußπªg
 == 0x02)

414 
ußπxba£
 += 0x10;

418 
ußπxba£
 += 0x14;

420 i‡(
NewSèã
 !
DISABLE
)

422 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

426 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

428 
	}
}

444 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

447 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

448 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

449 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

450 i‡(
NewSèã
 !
DISABLE
)

454 
USARTx
->
CR3
 |
USART_DMAReq
;

460 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

462 
	}
}

472 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

475 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

476 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

479 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

481 
USARTx
->
CR2
 |
USART_Addªss
;

482 
	}
}

495 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

498 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

499 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

501 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

502 
USARTx
->
CR1
 |
USART_WakeUp
;

503 
	}
}

514 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
USARTx
->
CR1
 |
CR1_RWU_Së
;

528 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

530 
	}
}

543 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

546 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

547 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

549 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

550 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

551 
	}
}

562 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

565 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

566 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

568 i‡(
NewSèã
 !
DISABLE
)

571 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

576 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

578 
	}
}

588 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

591 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

592 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

595 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

596 
	}
}

605 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

608 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

611  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

612 
	}
}

621 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

624 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

627 
USARTx
->
CR1
 |
CR1_SBK_Së
;

628 
	}
}

637 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

640 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

643 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

645 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

646 
	}
}

657 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

660 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

663 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

665 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

666 
	}
}

676 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

679 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

681 i‡(
NewSèã
 !
DISABLE
)

684 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

689 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

691 
	}
}

701 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

706 i‡(
NewSèã
 !
DISABLE
)

709 
USARTx
->
CR3
 |
CR3_NACK_Së
;

714 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

716 
	}
}

727 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

730 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

731 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

733 i‡(
NewSèã
 !
DISABLE
)

736 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

741 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

743 
	}
}

758 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

761 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

762 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

772 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

774 
	}
}

785 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

788 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

791 i‡(
NewSèã
 !
DISABLE
)

794 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

799 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

801 
	}
}

814 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

817 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

818 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

820 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

821 
USARTx
->
CR3
 |
USART_IrDAMode
;

822 
	}
}

833 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

836 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

837 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

839 i‡(
NewSèã
 !
DISABLE
)

842 
USARTx
->
CR3
 |
CR3_IREN_Së
;

847 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

849 
	}
}

870 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

872 
FœgSètus
 
bô°©us
 = 
RESET
;

874 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

875 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

877 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

879 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

882 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

919 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

922 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

923 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

925 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

927 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

930 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

931 
	}
}

952 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

954 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

955 
ITSètus
 
bô°©us
 = 
RESET
;

957 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

958 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

960 i‡(
USART_IT
 =
USART_IT_CTS
)

962 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

966 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

968 
ômask
 = 
USART_IT
 & 
IT_Mask
;

969 
ômask
 = (
uöt32_t
)0x01 << itmask;

971 i‡(
ußπªg
 == 0x01)

973 
ômask
 &
USARTx
->
CR1
;

975 i‡(
ußπªg
 == 0x02)

977 
ômask
 &
USARTx
->
CR2
;

981 
ômask
 &
USARTx
->
CR3
;

984 
bôpos
 = 
USART_IT
 >> 0x08;

985 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

986 
bôpos
 &
USARTx
->
SR
;

987 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

989 
bô°©us
 = 
SET
;

993 
bô°©us
 = 
RESET
;

996  
bô°©us
;

997 
	}
}

1026 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1028 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1030 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1031 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1033 i‡(
USART_IT
 =
USART_IT_CTS
)

1035 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1038 
bôpos
 = 
USART_IT
 >> 0x08;

1039 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1040 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1041 
	}
}

	@code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c

22 
	~"°m32f10x_wwdg.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

50 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

51 
	#EWI_BôNumbî
 0x09

	)

52 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

57 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

60 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

61 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

62 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

101 
	$WWDG_DeInô
()

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

105 
	}
}

117 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

119 
uöt32_t
 
tm¥eg
 = 0;

121 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

123 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

125 
tm¥eg
 |
WWDG_PªsˇÀr
;

127 
WWDG
->
CFR
 = 
tm¥eg
;

128 
	}
}

136 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

138 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

141 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

144 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

147 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

150 
WWDG
->
CFR
 = 
tm¥eg
;

151 
	}
}

158 
	$WWDG_E«bÀIT
()

160 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

161 
	}
}

169 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

172 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

175 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

176 
	}
}

184 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

187 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

188 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

189 
	}
}

196 
FœgSètus
 
	$WWDG_GëFœgSètus
()

198  (
FœgSètus
)(
WWDG
->
SR
);

199 
	}
}

206 
	$WWDG_CÀ¨Fœg
()

208 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

209 
	}
}

	@code/User/gisunlink.h

13 #i‚de‡
__GISUNLINK_H__


14 
	#__GISUNLINK_H__


	)

16 
	~"°m32f10x.h
"

17 
	~"md5.h
"

18 
	~"gisu∆ök_ty≥.h
"

20 
	#FIRMWARE_VERSION
 "202006072150"

	)

22 #ifde‡
__˝lu•lus


28 
	s_ch¨ge_com
 {

29 vﬁ©ûê
uöt8_t
 
id
;

30 vﬁ©ûê
uöt8_t
 
íabÀ
;

31 vﬁ©ûê
uöt32_t
 
tokí
;

32 vﬁ©ûê
uöt32_t
 
tŸÆ
;

33 vﬁ©ûê
uöt32_t
 
u£d
;

34 vﬁ©ûê
uöt32_t
 
±ime
;

35 vﬁ©ûê
uöt32_t
 
utime
;

36 vﬁ©ûê
uöt32_t
 
max_cuºít
;

37 vﬁ©ûê
uöt32_t
 
cur_cuºít
;

38 vﬁ©ûê
uöt8_t
 
bªakdown
;

39 vﬁ©ûê
uöt8_t
 
bªakdown_time
;

40 vﬁ©ûê
uöt8_t
 
cur_behavi‹
;

41 } 
	tch¨ge_com
, *
	tPch¨ge_com
;

43 
	s_gisu∆ök_c⁄f
{

44 vﬁ©ûê
uöt8_t
 
öô
;

45 vﬁ©ûê
uöt8_t
 
mode
;

46 vﬁ©ûê
uöt8_t
 
fúmw¨e_md5
[
FIRMWARE_MD5_SIZE
];

48 } 
	tgisu∆ök_c⁄f
, *
	tPgisu∆ök_c⁄f
;

51 
	s_gisu∆ök_fúmw¨e_öfo
 {

52 
uöt32_t
 
size
;

53 
uöt8_t
 
md5
[
FIRMWARE_MD5_SIZE
];

54 } 
	tgisu∆ök_fúmw¨e_öfo
;

56 
	s_gisu∆ök_fúmw¨e
 {

57 
MD5_CTX
 
md5
;

58 
uöt8_t
 
md5_dige°
[16];

59 vﬁ©ûê
gisu∆ök_fúmw¨e_öfo
 
öfo
;

60 vﬁ©ûê
uöt16_t
 
å™s„r_off£t
;

61 vﬁ©ûê
uöt8_t
 
å™s„r_timeout
;

62 vﬁ©ûê
uöt8_t
 
å™s„r_°©us
;

63 } 
	tgisu∆ök_fúmw¨e
, *
	tPgisu∆ök_fúmw¨e
;

65 
	s_gisu∆ök_sy°em
 {

66 
uöt8_t
 
devi˚SN
[
STM32_UNIQUEID_SIZE
];

67 vﬁ©ûê
uöt8_t
 
gë_devi˚Sn
;

68 vﬁ©ûê
uöt8_t
 
√tw‹k_c⁄√˘
;

69 vﬁ©ûê
uöt8_t
 
no_lﬂd_time
;

70 vﬁ©ûê
uöt8_t
 
√tw‹k_°©e
;

71 
gisu∆ök_fúmw¨e
 
fúmw¨e
;

72 vﬁ©ûê
uöt8_t
 
po°_tick
;

73 vﬁ©ûê
uöt8_t
 
rouã_w‹k
;

74 vﬁ©ûê
uöt32_t
 
tick
;

75 vﬁ©ûê
uöt32_t
 
ªcvTime
;

76 vﬁ©ûê
uöt32_t
 
°©e_ªcvTime
;

77 vﬁ©ûê
uöt8_t
 
sig«l
;

78 } 
	tgisu∆ök_sy°em
, *
	tPgisu∆ök_sy°em
;

81 
	s_gisu∆ök
 {

82 vﬁ©ûê
uöt8_t
 
sy°em_upd©e_Êag
;

83 vﬁ©ûê
uöt32_t
 
íîgyOff£t
[
MAX_COM_QUANTITY
];

84 vﬁ©ûê
uöt16_t
 
icRe£t
[
MAX_COM_QUANTITY
];

85 vﬁ©ûê
uöt8_t
 
bªakdown_chk
[
MAX_COM_QUANTITY
];

86 
ch¨ge_com
 
comLi°
[
MAX_COM_QUANTITY
];

87 
gisu∆ök_c⁄f
 
c⁄f
;

88 
gisu∆ök_sy°em
 
sy°em
;

89 } 
	tgisu∆ök
, *
	tPgisu∆ök
;

93 
	s_gisu∆ök_‰ame
 {

94 
uöt16_t
 
Àn
;

95 
uöt8_t
 
buf
[
USART_TX_BUFFER_SIZE
];

96 } 
	tgisu∆ök_‰ame
;

99 
	s_gisu∆ök_ªcv_‰ame
 {

100 
uöt8_t
 
mode
;

101 
uöt16_t
 
Àn
;

102 
uöt32_t
 
id
;

103 
uöt8_t
 
dú
;

104 
uöt8_t
 
cmd
;

105 
uöt8_t
 
buf„r
[
USART_RX_BUFFER_SIZE
];

106 
uöt8_t
 *
d©a
;

107 
uöt16_t
 
d©a_Àn
;

108 
uöt16_t
 
chk_sum
;

109 } 
	tgisu∆ök_ªcv_‰ame
;

112 
	s_gisu∆ök_ch¨ge_èsk
 {

113 
uöt8_t
 
id
;

114 
uöt32_t
 
tokí
;

115 
uöt32_t
 
tŸÆ
;

116 
uöt32_t
 
±ime
;

117 
uöt32_t
 
max_cuºít
;

118 } 
	tgisu∆ök_ch¨ge_èsk
;

121 
	s_gisu∆ök_devi˚_°©us
 {

122 
uöt8_t
 
id
;

123 } 
	tgisu∆ök_devi˚_°©us
;

126 
	s_gisu∆ök_°›_ch¨ge_èsk
 {

127 
uöt8_t
 
id
;

128 
uöt32_t
 
tokí
;

129 
uöt8_t
 
f‹˚_°›
;

130 } 
	tgisu∆ök_°›_ch¨ge_èsk
;

133 
	s_gisu∆ök_£t_c⁄fig
 {

134 
uöt8_t
 
Ælow_zîo_bÆ™˚
;

135 } 
	tgisu∆ök_£t_c⁄fig
;

138 
	s_gisu∆ök_devi˚_fúmw¨e_öfo
 {

139 
uöt32_t
 
vîsi⁄
;

140 
uöt32_t
 
size
;

141 
uöt8_t
 *
md5
;

142 } 
	tgisu∆ök_devi˚_fúmw¨e_öfo
;

145 
	s_gisu∆ök_devi˚_fúmw¨e_å™s„r
 {

146 
uöt16_t
 
off£t
;

147 
uöt16_t
 
size
;

148 
uöt8_t
 *
d©a
;

149 } 
	tgisu∆ök_devi˚_fúmw¨e_å™s„r
;

153 
GISUNLINK_COMM_REQ
,

154 
GISUNLINK_COMM_RES
,

155 } 
	tCOMM_TYPE
;

158 
GISUNLINK_NETMANAGER_IDLE
,

159 
GISUNLINK_NETMANAGER_START
,

160 
GISUNLINK_NETMANAGER_CONNECTING
,

161 
GISUNLINK_NETMANAGER_CONNECTED
,

162 
GISUNLINK_NETMANAGER_DISCONNECTED
,

163 
GISUNLINK_NETMANAGER_RECONNECTING
,

164 
GISUNLINK_NETMANAGER_ENT_CONFIG
,

165 
GISUNLINK_NETMANAGER_EXI_CONFIG
,

166 
GISUNLINK_NETMANAGER_SAVE_CONFIG
,

167 
GISUNLINK_NETMANAGER_TIME_SUCCEED
,

168 
GISUNLINK_NETMANAGER_TIME_FAILED
,

169 
GISUNLINK_NETMANAGER_CONNECTED_SER
,

170 
GISUNLINK_NETMANAGER_DISCONNECTED_SER
,

171 
GISUNLINK_NETMANAGER_GSM_CONNECTED
,

172 
GISUNLINK_NETMANAGER_GSM_DISCONNECTED
,

173 
GISUNLINK_NETMANAGER_UNKNOWN


174 } 
	tGISUNLINK_NETMANAGER_WORK_STATE
;

178 
GISUNLINK_NETWORK_STATUS
 = 0x05,

179 
GISUNLINK_NETWORK_RESET
 = 0x06,

180 
GISUNLINK_NETWORK_RSSI
 = 0x07,

182 
GISUNLINK_DEV_FW_INFO
 = 0x08,

183 
GISUNLINK_DEV_FW_TRANS
 = 0x09,

184 
GISUNLINK_DEV_FW_READY
 = 0x0A,

185 
GISUNLINK_DEV_SN
 = 0x0B,

187 
GISUNLINK_TASK_CONTROL
 = 0x0C,

188 
GISUNLINK_HW_SN
 = 0x0D,

189 
GISUNLINK_FIRMWARE_VERSION
 = 0x0E,

190 } 
	tGISUNLINK_MODULE_CMD
;

194 
GISUNLINK_CHARGE_TASK
 = 0x10,

195 
GISUNLINK_DEVIDE_STATUS
 = 0x11,

196 
GISUNLINK_EXIT_CHARGE_TASK
 = 0x12,

197 
GISUNLINK_SET_CONFIG
 = 0x13,

198 
GISUNLINK_RESTART
 = 0x1E,

200 
GISUNLINK_START_CHARGE
 = 0x14,

201 
GISUNLINK_CHARGEING
 = 0x15,

202 
GISUNLINK_CHARGE_FINISH
 = 0x16,

203 
GISUNLINK_CHARGE_LEISURE
 = 0x17,

204 
GISUNLINK_CHARGE_BREAKDOWN
 = 0x18,

205 
GISUNLINK_CHARGE_NO_LOAD
 = 0x19,

206 
GISUNLINK_UPDATE_FIRMWARE
 = 0x1A,

207 
GISUNLINK_COM_UPDATE
 = 0x1B,

208 
GISUNLINK_STOP_CHARGE
 = 0x1C,

209 
GISUNLINK_COM_NO_UPDATE
 = 0x1D,

210 } 
	tGISUNLINK_TASK_CONTROL_SUB_CMD
;

213 
GISUNLINK_TRANSFER_FAILED
 = 0x00,

214 
GISUNLINK_NEED_UPGRADE
 = 0x63,

215 
GISUNLINK_NO_NEED_UPGRADE
 = 0x64,

216 
GISUNLINK_FIRMWARE_CHK_OK
 = 0x89,

217 
GISUNLINK_FIRMWARE_CHK_NO_OK
 = 0x90,

218 
GISUNLINK_DEVICE_TIMEOUT
 = 0xff,

222 
TIMER_UNKNOWN
,

223 
TIMER_10S
,

224 
TIMER_60S
,

225 } 
	tTIMER_TYPE
;

227 #ifde‡
__˝lu•lus


	@code/User/gisunlink_app.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<m©h.h
>

6 
	~"°m32f10x.h
"

7 
	~"°m32f10x_c⁄f.h
"

8 
	~"gisu∆ök_ußπ.h
"

9 
	~"gisu∆ök_sy°em.h
"

10 
	~"gisu∆ök_gpio.h
"

11 
	~"gisu∆ök_lcd.h
"

12 
	~"gisu∆ök_key.h
"

13 
	~"gisu∆ök_timî.h
"

14 
	~"gisu∆ök_ì¥om.h
"

15 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

16 
	~"gisu∆ök_íîgy_mëîög.h
"

18 
	$maö
() {

19 
gisu∆ök
 *
globÆ
 = 
NULL
;

22 
	`gisu∆ök_gpio_c⁄figuøti⁄
();

23 
	`gisu∆ök_key_öô
();

24 
	`gisu∆ök_√tw‹k_moduÀ_öô
(
USE_USART1
);

25 
	`gisu∆ök_debug_ußπ_öô
();

26 
	`gisu∆ök_íîgy_mëîög_Inô
();

27 
	`gisu∆ök_e2¥om_Inô
();

28 
	`gisu∆ök_lcd_öô
();

29 
	`gisu∆ök_timî_öô
();

32 
globÆ
 = 
	`gisu∆ök_sy°em_öô
();

34 
	`gisu∆ök_timî_ªgi°î_po°_d©a
(
gisu∆ök_sy°em_tick_po°_d©a
);

35 
	`gisu∆ök_timî_ªgi°î_èsk_check
(
gisu∆ök_sy°em_ch¨gr_èsk_check
);

36 
	`gisu∆ök_timî_ªgi°î_n‹mÆ_èsk
(
gisu∆ök_sy°em_lcd_ª‰esh
);

37 
	`gisu∆ök_timî_ªgi°î_ˇ±uª_èsk
(
gisu∆ök_sy°em_powîdown
);

39 
	`C≠tuªTimî_CÀ¨ITPídögBô
();

40 
	`C≠tuªTimî_E«bÀ
();

42 
globÆ
->
sy°em
.
ªcvTime
 = 
	`gisu∆ök_sy°em_gë_time_tick
();

45 
	`gisu∆ök_√tw‹k_moduÀ_ªad
(
gisu∆ök_sy°em_√tw‹k_mesßge
);

46 
	`gisu∆ök_sy°em_check_rouã_w‹k
();

47 
	`gisu∆ök_ªad_ªÆtime_mëî_d©a
(
globÆ
);

48 
	`gisu∆ök_key_sˇn
(
globÆ
);

50 
	}
}

	@code/User/gisunlink_app.h

1 #i‚de‡
__GISUNLINK_APP_H


2 
	#__GISUNLINK_APP_H


	)

5 
	~"°m32f10x.h
"

7 
	#USART_DEBUG


	)

8 
	#EM_DEBUG


	)

10 
	#CHARGR_OVER_CURRENT
 50

11 
	#CHK_CURRENT_MA
 5

	)

13 
	#SUCCEED
 0

14 
	#FAILED
 1

15 

	)

16 
	#TURE
 1

17 
	#FALSE
 0

18 

	)

19 
	#TIMER_10SECOND
 10

20 
	#TIMER_60SECOND
 60

21 

	)

22 
	#IS_BREAKDOWN
 1

23 
	#NO_BREAKDOWN
 0

24 

	)

25 
	#IS_ENABLE
 1

26 
	#NO_ENABLE
 0

27 

	)

28 
	#IS_FALLING
 1

29 
	#NO_FALLING
 0

	)

31 
	#SINGLE_RECORD
 1

32 
	#MULTI_RECORD
 
MAX_COM_QUANTITY


33 

	)

35 
	mTIMER_UNKNOWN
,

36 
	mTIMER_10S
,

37 
	mTIMER_60S
,

38 } 
	tTIMER_TYPE
;

40 vﬁ©ûê
uöt8_t
 
ªÆTimeRódD©eFœg
;

41 vﬁ©ûê
uöt32_t
 
íîgyOff£t
[10];

43 vﬁ©ûê
uöt8_t
 
tim500msÊag
;

	@code/User/gisunlink_coms.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~"gisu∆ök_lcd.h
"

16 
	~"gisu∆ök_coms.h
"

17 
	~"gisu∆ök_íîgy_mëîög.h
"

19 
	s_gisu∆ök_com_ch¨ge_chk
 {

20 vﬁ©ûê
uöt32_t
 
	mcuºít
;

21 vﬁ©ûê
uöt32_t
 
	mmax_cuºít
;

22 vﬁ©ûê
uöt32_t
 
	mmö_cuºít
;

23 vﬁ©ûê
uöt8_t
 
	mcou¡
;

24 vﬁ©ûê
uöt8_t
 
	mis_ÁŒög
;

25 vﬁ©ûê
uöt16_t
 
	mÁŒög_cou¡
;

26 } 
	tgisu∆ök_com_ch¨ge_chk
;

28 
gisu∆ök_com_ch¨ge_chk
 
	gcomChkLi°
[
MAX_COM_QUANTITY
] = {0};

29 
uöt8_t
 
	gch¨ge_ovî_time
[
MAX_COM_QUANTITY
] = {0};

32 
	$gisu∆ök_com_ª£t_cuºít
(
ch¨ge_com
 *
com
) {

33 
gisu∆ök_com_ch¨ge_chk
 *
ch¨ge_chk
 = 
comChkLi°
 + 
com
->
id
;

34 
ch¨ge_chk
->
cuºít
 = 0;

35 
ch¨ge_chk
->
cou¡
 = 0;

36 
ch¨ge_chk
->
is_ÁŒög
 = 
NO_FALLING
;

37 
ch¨ge_chk
->
ÁŒög_cou¡
 = 0;

38 
ch¨ge_chk
->
max_cuºít
 = 0;

39 
ch¨ge_chk
->
mö_cuºít
 = 0;

40 
	}
}

42 
	$gisu∆ök_com_ª£t_u£d
(
ch¨ge_com
 *
com
) {

43 
com
->
cur_cuºít
 = 0;

44 
com
->
utime
 = 0;

45 
com
->
u£d
 = 0;

46 
	}
}

49 
	$gisu∆ök_com_ª£t
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, uöt8_à
˛órAŒ
) {

50 
globÆ
->
comLi°
[
comID
].
íabÀ
 = 
NO_ENABLE
;

51 if(
˛órAŒ
) {

52 
globÆ
->
comLi°
[
comID
].
tokí
 = 0;

53 
globÆ
->
comLi°
[
comID
].
tŸÆ
 = 0;

54 
globÆ
->
comLi°
[
comID
].
±ime
 = 0;

55 
globÆ
->
comLi°
[
comID
].
max_cuºít
 = 0;

56 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 0;

57 
globÆ
->
íîgyOff£t
[
comID
] = 0;

59 
	`gisu∆ök_com_ª£t_u£d
(&
globÆ
->
comLi°
[
comID
]);

61 
globÆ
->
icRe£t
[
comID
] = 0;

62 
ch¨ge_ovî_time
[
comID
] = 0;

63 
	`gisu∆ök_com_ª£t_cuºít
(&
globÆ
->
comLi°
[
comID
]);

64 
	}
}

67 
	$gisu∆ök_com_£t
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, 
gisu∆ök_ch¨ge_èsk
 *
ch¨ge_èsk
) {

68 
globÆ
->
comLi°
[
comID
].
tokí
 = 
ch¨ge_èsk
->token;

69 
globÆ
->
comLi°
[
comID
].
tŸÆ
 = 
ch¨ge_èsk
->total;

70 
globÆ
->
comLi°
[
comID
].
±ime
 = 
ch¨ge_èsk
->ptime;

71 
globÆ
->
comLi°
[
comID
].
max_cuºít
 = 
ch¨ge_èsk
->max_current;

72 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 0;

73 
globÆ
->
íîgyOff£t
[
comID
] = 0;

74 
ch¨ge_ovî_time
[
comID
] = 0;

76 
	`gisu∆ök_com_ª£t_u£d
(&
globÆ
->
comLi°
[
comID
]);

77 
	`gisu∆ök_com_ª£t_cuºít
(&
globÆ
->
comLi°
[
comID
]);

78 
	}
}

81 
uöt8_t
 
	$gisu∆ök_com_°¨t_ch¨ge
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
) {

82 
ch¨ge_ovî_time
[
comID
] = 0;

83 if(
	`gisu∆ök_›í_check_ch™√l
(
comID
Ë!
SUCCEED
) {

84 
globÆ
->
comLi°
[
comID
].
bªakdown
 |
OPEN_PORT_FAILED
;

86 
globÆ
->
comLi°
[
comID
].
bªakdown
 &~(
OPEN_PORT_FAILED
);

87  
SUCCEED
;

89  
FAILED
;

90 
	}
}

93 
uöt8_t
 
	$gisu∆ök_com_°›_ch¨ge
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
) {

94 
	`gisu∆ök_˛o£_check_ch™√l
(
comID
);

95 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 =
NO_BREAKDOWN
) {

96 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_LEISURE
);

98  
SUCCEED
;

99 
	}
}

101 
gisu∆ök_com_ch¨grög_°©us_po°
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, (*
Nëw‹kPo°
)(gisu∆ök *globÆ, uöt8_àcomID, uöt8_à
behavi‹
),uöt8_à
nŸe_Êags
) {

102 
	`Nëw‹kPo°
(
globÆ
,
comID
,
nŸe_Êags
);

103 
	`gisu∆ök_com_ª£t
(
globÆ
,
comID
,0);

104 
	`gisu∆ök_com_°›_ch¨ge
(
globÆ
,
comID
);

105 
	}
}

107 
	$gisu∆ök_ch¨grög_°©us_chk_öô
(
gisu∆ök_com_ch¨ge_chk
 *
ch¨gr_chk
, 
ch¨ge_com
 *
com
) {

108 if(
ch¨gr_chk
->
max_cuºít
 <= 0) {

109 
ch¨gr_chk
->
max_cuºít
 = 
com
->
cur_cuºít
;

112 if(
ch¨gr_chk
->
mö_cuºít
 <= 0) {

113 
ch¨gr_chk
->
mö_cuºít
 = 
com
->
cur_cuºít
;

116 if(
com
->
cur_cuºít
 > 
ch¨gr_chk
->
max_cuºít
) {

117 
ch¨gr_chk
->
max_cuºít
 = 
com
->
cur_cuºít
;

120 if(
com
->
cur_cuºít
 < 
ch¨gr_chk
->
mö_cuºít
) {

121 
ch¨gr_chk
->
mö_cuºít
 = 
com
->
cur_cuºít
;

123 
	}
}

126 
gisu∆ök_ch¨grög_°©us_chk
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
,(*
Nëw‹kPo°
)(gisu∆ök *globÆ, uöt8_àcomID, uöt8_à
behavi‹
)) {

128 
gisu∆ök_com_ch¨ge_chk
 *
ch¨gr_chk
 = &
comChkLi°
[
comID
];

129 
	`gisu∆ök_ch¨grög_°©us_chk_öô
(
ch¨gr_chk
,&
globÆ
->
comLi°
[
comID
]);

131 if(
globÆ
->
comLi°
[
comID
].
cur_cuºít
 <
CHARGR_OVER_CURRENT
) {

133 if(++
ch¨gr_chk
->
cou¡
 >
globÆ
->
sy°em
.
no_lﬂd_time
) {

135 if(
ch¨gr_chk
->
max_cuºít
 =ch¨gr_chk->
mö_cuºít
) {

136 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_NO_LOAD
;

137 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_NO_LOAD
);

143 if((
ch¨gr_chk
->
mö_cuºít
 + 30Ë< ch¨gr_chk->
max_cuºít
) {

144 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_NO_LOAD
;

145 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_NO_LOAD
);

149 if(
	`abs
(()(
ch¨gr_chk
->
mö_cuºít
 - ch¨gr_chk->
cuºít
)Ë<
CHK_CURRENT_MA
 && ch¨gr_chk->
is_ÁŒög
 =
IS_FALLING
 && ch¨gr_chk->
ÁŒög_cou¡
 > 5) {

150 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_FINISH
;

151 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_FINISH
);

154 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_NO_LOAD
;

155 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_NO_LOAD
);

162 
ch¨gr_chk
->
cou¡
 = 0;

164 if(
ch¨gr_chk
->
cuºít
 <= 0) {

165 
ch¨gr_chk
->
cuºít
 = 
globÆ
->
comLi°
[
comID
].
cur_cuºít
;

169 if(
globÆ
->
comLi°
[
comID
].
cur_cuºít
 !
ch¨gr_chk
->
cuºít
) {

172 if((
globÆ
->
comLi°
[
comID
].
cur_cuºít
 + 
CHK_CURRENT_MA
Ë< 
ch¨gr_chk
->
cuºít
) {

174 
ch¨gr_chk
->
is_ÁŒög
 = 
IS_FALLING
;

175 if(
ch¨gr_chk
->
ÁŒög_cou¡
 < 0xFFFF) {

176 
ch¨gr_chk
->
ÁŒög_cou¡
++;

180 
ch¨gr_chk
->
cuºít
 = 
globÆ
->
comLi°
[
comID
].
cur_cuºít
;

185 
	}
}

187 
gisu∆ök_ch¨grög_chk
(
gisu∆ök
 *
globÆ
,(*
Nëw‹kPo°
)(gisu∆ök *globÆ, 
uöt8_t
 
comID
, uöt8_à
behavi‹
)) {

188 
uöt8_t
 
comID
 = 0;

190 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

191 if(
globÆ
->
comLi°
[
comID
].
íabÀ
 =
IS_ENABLE
) {

193 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 =
NO_BREAKDOWN
) {

195 if(
globÆ
->
comLi°
[
comID
].
utime
 >globÆ->comLi°[comID].
±ime
) {

197 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_LEISURE
);

198 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_FINISH
;

199 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_FINISH
);

204 if((
globÆ
->
comLi°
[
comID
].
u£d
 + globÆ->
íîgyOff£t
[comID]Ë>globÆ->comLi°[comID].
tŸÆ
) {

205 
uöt8_t
 
chk_time
 = 
ch¨ge_ovî_time
[
comID
];

206 if(
chk_time
++ >= 30) {

208 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_FINISH
;

209 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_LEISURE
);

210 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_FINISH
);

212 
ch¨ge_ovî_time
[
comID
] = 0;

215 
ch¨ge_ovî_time
[
comID
] = 
chk_time
;

218 
ch¨ge_ovî_time
[
comID
] = 0;

222 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_CHARGEING
);

224 
	`gisu∆ök_ch¨grög_°©us_chk
(
globÆ
,
comID
,
Nëw‹kPo°
);

226 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_BREAKDOWN
);

228 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_BREAKDOWN
;

229 
	`gisu∆ök_com_ch¨grög_°©us_po°
(
globÆ
,
comID
,
Nëw‹kPo°
,
GISUNLINK_CHARGE_BREAKDOWN
);

232 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 !
NO_BREAKDOWN
 && globÆ->
bªakdown_chk
[comID] == NO_BREAKDOWN) {

233 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_BREAKDOWN
);

234 if(
globÆ
->
comLi°
[
comID
].
bªakdown_time
 >= 10) {

235 
globÆ
->
bªakdown_chk
[
comID
] = 
IS_BREAKDOWN
;

236 
globÆ
->
comLi°
[
comID
].
bªakdown_time
 = 0;

237 if(
	`gisu∆ök_com_°¨t_ch¨ge
(
globÆ
,
comID
Ë=
SUCCEED
) {

238 
globÆ
->
comLi°
[
comID
].
bªakdown
 = 
NO_BREAKDOWN
;

239 
globÆ
->
bªakdown_chk
[
comID
] = 
NO_BREAKDOWN
;

240 
	`gisu∆ök_com_ª£t
(
globÆ
,
comID
,0);

241 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_LEISURE
);

243 
	`gisu∆ök_com_°›_ch¨ge
(
globÆ
,
comID
);

248 
	}
}

	@code/User/gisunlink_coms.h

13 #i‚de‡
__GISUNLINK_COMS_H__


14 
	#__GISUNLINK_COMS_H__


	)

16 
	~"gisu∆ök.h
"

18 #ifde‡
__˝lu•lus


24 
gisu∆ök_com_ª£t
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, uöt8_à
˛órAŒ
);

27 
gisu∆ök_com_£t
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, 
gisu∆ök_ch¨ge_èsk
 *
ch¨ge_èsk
);

30 
uöt8_t
 
gisu∆ök_com_°¨t_ch¨ge
(
gisu∆ök
 *
globÆ
, uöt8_à
comID
);

33 
uöt8_t
 
gisu∆ök_com_°›_ch¨ge
(
gisu∆ök
 *
globÆ
, uöt8_à
comID
);

36 
gisu∆ök_ch¨grög_chk
(
gisu∆ök
 *
globÆ
,(*
Nëw‹kPo°
)(gisu∆ök *globÆ, 
uöt8_t
 
comID
, uöt8_à
behavi‹
));

38 #ifde‡
__˝lu•lus


	@code/User/gisunlink_conf.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"gisu∆ök.h
"

16 
	~"gisu∆ök_c⁄f.h
"

17 
	~"gisu∆ök_dñay.h
"

18 
	~"gisu∆ök_ì¥om.h
"

20 
uöt8_t
 
	$gisu∆ök_c⁄f_öô
(
gisu∆ök
 *
globÆ
) {

21 
uöt8_t
 
ªt
 = 
SYSTEM_UNINIT
;

22 if(
	`ì_RódByãs
((
uöt8_t
 *)&
globÆ
->
c⁄f
, 
SYSTEM_STATE_ADDRESS
, (
gisu∆ök_c⁄f
)) == 0) {

25 if(
globÆ
->
c⁄f
.
öô
 !
SYSTEM_INIT
) {

26 
	`mem£t
((*)&
globÆ
->
c⁄f
,0x00,(
gisu∆ök_c⁄f
));

27 
ªt
 = 
globÆ
->
c⁄f
.
öô
 = 
SYSTEM_INIT
;

28 
globÆ
->
c⁄f
.
mode
 = 
SYSTEM_GSM_MODE
;

29 
	`DñayMs
(10);

30 
	`ì_WrôeByãs
((
uöt8_t
 *)&
globÆ
->
c⁄f
, 
SYSTEM_STATE_ADDRESS
, (
gisu∆ök_c⁄f
));

31 
	`DñayMs
(10);

32 
	`ì_RódByãs
((
uöt8_t
 *)&
globÆ
->
c⁄f
, 
SYSTEM_STATE_ADDRESS
, (
gisu∆ök_c⁄f
));

34 
ªt
 = 
SYSTEM_INIT
;

37 
ªt
 = 
globÆ
->
c⁄f
.
öô
 = 
SYSTEM_UNINIT
;

39  
ªt
;

40 
	}
}

42 
uöt8_t
 
	$gisu∆ök_gë_sy°em_c⁄f
(
gisu∆ök
 *
globÆ
) {

43 
uöt8_t
 
ªt
 = 
SYSTEM_UNINIT
;

44 if(
globÆ
) {

45 if(
	`ì_RódByãs
((
uöt8_t
 *)&
globÆ
->
c⁄f
, 
SYSTEM_STATE_ADDRESS
, (
gisu∆ök_c⁄f
)) == 0) {

46 
ªt
 = 
globÆ
->
c⁄f
.
öô
;

48  
ªt
;

50  
ªt
;

51 
	}
}

53 
uöt8_t
 
	$gisu∆ök_£t_sy°em_c⁄f
(
gisu∆ök
 *
globÆ
) {

54 if(
globÆ
) {

55 if(
globÆ
->
c⁄f
.
öô
 =
SYSTEM_INIT
) {

56 
	`ì_WrôeByãs
((
uöt8_t
 *)&
globÆ
->
c⁄f
, 
SYSTEM_STATE_ADDRESS
, (
gisu∆ök_c⁄f
));

58  
globÆ
->
c⁄f
.
öô
;

60  
SYSTEM_UNINIT
;

61 
	}
}

63 
	$gisu∆ök_gë_comLi°_c⁄f
(
gisu∆ök
 *
globÆ
) {

64 
uöt8_t
 
comID
 = 0;

65 if(
globÆ
 !
NULL
)

66 
comID
 < 
MAX_COM_QUANTITY
) {

67 
	`ì_RódByãs
((
uöt8_t
 *)&
globÆ
->
comLi°
[
comID
], 
DEVICE_COM_ADDRESS
 * comID, (
ch¨ge_com
));

68 
globÆ
->
íîgyOff£t
[
comID
] = globÆ->
comLi°
[comID].
u£d
;

69 
globÆ
->
comLi°
[
comID
++].
u£d
 = 0;

72 
	}
}

74 
	$gisu∆ök_£t_comLi°_c⁄f
(
gisu∆ök
 *
globÆ
) {

75 
uöt8_t
 
comID
 = 0;

76 if(
globÆ
 !
NULL
) {

77 
comID
 < 
MAX_COM_QUANTITY
) {

78 
globÆ
->
comLi°
[
comID
].
u£d
 +globÆ->
íîgyOff£t
[comID];

79 
	`ì_WrôeByãs
((
uöt8_t
 *)&
globÆ
->
comLi°
[
comID
], 
DEVICE_COM_ADDRESS
 * comID, (
ch¨ge_com
));

80 
comID
++;

83 
	}
}

	@code/User/gisunlink_conf.h

13 #i‚de‡
__GISUNLINK_CONF_H__


14 
	#__GISUNLINK_CONF_H__


	)

16 
	~"gisu∆ök.h
"

18 #ifde‡
__˝lu•lus


24 
SYSTEM_GSM_MODE
 = 0xFF,

25 
SYSTEM_WIFI_MODE
 = 0x55,

26 } 
	tSYSTEM_RUM_MODE
;

29 
SYSTEM_UNINIT
 = 0xFF,

30 
SYSTEM_INIT
 = 0x88,

31 } 
	tSYSTEM_CONFIG
;

33 
uöt8_t
 
gisu∆ök_c⁄f_öô
(
gisu∆ök
 *
globÆ
);

35 
uöt8_t
 
gisu∆ök_gë_sy°em_c⁄f
(
gisu∆ök
 *
globÆ
);

37 
uöt8_t
 
gisu∆ök_£t_sy°em_c⁄f
(
gisu∆ök
 *
globÆ
);

39 
gisu∆ök_gë_comLi°_c⁄f
(
gisu∆ök
 *
globÆ
);

41 
gisu∆ök_£t_comLi°_c⁄f
(
gisu∆ök
 *
globÆ
);

43 #ifde‡
__˝lu•lus


	@code/User/gisunlink_delay.c

2 
	~"gisu∆ök_dñay.h
"

5 
	$Dñay
(
__IO
 
uöt32_t
 
nCou¡
)

7 ; 
nCou¡
 != 0;ÇCount--);

9 
	}
}

11 
	$DñayUs
(
uöt16_t
 
nus
)

13 
uöt32_t
 
ãmp
;

15 ;
nus
>0;nus--)

16 
ãmp
=5;temp>0;Åemp--);

18 
	}
}

20 
	$DñayMs
(
uöt16_t
 
nms
)

22 
uöt32_t
 
ãmp
;

23 
nms
--)

24 
ãmp
=9900;temp>0;Åemp--);

26 
	}
}

	@code/User/gisunlink_delay.h

1 #i‚de‡
__DELAY_H


2 
	#__DELAY_H


	)

3 
	~"°m32f10x.h
"

11 
Dñay
(
__IO
 
uöt32_t
 
nCou¡
);

12 
DñayUs
(
uöt16_t
 
nus
);

13 
DñayMs
(
uöt16_t
 
nms
);

	@code/User/gisunlink_eeprom.c

1 
	~"gisu∆ök_ì¥om.h
"

2 
	~"°rög.h
"

3 
	~"gisu∆ök_gpio.h
"

4 
	~"gisu∆ök_dñay.h
"

6 
	$gisu∆ök_e2¥om_Inô
() {

7 
GPIO_InôTy≥Def
 
GPIO_Inô_Såu˘uª
;

8 
	`RCC_APB2PîùhClockCmd
(
RCC_I2C_PORT
,
ENABLE
);

9 
GPIO_Inô_Såu˘uª
.
GPIO_Pö
 = 
I2C_SCL_PIN
 | 
I2C_SDA_PIN
;

10 
GPIO_Inô_Såu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

11 
GPIO_Inô_Såu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

12 
	`GPIO_Inô
(
GPIOB
,&
GPIO_Inô_Såu˘uª
);

13 
	`GPIO_SëBôs
(
I2C
,
I2C_SCL_PIN
 | 
I2C_SDA_PIN
);

15 
	`i2c_St›
();

16 
	}
}

26 
	$i2c_Dñay
()

30 
	`DñayUs
(2);

32 
	}
}

42 
	$i2c_Sèπ
()

45 
	`I2C_SDA_1
();

46 
	`I2C_SCL_1
();

47 
	`i2c_Dñay
();

48 
	`I2C_SDA_0
();

49 
	`i2c_Dñay
();

50 
	`I2C_SCL_0
();

51 
	`i2c_Dñay
();

52 
	}
}

62 
	$i2c_St›
()

65 
	`I2C_SDA_0
();

66 
	`I2C_SCL_1
();

67 
	`i2c_Dñay
();

68 
	`I2C_SDA_1
();

69 
	}
}

79 
	$i2c_SídByã
(
uöt8_t
 
_ucByã
)

81 
uöt8_t
 
i
;

84 
i
 = 0; i < 8; i++)

86 i‡(
_ucByã
 & 0x80)

88 
	`I2C_SDA_1
();

92 
	`I2C_SDA_0
();

94 
	`i2c_Dñay
();

95 
	`I2C_SCL_1
();

96 
	`i2c_Dñay
();

97 
	`I2C_SCL_0
();

98 i‡(
i
 == 7)

100 
	`I2C_SDA_1
();

102 
_ucByã
 <<= 1;

103 
	`i2c_Dñay
();

105 
	}
}

115 
uöt8_t
 
	$i2c_RódByã
()

117 
uöt8_t
 
i
;

118 
uöt8_t
 
vÆue
;

121 
vÆue
 = 0;

122 
i
 = 0; i < 8; i++)

124 
vÆue
 <<= 1;

125 
	`I2C_SCL_1
();

126 
	`i2c_Dñay
();

127 i‡(
	`I2C_SDA_READ
())

129 
vÆue
++;

131 
	`I2C_SCL_0
();

132 
	`i2c_Dñay
();

134  
vÆue
;

135 
	}
}

145 
uöt8_t
 
	$i2c_WaôAck
()

147 
uöt8_t
 
ª
;

149 
	`I2C_SDA_1
();

150 
	`i2c_Dñay
();

151 
	`I2C_SCL_1
();

152 
	`i2c_Dñay
();

153 i‡(
	`I2C_SDA_READ
())

155 
ª
 = 1;

159 
ª
 = 0;

161 
	`I2C_SCL_0
();

162 
	`i2c_Dñay
();

163  
ª
;

164 
	}
}

174 
	$i2c_Ack
()

176 
	`I2C_SDA_0
();

177 
	`i2c_Dñay
();

178 
	`I2C_SCL_1
();

179 
	`i2c_Dñay
();

180 
	`I2C_SCL_0
();

181 
	`i2c_Dñay
();

182 
	`I2C_SDA_1
();

183 
	}
}

193 
	$i2c_NAck
()

195 
	`I2C_SDA_1
();

196 
	`i2c_Dñay
();

197 
	`I2C_SCL_1
();

198 
	`i2c_Dñay
();

199 
	`I2C_SCL_0
();

200 
	`i2c_Dñay
();

201 
	}
}

211 
uöt8_t
 
	$i2c_CheckDevi˚
(
uöt8_t
 
_Addªss
)

213 
uöt8_t
 
ucAck
;

215 i‡(
	`I2C_SDA_READ
(Ë&& 
	`I2C_SCL_READ
())

217 
	`i2c_Sèπ
();

220 
	`i2c_SídByã
(
_Addªss
 | 
I2C_WR
);

221 
ucAck
 = 
	`i2c_WaôAck
();

223 
	`i2c_St›
();

225  
ucAck
;

228 
	}
}

231 
uöt8_t
 
	$ì_CheckOk
()

233 i‡(
	`i2c_CheckDevi˚
(
EE_DEV_ADDR
) == 0)

240 
	`i2c_St›
();

243 
	}
}

256 
uöt8_t
 
	$ì_RódByãs
(
uöt8_t
 *
_pRódBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
)

258 
uöt16_t
 
i
;

263 
	`i2c_Sèπ
();

266 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_WR
);

269 i‡(
	`i2c_WaôAck
() != 0)

271 
cmd_Áû
;

275 i‡(
EE_ADDR_BYTES
 == 1)

277 
	`i2c_SídByã
((
uöt8_t
)
_usAddªss
);

278 i‡(
	`i2c_WaôAck
() != 0)

280 
cmd_Áû
;

285 
	`i2c_SídByã
(
_usAddªss
 >> 8);

286 i‡(
	`i2c_WaôAck
() != 0)

288 
cmd_Áû
;

291 
	`i2c_SídByã
(
_usAddªss
);

292 i‡(
	`i2c_WaôAck
() != 0)

294 
cmd_Áû
;

299 
	`i2c_Sèπ
();

302 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_RD
);

305 i‡(
	`i2c_WaôAck
() != 0)

307 
cmd_Áû
;

311 
i
 = 0; i < 
_usSize
; i++)

313 
_pRódBuf
[
i
] = 
	`i2c_RódByã
();

316 i‡(
i
 !
_usSize
 - 1)

318 
	`i2c_Ack
();

322 
	`i2c_NAck
();

326 
	`i2c_St›
();

329 
cmd_Áû
:

331 
	`i2c_St›
();

333 
	}
}

345 
uöt8_t
 
	$ì_WrôeByãs
(
uöt8_t
 *
_pWrôeBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
)

347 
uöt16_t
 
i
,
m
;

348 
uöt16_t
 
usAddr
;

357 
usAddr
 = 
_usAddªss
;

358 
i
 = 0; i < 
_usSize
; i++)

361 i‡((
i
 =0Ë|| (
usAddr
 & (
EE_PAGE_SIZE
 - 1)) == 0)

364 
	`i2c_St›
();

369 
m
 = 0; m < 1000; m++)

372 
	`i2c_Sèπ
();

375 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_WR
);

378 i‡(
	`i2c_WaôAck
() == 0)

383 i‡(
m
 == 1000)

385 
cmd_Áû
;

389 i‡(
EE_ADDR_BYTES
 == 1)

391 
	`i2c_SídByã
((
uöt8_t
)
usAddr
);

392 i‡(
	`i2c_WaôAck
() != 0)

394 
cmd_Áû
;

399 
	`i2c_SídByã
(
usAddr
 >> 8);

400 i‡(
	`i2c_WaôAck
() != 0)

402 
cmd_Áû
;

405 
	`i2c_SídByã
(
usAddr
);

406 i‡(
	`i2c_WaôAck
() != 0)

408 
cmd_Áû
;

414 
	`i2c_SídByã
(
_pWrôeBuf
[
i
]);

417 i‡(
	`i2c_WaôAck
() != 0)

419 
cmd_Áû
;

422 
usAddr
++;

426 
	`i2c_St›
();

429 
cmd_Áû
:

431 
	`i2c_St›
();

433 
	}
}

	@code/User/gisunlink_eeprom.h

1 #i‚de‡
__GISUNLINK_EEPROM_H__


2 
	#__GISUNLINK_EEPROM_H__


	)

5 
	~"°m32f10x.h
"

7 
	#SYSTEM_STATE_ADDRESS
 256

	)

8 
	#DEVICE_COM_ADDRESS
 512

	)

10 
	#EE_MODEL_NAME
 "AT24C64"

	)

11 
	#EE_DEV_ADDR
 0xA0

	)

12 
	#EE_PAGE_SIZE
 32

	)

13 
	#EE_SIZE
 256

	)

14 
	#EE_ADDR_BYTES
 2

	)

15 
	#I2C_WR
 0

	)

16 
	#I2C_RD
 1

	)

18 
i2c_St›
();

19 
gisu∆ök_e2¥om_Inô
();

20 
uöt8_t
 
ì_WrôeByãs
(uöt8_à*
_pWrôeBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
);

21 
uöt8_t
 
ì_RódByãs
(uöt8_à*
_pRódBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
);

	@code/User/gisunlink_energy_metering.c

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~"gisu∆ök_íîgy_mëîög.h
"

5 
	~"gisu∆ök_ty≥.h
"

6 
	~"gisu∆ök_ußπ.h
"

7 
	~"gisu∆ök_gpio.h
"

8 
	~"gisu∆ök_dñay.h
"

10 
	#ADSYSCON
 0x00

	)

11 
	#ADEMUCON
 0x01

	)

12 
	#ADHFC⁄°
 0x02

	)

13 
	#ADPSèπ
 0x03

	)

14 
	#ADDSèπ
 0x04

	)

15 
	#ADGPQA
 0x05

	)

16 
	#ADGPQB
 0x06

	)

17 
	#ADPhsA
 0x07

	)

18 
	#ADPhsB
 0x08

	)

19 
	#ADQPHSCAL
 0x09

	)

20 
	#ADAPOSA
 0x0a

	)

21 
	#ADAPOSB
 0x0b

	)

22 
	#ADRPOSA
 0x0c

	)

23 
	#ADRPOSB
 0x0d

	)

24 
	#ADIARMSOS
 0x0e

	)

25 
	#ADIBRMSOS
 0x0f

	)

26 
	#ADIBGaö
 0x10

	)

27 
	#ADD2FPL
 0x11

	)

28 
	#ADD2FPH
 0x12

	)

29 
	#ADDCIAH
 0x13

	)

30 
	#ADDCIBH
 0x14

	)

31 
	#ADDCUH
 0x15

	)

32 
	#ADDCL
 0x16

	)

33 
	#ADEMUCON2
 0x17

	)

34 
	#ADPFC¡
 0x20

	)

35 
	#ADDF˙t
 0x21

	)

36 
	#ADIARMS
 0x22

	)

37 
	#ADIBRMS
 0x23

	)

38 
	#ADURMS
 0x24

	)

39 
	#ADUFªq
 0x25

	)

40 
	#ADPowîPA
 0x26

	)

41 
	#ADPowîPB
 0x27

	)

42 
	#ADE√rgyP
 0x29

	)

43 
	#ADE√rgyP2
 0x2a

	)

44 
	#ADE√rgyD
 0x2b

	)

45 
	#ADE√rgyD2
 0x2c

	)

46 
	#ADEMUSètus
 0x2d

	)

47 
	#ADSPL_IA
 0x30

	)

48 
	#ADSPL_IB
 0x31

	)

49 
	#ADSPL_U
 0x32

	)

50 
	#ADIE
 0x40

	)

51 
	#ADIF
 0x41

	)

52 
	#ADRIF
 0x42

	)

53 
	#ADSysSètus
 0x43

	)

54 
	#ADRD©a
 0x44

	)

55 
	#ADWD©a
 0x45

	)

56 
	#ADDevi˚ID
 0x7f

	)

57 
	#S≥cülReg
 0xó

	)

58 
	#WrôeEn
 0xe5

	)

59 
	#WrôeDis
 0xdc

	)

62 
	#SENSOR_READ_COUNT
 250

	)

66 vﬁ©ûê
uöt32_t
 
	mid
;

67 vﬁ©ûê
uöt8_t
 
	midbuf
[4];

69 } 
	munid
;

72 vﬁ©ûê
uöt32_t
 
	mvﬁ
;

73 vﬁ©ûê
uöt8_t
 
	mvﬁbuf
[4];

74 } 
	munvﬁ
;

77 vﬁ©ûê
uöt32_t
 
	mcuπ
;

78 vﬁ©ûê
uöt8_t
 
	mcuπbuf
[4];

79 } 
	muncuπ
;

82 vﬁ©ûê
uöt32_t
 
	mîgy
;

83 vﬁ©ûê
uöt8_t
 
	mîgybuf
[4];

84 } 
	mu√rgy
;

86 vﬁ©ûê
uöt8_t
 
	mvﬁÁûed_time
;

87 vﬁ©ûê
uöt8_t
 
	mcuπÁûed_time
;

88 vﬁ©ûê
uöt8_t
 
	mdeföe_cuπÁûed_time
;

89 vﬁ©ûê
uöt8_t
 
	mîgy_off£t_íabÀ
;

90 vﬁ©ûê
uöt32_t
 
	mîgy_off£tP
;

91 vﬁ©ûê
uöt32_t
 
	mîgy_off£tN
;

92 } 
	tE√rgyD©aTy≥
;

94 
E√rgyD©aTy≥
 
	gE√rgyD©a
[
MAX_COM_QUANTITY
];

95 
sComPack_Ty≥Def
 
	gComPack
;

97 vﬁ©ûêc⁄° 
uöt16_t
 
	gRevRñaySñe˘i⁄Buf
[10]={0xfffd, 0xfffb, 0xfff7, 0xffef, 0xffdf, 0xffbf, 0xff7f, 0xfdff, 0xfbff, 0xf7ff};

99 vﬁ©ûêc⁄° 
uöt16_t
 
	gRñaySñe˘i⁄Buf
[12]= {0x03, 0x05, 0x09, 0x11, 0x21, 0x41, 0x81, 0x201, 0x401, 0x801, 0xfff,0x0 };

102 vﬁ©ûêc⁄° 
uöt16_t
 
	gComSñe˘i⁄Buf
[5]={0x4000,0x3000,0x0,0x1000,0x2000};

104 vﬁ©ûê
uöt16_t
 
	gComRñaySètus
 = 0;

106 
	$HC595OutByã
(
uöt16_t
 
d©a
) {

107 
uöt16_t
 
i
;

110 
i
 = 0x8000; i>0; i/=2) {

111 if(
d©a
 & 
i
) {

112 
	`CSER_HIGH
();

114 
	`CSER_LOW
();

117 
	`DñayUs
(10);

118 
	`CSCK_LOW
();

119 
	`DñayUs
(120);

120 
	`CSCK_HIGH
();

121 
	`DñayUs
(120);

125 
	`CRCK_LOW
();

126 
	`DñayUs
(5);

127 
	`CRCK_HIGH
();

128 
	`DñayUs
(5);

130 
	}
}

132 
	$gisu∆ök_íîgy_mëîög_Inô
()

134 
uöt8_t
 
i
;

136 
	`gisu∆ök_check_ußπ_öô
();

138 
ComRñaySètus
 = 
ComSñe˘i⁄Buf
[0]|
RñaySñe˘i⁄Buf
[11];

139 
	`HC595OutByã
(
ComRñaySètus
);

140 
	`COE_LOW
();

141 
	`DñayMs
(20);

143 
i
=0;i<5;i++)

145 
	`HC595OutByã
(
ComSñe˘i⁄Buf
[
i
]);

146 
	`DñayMs
(20);

147 
	`EMU_CÆibøti⁄
();

148 
	`DñayMs
(20);

150 
	}
}

163 
Eº‹Sètus
 
	$‚RN8209_Wrôe
(
u8
 
wReg
,u8 *
pBuf
,u8 
ucLí
) {

164 
u8
 
i
,
ãmp
,
chksum
;

166 if–(
ucLí
 =0Ë|| (ucLí > 4ËË(
ERROR
);

169 
ComPack
.
pTx
=&ComPack.
TxBuf
[0];

172 
ãmp
 =
wReg
|0x80;

173 *(
ComPack
.
pTx
++)=
ãmp
;

174 
chksum
 = 
ãmp
;

175 
i
 = 
ucLí
; i > 0;i-- )

177 *(
ComPack
.
pTx
++)=
pBuf
[
i
-1];

178 
chksum
 +=
pBuf
[
i
-1];

180 
chksum
 = ~chksum;

181 *(
ComPack
.
pTx
++)=
chksum
;

182 
ComPack
.
TxLí
 = 
ucLí
+2;

183 
ComPack
.
pTx
=&ComPack.
TxBuf
[0];

185 
i
=0;i<
ComPack
.
TxLí
;i++)

187 
	`USART_SídD©a
(
USART3
,*(
ComPack
.
pTx
++));

188 
	`USART_GëFœgSètus
(
USART3
,
USART_FLAG_TC
)==
RESET
);

192 
ComPack
.
pTx
=&ComPack.
TxBuf
[0];

195 (
SUCCESS
);

196 
	}
}

208 
Eº‹Sètus
 
	$‚RN8209_Ród
(
u8
 
wReg
,u8 *
pBuf
,u8 
ucLí
) {

209 
u8
 
i
,
ãmp
;

210 
u8
 
j
=0;

211 
u8
 
chksum
=0;

212 
Eº‹Sètus
 
îr
;

213 if(
ucLí
 =0Ë(
ERROR
);

215 
îr
 = 
SUCCESS
;

216 
chksum
=
wReg
;

217 
j
 = 0;

219 
ComPack
.
TxLí
 = 1;

220 
ComPack
.
RxLí
=0;

222 
	`USART_SídD©a
(
USART3
,
wReg
);

223 
	`USART_GëFœgSètus
(
USART3
,
USART_FLAG_TC
)==
RESET
);

225 
i
 = 
SENSOR_READ_COUNT
;

227 
i
--) {

228 
	`DñayMs
(1);

229 if(
ComPack
.
RxLí
 >(
ucLí
+1) )

234 
i
=10;i>0;i--)

236 
	`DñayMs
(1);

237 if(
ComPack
.
RxLí
>(
ucLí
+1))

242 
i
 = 
ucLí
; i > 0;i--)

244 
pBuf
[
i
-1] = 
ComPack
.
RxBuf
[
j
++];

245 
chksum
 +
pBuf
[
i
-1];

247 
chksum
 = ~chksum;

248 
ãmp
=
ComPack
.
RxBuf
[
j
++];

250 if(
ãmp
!=
chksum
)

252 
îr
 = 
ERROR
;

254 (
îr
);

255 
	}
}

257 
	$EMU_CÆibøti⁄
() {

259 
uöt8_t
 
d©aLí
=0;

260 
uöt8_t
 
wrôeTempBuf
[4];

263 
wrôeTempBuf
[0]=
WrôeEn
;

264 
	`‚RN8209_Wrôe
(
S≥cülReg
 ,
wrôeTempBuf
,1);

266 
	`DñayMs
(10);

267 
wrôeTempBuf
[0]=0xfa;

268 
	`‚RN8209_Wrôe
(
S≥cülReg
 ,
wrôeTempBuf
,1);

270 
	`DñayMs
(10);

271 
wrôeTempBuf
[0]=
WrôeEn
;

272 
	`‚RN8209_Wrôe
(
S≥cülReg
 ,
wrôeTempBuf
,1);

274 
wrôeTempBuf
[0]=0x51;

275 
wrôeTempBuf
[1]=0x16;

276 
d©aLí
=2;

277 
	`‚RN8209_Wrôe
(
ADSYSCON
,
wrôeTempBuf
,
d©aLí
);

279 
wrôeTempBuf
[0]=0x03;

280 
wrôeTempBuf
[1]=0x28;

281 
d©aLí
=2;

282 
	`‚RN8209_Wrôe
(
ADEMUCON
 ,
wrôeTempBuf
,
d©aLí
);

284 
wrôeTempBuf
[0]=0xf0;

285 
wrôeTempBuf
[1]=0x00;

286 
d©aLí
=2;

287 
	`‚RN8209_Wrôe
(
ADEMUCON2
,
wrôeTempBuf
,
d©aLí
);

289 
wrôeTempBuf
[0]=0x91;

290 
wrôeTempBuf
[1]=0x02;

291 
d©aLí
=2;

292 
	`‚RN8209_Wrôe
(
ADHFC⁄°
 ,
wrôeTempBuf
,
d©aLí
);

294 
wrôeTempBuf
[0]=0xff;

295 
wrôeTempBuf
[1]=0xfe;

296 
d©aLí
=2;

297 
	`‚RN8209_Wrôe
(
ADIARMSOS
,
wrôeTempBuf
,
d©aLí
);

299 
wrôeTempBuf
[0]=0xff;

300 
wrôeTempBuf
[1]=0xfe;

301 
d©aLí
=2;

302 
	`‚RN8209_Wrôe
(
ADIBRMSOS
,
wrôeTempBuf
,
d©aLí
);

304 
wrôeTempBuf
[0]=
WrôeDis
;

305 
	`‚RN8209_Wrôe
(
S≥cülReg
 ,
wrôeTempBuf
,1);

307 
	}
}

309 
uöt8_t
 
	$gisu∆ök_›í_check_ch™√l
(
uöt8_t
 
ch™√l
) {

311 
uöt8_t
 
chk_åy
 = 3; uöt8_à
ªt
 = 1;

312 
E√rgyD©aTy≥
 *
comE√rgy
 = 
NULL
;

313 
ComRñaySètus
 |
RñaySñe˘i⁄Buf
[
ch™√l
];

314 
	`HC595OutByã
(
ComRñaySètus
);

316 if(
ch™√l
>9) {

317  !
ªt
;

319 
comE√rgy
 = &
E√rgyD©a
[
ch™√l
];

320 
	`mem£t
(
comE√rgy
,0x00,(
E√rgyD©aTy≥
));

323 
chk_åy
--) {

324 
ªt
 = 
	`‚RN8209_Ród
(0x7f,(
uöt8_t
 *)
comE√rgy
->
unid
.
idbuf
,3);

325 if(
comE√rgy
->
unid
.
id
 =0x00820900 && 
ªt
 =
SUCCESS
) {

326 
comE√rgy
->
îgy_off£t_íabÀ
 = 1;

329 
	`DñayMs
(20);

331  !
ªt
;

332 
	}
}

334 
	$gisu∆ök_˛o£_check_ch™√l
(
uöt8_t
 
ch™√l
) {

335 
ComRñaySètus
 &
RevRñaySñe˘i⁄Buf
[
ch™√l
];

336 
	`HC595OutByã
(
ComRñaySètus
);

338 
	`DñayMs
(2);

339 
	}
}

341 
uöt8_t
 
	$gisu∆ök_ªad_ch™√l_vﬁ
(
uöt8_t
 
ªg
,
E√rgyD©aTy≥
 *
comE√rgy
,uöt8_à
Àn
) {

342 
uöt8_t
 
chk_åy
 = 3;

343 
uöt8_t
 
ªt
 = 0;

344 
chk_åy
--) {

345 if((
ªt
 = 
	`‚RN8209_Ród
(
ªg
,(
uöt8_t
 *)
comE√rgy
->
unvﬁ
.
vﬁbuf
,
Àn
)Ë=
SUCCESS
) {

346 
ªt
 = 
ERROR
;

347 if((
comE√rgy
->
unvﬁ
.
vﬁ
 > 550000) && (comEnergy->unvol.vol < 1450000)) {

348 
ªt
 = 
SUCCESS
;

353  
ªt
;

354 
	}
}

356 
uöt8_t
 
	$gisu∆ök_ªad_ch™√l_cuπ
(
uöt8_t
 
ªg
,
E√rgyD©aTy≥
 *
comE√rgy
,uöt8_à
Àn
) {

357 
uöt8_t
 
chk_åy
 = 3;

358 
uöt8_t
 
ªt
 = 0;

359 
chk_åy
--) {

360 if((
ªt
 = 
	`‚RN8209_Ród
(
ªg
,(
uöt8_t
 *)
comE√rgy
->
uncuπ
.
cuπbuf
,
Àn
)Ë=
SUCCESS
) {

361 
ªt
 = 
ERROR
;

362 if(
comE√rgy
->
uncuπ
.
cuπ
 < 200000) {

363 
ªt
 = 
SUCCESS
;

368  
ªt
;

369 
	}
}

371 
uöt8_t
 
	$gisu∆ök_ªad_ch™√l_îgy
(
uöt8_t
 
ªg
,
E√rgyD©aTy≥
 *
comE√rgy
,uöt8_à
Àn
) {

372 
uöt8_t
 
chk_åy
 = 3;

373 
uöt8_t
 
ªt
 = 0;

374 
chk_åy
--) {

375 if((
ªt
 = 
	`‚RN8209_Ród
(
ªg
,(
uöt8_t
 *)
comE√rgy
->
u√rgy
.
îgybuf
,
Àn
)Ë=
SUCCESS
) {

379  
ªt
;

380 
	}
}

383 
uöt32_t
 
	mªadTemp
;

384 
uöt8_t
 
	mªadTempBuf
[4];

385 } 
	guƒód
;

388 
uöt8_t
 
	$gisu∆ök_ªad_íîgy_d©a
(
ch¨ge_com
 *
com
,
gisu∆ök
 *
globÆ
) {

390 
uöt8_t
 
c_ªg
 = 
ADIARMS
;

391 
uöt8_t
 
e_ªg
 = 
ADE√rgyP
;

392 
E√rgyD©aTy≥
 *
comE√rgy
 = 
NULL
;

394 if(
com
 =
NULL
 || com->
id
 > 9) {

398 
comE√rgy
 = &
E√rgyD©a
[
com
->
id
];

401 if((
com
->
id
&0x01) == 1) {

402 
c_ªg
 = 
ADIBRMS
;

403 
e_ªg
 = 
ADE√rgyD
;

406 
ComRñaySètus
 &=0x0fff;

407 
ComRñaySètus
 |
ComSñe˘i⁄Buf
[
com
->
id
/2];

408 
	`HC595OutByã
(
ComRñaySètus
);

410 
	`DñayMs
(1);

412 
	`‚RN8209_Ród
(
ADEMUSètus
,
uƒód
.
ªadTempBuf
,3);

414 if((
uƒód
.
ªadTemp
&0x0000ffff) != 0xbeac) {

415 
	`EMU_CÆibøti⁄
();

416 
uöt16_t
 
icRe£t
 = 
globÆ
->icRe£t[
com
->
id
];

417 
icRe£t
++;

418 
globÆ
->
icRe£t
[
com
->
id
] = icReset;

419 
comE√rgy
->
îgy_off£tP
 = 
com
->
u£d
*16/5;

420 
comE√rgy
->
îgy_off£tN
 = 0;

422 if((
com
->
id
&0x01) == 1)

424 
comE√rgy
 = &
E√rgyD©a
[
com
->
id
 - 1];

429 
comE√rgy
 = &
E√rgyD©a
[
com
->
id
 + 1];

432 
comE√rgy
->
îgy_off£tP
 = 
com
->
u£d
*16/5;

433 
comE√rgy
->
îgy_off£tN
 = 0;

434 
comE√rgy
 = &
E√rgyD©a
[
com
->
id
];

436 
	`DñayMs
(1);

437  
SUCCESS
;

440 if(
comE√rgy
->
unid
.
id
 == 0x00820900) {

442 if(
	`gisu∆ök_ªad_ch™√l_îgy
(
e_ªg
,
comE√rgy
,3Ë=
SUCCESS
) {

443 if(
comE√rgy
->
îgy_off£t_íabÀ
 == 1) {

444 
comE√rgy
->
îgy_off£t_íabÀ
 = 0;

445 
comE√rgy
->
îgy_off£tP
 = 0;

446 
comE√rgy
->
îgy_off£tN
 = comE√rgy->
u√rgy
.
îgy
;

448 
com
->
u£d
 = (
	`abs
(()(
comE√rgy
->
u√rgy
.
îgy
 - comE√rgy->
îgy_off£tN
)Ë* 5 / 16Ë+ comE√rgy->
îgy_off£tP
;

451 if(
	`gisu∆ök_ªad_ch™√l_vﬁ
(
ADURMS
,
comE√rgy
,3Ë!
SUCCESS
) {

452 if(
comE√rgy
->
vﬁÁûed_time
 == 0) {

453 
comE√rgy
->
vﬁÁûed_time
 = 
com
->
utime
;

455 if(
com
->
utime
 > 
comE√rgy
->
vﬁÁûed_time
 && (com->utime - comEnergy->volfailed_time) >= 5) {

456 
comE√rgy
->
vﬁÁûed_time
 = 0;

457 
com
->
bªakdown_time
 = 0;

458 
com
->
bªakdown
 |
VOLTAGE_OVERFLOW
;

460  
ERROR
;

464 
comE√rgy
->
vﬁÁûed_time
 = 0;

465 
com
->
bªakdown
 &~(
VOLTAGE_OVERFLOW
);

468 if(
	`gisu∆ök_ªad_ch™√l_cuπ
(
c_ªg
,
comE√rgy
,3Ë!
SUCCESS
) {

469 if(
comE√rgy
->
cuπÁûed_time
 == 0) {

470 
comE√rgy
->
cuπÁûed_time
 = 
com
->
utime
;

472 if(
com
->
utime
 > 
comE√rgy
->
cuπÁûed_time
 && (com->utime - comEnergy->curtfailed_time) >= 5) {

473 
comE√rgy
->
cuπÁûed_time
 = 0;

474 
com
->
bªakdown_time
 = 0;

475 
com
->
bªakdown
 |
CURREN_OVERFLOW_3A
;

477  
ERROR
;

481 
comE√rgy
->
cuπÁûed_time
 = 0;

482 
com
->
bªakdown
 &~(
CURREN_OVERFLOW_3A
);

483 
com
->
cur_cuºít
 = 
comE√rgy
->
uncuπ
.
cuπ
*4/66;

486 if(
com
->
cur_cuºít
 <com->
max_cuºít
 ) {

487 
comE√rgy
->
deföe_cuπÁûed_time
 = 0;

488 
com
->
bªakdown
 &~(
CURREN_OVERFLOW_SETTING
);

490 if(
comE√rgy
->
deföe_cuπÁûed_time
 == 0) {

491 
comE√rgy
->
deföe_cuπÁûed_time
 = 
com
->
utime
;

493 if(
com
->
utime
 > 
comE√rgy
->
deföe_cuπÁûed_time
 && (com->utime - comEnergy->define_curtfailed_time) >= 5) {

494 
comE√rgy
->
deföe_cuπÁûed_time
 = 0;

495 
com
->
bªakdown_time
 = 0;

496 
com
->
bªakdown
 |
CURREN_OVERFLOW_SETTING
;

498  
ERROR
;

503  
SUCCESS
;

504 
	}
}

507 
	$gisu∆ök_ªad_ªÆtime_mëî_d©a
(
gisu∆ök
 *
globÆ
) {

508 
uöt8_t
 
ªad_comID
 = 0;

509 
	`LED_ToggÀ
();

511 if(
globÆ
->
comLi°
[
ªad_comID
].
íabÀ
 && globÆ->comLi°[ªad_comID].
bªakdown
 =
NO_BREAKDOWN
) {

512 
	`gisu∆ök_ªad_íîgy_d©a
(&
globÆ
->
comLi°
[
ªad_comID
],global);

514 
	`gisu∆ök_˛o£_check_ch™√l
(
ªad_comID
);

517 
ªad_comID
++;

518 if(
ªad_comID
 >
MAX_COM_QUANTITY
) {

519 
ªad_comID
 = 0;

521 
	}
}

	@code/User/gisunlink_energy_metering.h

1 #i‚de‡
__GISUNLINK_EEM_H


2 
	#__GISUNLINK_EEM_H


	)

4 
	~"°m32f10x.h
"

5 
	~"gisu∆ök.h
"

7 
	#MAX_COMPACK_SIZE
 32

	)

11 
u16
 
	mRxLí
;

12 
u16
 
	mTxLí
;

13 
u8
 *
	mpTx
;

14 
u8
 
	mRxBuf
[
MAX_COMPACK_SIZE
];

15 
u8
 
	mTxBuf
[
MAX_COMPACK_SIZE
];

16 } 
	tsComPack_Ty≥Def
;

17 
sComPack_Ty≥Def
 
ComPack
;

19 
HC595OutByã
(
uöt16_t
 
d©a
);

20 
EMU_CÆibøti⁄
();

21 
gisu∆ök_íîgy_mëîög_Inô
();

23 
uöt8_t
 
gisu∆ök_›í_check_ch™√l
(uöt8_à
ch™√l
);

24 
gisu∆ök_˛o£_check_ch™√l
(
uöt8_t
 
ch™√l
);

26 
gisu∆ök_ªad_ªÆtime_mëî_d©a
(
gisu∆ök
 *
globÆ
);

	@code/User/gisunlink_gpio.c

4 
	~"gisu∆ök_gpio.h
"

5 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

7 
	$gisu∆ök_gpio_c⁄figuøti⁄
() {

8 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

9 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
|
RCC_APB2Pîùh_GPIOB
|
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

10 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_SWJ_JTAGDißbÀ
, 
ENABLE
);

12 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
;

13 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

14 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

15 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

17 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
 ;

18 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

19 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
 ;

20 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

23 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COE
;

24 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

25 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

26 
	`GPIO_Inô
(
COE_PORT
, &
GPIO_InôSåu˘uª
);

27 
	`COE_HIGH
();

29 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CSCK
;

30 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

31 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

32 
	`GPIO_Inô
(
CSCK_PORT
, &
GPIO_InôSåu˘uª
);

33 
	`CSCK_LOW
();

35 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CRCK
;

36 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

37 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

38 
	`GPIO_Inô
(
CRCK_PORT
, &
GPIO_InôSåu˘uª
);

39 
	`CRCK_LOW
();

41 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CSER
;

42 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

43 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

44 
	`GPIO_Inô
(
CSER_PORT
, &
GPIO_InôSåu˘uª
);

45 
	`CSER_LOW
();

46 
	}
}

48 
	$gisu∆ök_£À˘_√tw‹k_moduÀ
(
uöt8_t
 
moduÀ
) {

49 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

51 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COMM
;

52 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

53 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

54 
	`GPIO_Inô
(
COMM_PORT
, &
GPIO_InôSåu˘uª
);

56 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GSM
;

57 
	`GPIO_Inô
(
GSM_PORT
, &
GPIO_InôSåu˘uª
);

58 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
WIFI
;

59 
	`GPIO_Inô
(
WIFI_PORT
, &
GPIO_InôSåu˘uª
);

61 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
POWERKEY
;

62 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

63 
	`GPIO_Inô
(
POWERKEY_PORT
, &
GPIO_InôSåu˘uª
);

65 if(
moduÀ
 =
GISUNLINK_GSM_MODULE
) {

66 
	`COMM_HIGH
();

67 
	`WIFI_HIGH
();

68 
	`POWERKEY_LOW
();

69 
	`GSM_LOW
();

71 
	`COMM_LOW
();

72 
	`GSM_HIGH
();

73 
	`POWERKEY_HIGH
();

74 
	`WIFI_LOW
();

76 
	}
}

	@code/User/gisunlink_gpio.h

1 #i‚de‡
__GISUNLINK_GPIO_H


2 
	#__GISUNLINK_GPIO_H


	)

5 
	~"°m32f10x.h
"

7 
	#LED
 
GPIO_Pö_12


	)

8 
	#LED_PORT
 
GPIOA


	)

9 
	#LED_CLK
 
RCC_APB2Pîùh_GPIOA


	)

10 
	#LED_Off
(Ë
LED_PORT
->
BSRR
 = 
LED


	)

11 
	#LED_On
(Ë
LED_PORT
->
BRR
 = 
LED


	)

12 
	#LED_ToggÀ
(Ë
LED_PORT
->
ODR
 ^
LED


	)

15 
	#KEY1
 
GPIO_Pö_12


	)

16 
	#KEY1_PORT
 
GPIOB


	)

17 
	#KEY1_CLK
 
RCC_APB2Pîùh_GPIOB


	)

18 
	#KEY1_Sètus
(Ë
	`GPIO_RódI≈utD©aBô
(
KEY1_PORT
,
KEY1
)

	)

20 
	#KEY2
 
GPIO_Pö_13


	)

21 
	#KEY2_PORT
 
GPIOB


	)

22 
	#KEY2_CLK
 
RCC_APB2Pîùh_GPIOB


	)

23 
	#KEY12_Sètus
(Ë
	`GPIO_RódI≈utD©aBô
(
KEY2_PORT
,
KEY2
)

	)

25 
	#KEY3
 
GPIO_Pö_14


	)

26 
	#KEY3_PORT
 
GPIOB


	)

27 
	#KEY3_CLK
 
RCC_APB2Pîùh_GPIOB


	)

28 
	#KEY3_Sètus
(Ë
	`GPIO_RódI≈utD©aBô
(
KEY3_PORT
,
KEY3
)

	)

30 
	#KEY4
 
GPIO_Pö_15


	)

31 
	#KEY4_PORT
 
GPIOB


	)

32 
	#KEY4_CLK
 
RCC_APB2Pîùh_GPIOB


	)

33 
	#KEY4_Sètus
(Ë
	`GPIO_RódI≈utD©aBô
(
KEY4_PORT
,
KEY4
)

	)

35 
	#KEY5
 
GPIO_Pö_8


	)

36 
	#KEY5_PORT
 
GPIOA


	)

37 
	#KEY5_CLK
 
RCC_APB2Pîùh_GPIOA


	)

38 
	#KEY5_Sètus
(Ë
	`GPIO_RódI≈utD©aBô
(
KEY5_PORT
,
KEY5
)

	)

41 
	#CSCK
 
GPIO_Pö_15


	)

42 
	#CSCK_PORT
 
GPIOA


	)

43 
	#CSCK_CLK
 
RCC_APB2Pîùh_GPIOA


	)

44 
	#CSCK_HIGH
(Ë
CSCK_PORT
->
BSRR
 = 
CSCK


	)

45 
	#CSCK_LOW
(Ë
CSCK_PORT
->
BRR
 = 
CSCK


	)

47 
	#COE
 
GPIO_Pö_4


	)

48 
	#COE_PORT
 
GPIOB


	)

49 
	#COE_CLK
 
RCC_APB2Pîùh_GPIOB


	)

50 
	#COE_HIGH
(Ë
COE_PORT
->
BSRR
 = 
COE


	)

51 
	#COE_LOW
(Ë
COE_PORT
->
BRR
 = 
COE


	)

53 
	#CRCK
 
GPIO_Pö_5


	)

54 
	#CRCK_PORT
 
GPIOB


	)

55 
	#CRCK_CLK
 
RCC_APB2Pîùh_GPIOB


	)

56 
	#CRCK_HIGH
(Ë
CRCK_PORT
->
BSRR
 = 
CRCK


	)

57 
	#CRCK_LOW
(Ë
CRCK_PORT
->
BRR
 = 
CRCK


	)

59 
	#CSER
 
GPIO_Pö_6


	)

60 
	#CSER_PORT
 
GPIOB


	)

61 
	#CSER_CLK
 
RCC_APB2Pîùh_GPIOB


	)

62 
	#CSER_HIGH
(Ë
CSER_PORT
->
BSRR
 = 
CSER


	)

63 
	#CSER_LOW
(Ë
CSER_PORT
->
BRR
 = 
CSER


	)

66 
	#ACCHK
 
GPIO_Pö_4


	)

67 
	#ACCHK_PORT
 
GPIOB


	)

68 
	#ACCHK_CLK
 
RCC_APB2Pîùh_GPIOB


	)

69 
	#ACCHK_HIGH
(Ë
ACCHK_PORT
->
BSRR
 = 
ACCHK


	)

70 
	#ACCHK_LOW
(Ë
ACCHK_PORT
->
BRR
 = 
ACCHK


	)

73 
	#I2C
 
GPIOB


	)

74 
	#RCC_I2C_PORT
 
RCC_APB2Pîùh_GPIOB


	)

75 
	#I2C_SCL_PIN
 
GPIO_Pö_9


	)

76 
	#I2C_SDA_PIN
 
GPIO_Pö_8


	)

79 
	#I2C_SCL_1
(Ë
I2C
->
BSRR
 = 
I2C_SCL_PIN


	)

80 
	#I2C_SCL_0
(Ë
I2C
->
BRR
 = 
I2C_SCL_PIN


	)

82 
	#I2C_SDA_1
(Ë
I2C
->
BSRR
 = 
I2C_SDA_PIN


	)

83 
	#I2C_SDA_0
(Ë
I2C
->
BRR
 = 
I2C_SDA_PIN


	)

85 
	#I2C_SDA_READ
(Ë((
I2C
->
IDR
 & 
I2C_SDA_PIN
Ë!0Ë

	)

86 
	#I2C_SCL_READ
(Ë((
I2C
->
IDR
 & 
I2C_SCL_PIN
Ë!0Ë

	)

90 
	#COMM
 
GPIO_Pö_7


	)

91 
	#COMM_PORT
 
GPIOB


	)

92 
	#COMM_CLK
 
RCC_APB2Pîùh_GPIOB


	)

93 
	#COMM_HIGH
(Ë
COMM_PORT
->
BSRR
 = 
COMM


	)

94 
	#COMM_LOW
(Ë
COMM_PORT
->
BRR
 = 
COMM


	)

96 
	#GSM
 
GPIO_Pö_8


	)

97 
	#GSM_PORT
 
GPIOA


	)

98 
	#GSM_CLK
 
RCC_APB2Pîùh_GPIOA


	)

99 
	#GSM_HIGH
(Ë
GSM_PORT
->
BSRR
 = 
GSM


	)

100 
	#GSM_LOW
(Ë
GSM_PORT
->
BRR
 = 
GSM


	)

102 
	#POWERKEY
 
GPIO_Pö_11


	)

103 
	#POWERKEY_PORT
 
GPIOA


	)

104 
	#POWERKEY_CLK
 
RCC_APB2Pîùh_GPIOA


	)

105 
	#POWERKEY_HIGH
(Ë
POWERKEY_PORT
->
BSRR
 = 
POWERKEY


	)

106 
	#POWERKEY_LOW
(Ë
POWERKEY_PORT
->
BRR
 = 
POWERKEY


	)

108 
	#WIFI
 
GPIO_Pö_15


	)

109 
	#WIFI_PORT
 
GPIOB


	)

110 
	#WIFI_CLK
 
RCC_APB2Pîùh_GPIOB


	)

111 
	#WIFI_HIGH
(Ë
WIFI_PORT
->
BSRR
 = 
WIFI


	)

112 
	#WIFI_LOW
(Ë
WIFI_PORT
->
BRR
 = 
WIFI


	)

115 
	mGISUNLINK_WIFI_MODULE
,

116 
	mGISUNLINK_GSM_MODULE


119 
gisu∆ök_gpio_c⁄figuøti⁄
();

121 
gisu∆ök_£À˘_√tw‹k_moduÀ
(
uöt8_t
 
moduÀ
);

	@code/User/gisunlink_key.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~"gisu∆ök.h
"

17 
	~"gisu∆ök_key.h
"

18 
	~"gisu∆ök_c⁄f.h
"

19 
	~"gisu∆ök_dñay.h
"

20 
	~"gisu∆ök_sy°em.h
"

21 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

23 
	#KEY_RELEASE
 0

	)

24 
	#KEY_PRESS
 1

	)

25 
	#KEY_PRESS_CHK
 2

	)

26 
	#KEY_LONG_PRESS_CHK
 3

	)

27 
	#KEY_LONG_PRESS_RELEASE
 4

	)

29 
	#GISUNLINK_NET_KEY
 
	`GPIO_RódI≈utD©aBô
(
GPIOB
,
GPIO_Pö_12
)

	)

30 
	#GISUNLINK_MOED_KEY
 
	`GPIO_RódI≈utD©aBô
(
GPIOB
,
GPIO_Pö_13
)

	)

31 
	#GISUNLINK_BAK_KEY
 
	`GPIO_RódI≈utD©aBô
(
GPIOB
,
GPIO_Pö_14
)

	)

33 
	s_gisu∆ök_key
 {

34 vﬁ©ûê
uöt8_t
 
	mhasKeyPªss
;

35 } 
	tgisu∆ök_key
, *
	tPgisu∆ök_key
;

37 
gisu∆ök_key
 
	gkey
 = {0};

39 
	$gisu∆ök_key_ªÀa£
() {

40 
key
.
hasKeyPªss
 = 
KEY_NONE
;

41 
	}
}

43 
	$gisu∆ök_key_öô
() {

44 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

46 
	`gisu∆ök_key_ªÀa£
();

47 
	`SysTick_C⁄fig
(
Sy°emC‹eClock
/1000);

49 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
 ,
ENABLE
);

50 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
|
GPIO_Pö_13
|
GPIO_Pö_14
;

51 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

52 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

53 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

54 
	}
}

56 
uöt8_t
 
	$gisu∆ök_key_ªad
() {

57 if(
GISUNLINK_NET_KEY
 == 0) {

58  
NET_KEY
;

61 if(
GISUNLINK_MOED_KEY
 == 0) {

62  
MOED_KEY
;

65 if(
GISUNLINK_BAK_KEY
 == 0) {

66  
BAK_KEY
;

69  
KEY_NONE
;

70 
	}
}

72 
	$gisu∆ök_gë_sˇn
() {

73 
uöt32_t
 
L⁄gPªssTime
 = 0;

74 
uöt8_t
 
°©e
 = 
KEY_RELEASE
;

75 
uöt8_t
 
La°PªeKey
 = 0, 
CurPªssKey
 = 0;

76 
CurPªssKey
 = 
	`gisu∆ök_key_ªad
();

78 
°©e
) {

79 
KEY_RELEASE
:

80 if(
CurPªssKey
 !
La°PªeKey
)

81 
°©e
 = 
KEY_PRESS
;

83 
KEY_PRESS
:

84 if(
CurPªssKey
 =
La°PªeKey
)

85 
°©e
 = 
KEY_PRESS_CHK
;

87 
°©e
 = 
KEY_RELEASE
;

89 
KEY_PRESS_CHK
:

90 if(
CurPªssKey
 =
La°PªeKey
) {

91 
°©e
 = 
KEY_LONG_PRESS_CHK
;

93 
°©e
 = 
KEY_RELEASE
;

94 
key
.
hasKeyPªss
 = 
La°PªeKey
|
KEY_SHORT
;

97 
KEY_LONG_PRESS_CHK
:

98 if(
CurPªssKey
 =
La°PªeKey
) {

99 if(0 =
L⁄gPªssTime
) {

100 
L⁄gPªssTime
 = 
	`gisu∆ök_sy°em_gë_time_tick
();

102 if(
	`gisu∆ök_sy°em_gë_time_tick
(Ë>(
L⁄gPªssTime
 + 1500)) {

103 
L⁄gPªssTime
 = 0;

104 
°©e
 = 
KEY_LONG_PRESS_RELEASE
;

105 
key
.
hasKeyPªss
 = 
La°PªeKey
|
KEY_LONG
;

108 
L⁄gPªssTime
 = 0;

109 
°©e
 = 
KEY_RELEASE
;

110 
key
.
hasKeyPªss
 = 
La°PªeKey
|
KEY_SHORT
;

113 
KEY_LONG_PRESS_RELEASE
:

114 if(
CurPªssKey
 !
La°PªeKey
) {

115 
°©e
 = 
KEY_RELEASE
;

118 if(
CurPªssKey
 =
KEY_NONE
 && 
La°PªeKey
 == KEY_NONE) {

119 
°©e
 = 
KEY_RELEASE
;

125 
La°PªeKey
 = 
CurPªssKey
;

126 
	}
}

128 
	$gisu∆ök_key_sy°em_sˇn
() {

129 
uöt8_t
 
timî
 = 0;

130 if(
timî
++ >= 20) {

131 
timî
 = 0;

132 
	`gisu∆ök_gë_sˇn
();

134 
	}
}

136 
uöt8_t
 
	$gisu∆ök_gë_key
() {

137  
key
.
hasKeyPªss
;

138 
	}
}

140 
	$gisu∆ök_key_sˇn
(
gisu∆ök
 *
globÆ
) {

141 
	`gisu∆ök_gë_key
()) {

142 
NET_KEY
|
KEY_SHORT
:

143 
	`gisu∆ök_key_ªÀa£
();

145 
MOED_KEY
|
KEY_SHORT
:

146 
	`gisu∆ök_key_ªÀa£
();

148 
NET_KEY
|
KEY_LONG
:

149 
	`gisu∆ök_key_ªÀa£
();

150 if(
globÆ
->
c⁄f
.
mode
 =
SYSTEM_WIFI_MODE
) {

151 
	`gisu∆ök_√tw‹k_moduÀ_wrôe
(
GISUNLINK_NETWORK_RESET
,
NULL
,0);

154 
MOED_KEY
|
KEY_LONG
:

155 
	`gisu∆ök_key_ªÀa£
();

156 
	`gisu∆ök_£t_comLi°_c⁄f
(
globÆ
);

157 if(
globÆ
->
c⁄f
.
mode
 =
SYSTEM_GSM_MODE
) {

158 
globÆ
->
c⁄f
.
mode
 = 
SYSTEM_WIFI_MODE
;

159 } if(
globÆ
->
c⁄f
.
mode
 =
SYSTEM_WIFI_MODE
){

160 
globÆ
->
c⁄f
.
mode
 = 
SYSTEM_GSM_MODE
;

162 
	`gisu∆ök_£t_sy°em_c⁄f
(
globÆ
);

163 
	`DñayMs
(100);

164 
	`gisu∆ök_sy°em_so·_ª£t
();

167 
	}
}

	@code/User/gisunlink_key.h

13 #i‚de‡
__GISUNLINK_KEY_H__


14 
	#__GISUNLINK_KEY_H__


	)

16 
	~"°m32f10x.h
"

17 
	~"gisu∆ök.h
"

19 #ifde‡
__˝lu•lus


24 
	#NET_KEY
 0x01

	)

25 
	#MOED_KEY
 0x02

	)

26 
	#BAK_KEY
 0x04

	)

28 
	#KEY_SHORT
 0x40

	)

29 
	#KEY_LONG
 0x80

	)

30 
	#KEY_NONE
 0x00

	)

35 
gisu∆ök_key_öô
();

40 
gisu∆ök_key_sy°em_sˇn
();

45 
gisu∆ök_key_sˇn
(
gisu∆ök
 *
globÆ
);

47 #ifde‡
__˝lu•lus


	@code/User/gisunlink_lcd.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~"GUI.h
"

17 
	~"Lcd_Drivî.h
"

18 
	~"gisu∆ök_lcd.h
"

19 
	~"gisu∆ök_timî.h
"

20 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

21 
	~"gisu∆ök_dñay.h
"

23 
	#DEV_SN_PREFIX
 "…Ë±∏ ∂±¬Î:"

	)

24 
	#DEV_VER_PREFIX
 "…Ë±∏∞Ê±æ∫≈:"

	)

26 
	#LCD_NET_IDLE
 "◊¥Ã¨:ø’œ–÷–"

	)

27 
	#LCD_NET_START_CONNECT
 "◊¥Ã¨:ø™ º¡¨Ω”"

	)

28 
	#LCD_NET_CONNECTING
 "◊¥Ã¨:Õ¯¬Á¡¨Ω”÷–"

	)

29 
	#LCD_NET_CONNECTED
 "◊¥Ã¨:Õ¯¬Á“—¡¨Ω”"

	)

30 
	#LCD_NET_DISCONNECTED
 "◊¥Ã¨:“—∂œø™Õ¯¬Á"

	)

31 
	#LCD_NET_RECONNECTING
 "◊¥Ã¨:Õ¯¬Á÷ÿ¡¨÷–"

	)

32 
	#LCD_NET_ENT_CONFIG
 "◊¥Ã¨:Ω¯»Î≈‰∂‘"

	)

33 
	#LCD_NET_EXI_CONFIG
 "◊¥Ã¨:ÕÀ≥ˆ≈‰∂‘"

	)

34 
	#LCD_NET_SAVE_CONFIG
 "◊¥Ã¨:±£¥Ê≈‰∂‘"

	)

35 
	#LCD_NET_TIME_SUCCEED
 "◊¥Ã¨: ±÷”Õ¨≤Ω≥…π¶"

	)

36 
	#LCD_NET_TIME_FAILED
 "◊¥Ã¨: ±÷”Õ¨≤Ω÷–"

	)

38 
	#LCD_CONNECTED_SERVICE
 "◊¥Ã¨:“—¡¨…œ∆ΩÃ®"

	)

39 
	#LCD_DISCONNECTED_SERVICE
 "◊¥Ã¨:“—∂œø™∆ΩÃ®"

	)

41 
	#LCD_REGISTER_GSM_SUCCEED
 "◊¥Ã¨:GSM◊¢≤·≥…π¶"

	)

42 
	#LCD_REGISTER_GSM_FAILED
 "◊¥Ã¨:GSM◊¢≤· ß∞‹"

	)

44 
	#MAX_STRING_TASK
 4

	)

45 
	#MAX_DIGIT_TASK
 10

	)

48 
	mREFRESH_DIGIT
,

49 
	mREFRESH_STRING
,

50 } 
	tREFRESH_TYPE
;

53 
	mREFRESH_DISENABLE
,

54 
	mREFRESH_ENABLE
,

55 } 
	tREFRESH_STATE
;

57 
	s_gisu∆ök_co‹
 {

58 
uöt8_t
 
	mx
;

59 
uöt8_t
 
	my
;

60 } 
	tgisu∆ök_co‹
;

62 
	s_gisu∆ök_ª‰esh_digô
 {

63 
uöt8_t
 
	mª‰esh
;

64 
gisu∆ök_co‹
 
	mco‹
;

65 
uöt16_t
 
	mcﬁ‹
;

66 } 
	tgisu∆ök_ª‰esh_digô
;

68 
	s_gisu∆ök_ª‰esh_°rög
 {

69 
uöt8_t
 
	mª‰esh
;

70 
gisu∆ök_co‹
 
	mco‹
;

71 
uöt16_t
 
	mcﬁ‹
;

72 
uöt8_t
 
	mbuf„r
[27];

73 } 
	tgisu∆ök_ª‰esh_°rög
;

75 
gisu∆ök_ª‰esh_digô
 
	gª‰esh_digô
[
MAX_DIGIT_TASK
];

76 
gisu∆ök_ª‰esh_°rög
 
	gª‰esh_°rög
[
MAX_STRING_TASK
];

78 
	$gisu∆ök_lcd_öô_ui
() {

79 
	`Gui_DøwF⁄t_GBK16
(5,10,
DGRAY
,
BLACK
,(
u8
 *)"–≈∫≈:");

80 
	`Gui_DøwF⁄t_GBK16
(45,10,
DGRAY
,
BLACK
,(
u8
 *)"00");

81 
	`Gui_DøwF⁄t_GBK16
(130,10,
DGRAY
,
BLACK
,(
u8
 *)"◊¥Ã¨:ø’œ–÷–");

83 
	`Gui_DøwLöe
(0,35,220,35,
MAROON
);

85 
	`Gui_DøwLöe
(0,125,220,125,
MAROON
);

87 
	`Gui_DøwF⁄t_GBK16
(6,134,
TEAL
,
BLACK
,(
u8
 *)"…Ë±∏∞Ê±æ∫≈:GSL000000000000");

88 
	`Gui_DøwF⁄t_GBK16
(6,154,
TEAL
,
BLACK
,(
u8
 *)"…Ë±∏ ∂±¬Î:000000000000000");

89 
	}
}

91 
	$gisu∆ök_lcd_öô
() {

93 
	`Lcd_Inô
();

94 
	`Lcd_CÀ¨
(
BLACK
);

96 
	`gisu∆ök_lcd_öô_ui
();

97 
LCD_LED_SET
;

98 
ª‰esh_°rög
[0].
ª‰esh
 = 
REFRESH_DISENABLE
;

99 
ª‰esh_°rög
[0].
cﬁ‹
 = 
DGRAY
;

100 
ª‰esh_°rög
[0].
co‹
.
x
 = 45;Ñe‰esh_°rög[0].co‹.
y
 = 10;

102 
ª‰esh_°rög
[1].
ª‰esh
 = 
REFRESH_DISENABLE
;

103 
ª‰esh_°rög
[1].
cﬁ‹
 = 
DGRAY
;

104 
ª‰esh_°rög
[1].
co‹
.
x
 = 130;Ñe‰esh_°rög[1].co‹.
y
 = 10;

106 
ª‰esh_°rög
[2].
ª‰esh
 = 
REFRESH_DISENABLE
;

107 
ª‰esh_°rög
[2].
cﬁ‹
 = 
TEAL
;

108 
ª‰esh_°rög
[2].
co‹
.
x
 = 6;Ñe‰esh_°rög[2].co‹.
y
 = 134;

110 
ª‰esh_°rög
[3].
ª‰esh
 = 
REFRESH_DISENABLE
;

111 
ª‰esh_°rög
[3].
cﬁ‹
 = 
TEAL
;

112 
ª‰esh_°rög
[3].
co‹
.
x
 = 6;Ñe‰esh_°rög[3].co‹.
y
 = 154;

114 
ª‰esh_digô
[0].
ª‰esh
 = 
REFRESH_DISENABLE
;

115 
ª‰esh_digô
[0].
co‹
.
x
 = 15;Ñe‰esh_digô[0].co‹.
y
 = 45;

117 
ª‰esh_digô
[1].
ª‰esh
 = 
REFRESH_DISENABLE
;

118 
ª‰esh_digô
[1].
co‹
.
x
 = 55;Ñe‰esh_digô[1].co‹.
y
 = 45;

120 
ª‰esh_digô
[2].
ª‰esh
 = 
REFRESH_DISENABLE
;

121 
ª‰esh_digô
[2].
co‹
.
x
 = 95;Ñe‰esh_digô[2].co‹.
y
 = 45;

123 
ª‰esh_digô
[3].
ª‰esh
 = 
REFRESH_DISENABLE
;

124 
ª‰esh_digô
[3].
co‹
.
x
 = 135;Ñe‰esh_digô[3].co‹.
y
 = 45;

126 
ª‰esh_digô
[4].
ª‰esh
 = 
REFRESH_DISENABLE
;

127 
ª‰esh_digô
[4].
co‹
.
x
 = 175;Ñe‰esh_digô[4].co‹.
y
 = 45;

129 
ª‰esh_digô
[5].
ª‰esh
 = 
REFRESH_DISENABLE
;

130 
ª‰esh_digô
[5].
co‹
.
x
 = 15;Ñe‰esh_digô[5].co‹.
y
 = 85;

132 
ª‰esh_digô
[6].
ª‰esh
 = 
REFRESH_DISENABLE
;

133 
ª‰esh_digô
[6].
co‹
.
x
 = 55;Ñe‰esh_digô[6].co‹.
y
 = 85;

135 
ª‰esh_digô
[7].
ª‰esh
 = 
REFRESH_DISENABLE
;

136 
ª‰esh_digô
[7].
co‹
.
x
 = 95;Ñe‰esh_digô[7].co‹.
y
 = 85;

138 
ª‰esh_digô
[8].
ª‰esh
 = 
REFRESH_DISENABLE
;

139 
ª‰esh_digô
[8].
co‹
.
x
 = 135;Ñe‰esh_digô[8].co‹.
y
 = 85;

141 
ª‰esh_digô
[9].
ª‰esh
 = 
REFRESH_DISENABLE
;

142 
ª‰esh_digô
[9].
co‹
.
x
 = 175;Ñe‰esh_digô[9].co‹.
y
 = 85;

143 
	}
}

145 *
	$ªvî£
(*
s
) {

146 
ãmp
;

147 *
p
 = 
s
;

148 *
q
 = 
s
;

149 *
q
) {

150 ++
q
;

153 
q
--;

155 
q
 > 
p
){

156 
ãmp
 = *
p
;

157 *
p
++ = *
q
;

158 *
q
-- = 
ãmp
;

160  
s
;

161 
	}
}

163 *
	$gisu∆ök_ôﬂ
(
n
) {

164 
i
 = 0,
i¢eg©ive
 = 0;

165 
s
[8];

166 
	`mem£t
(
s
,0x0,8);

167 if((
i¢eg©ive
 = 
n
) < 0) {

168 
n
 = -n;

172 
s
[
i
++] = 
n
%10 + '0';

173 
n
 =Ç/10;

174 }
n
 > 0);

176 if(
i¢eg©ive
 < 0) {

177 
s
[
i
++] = '-';

179 
s
[
i
] = '\0';

180  
	`ªvî£
(
s
);

181 
	}
}

183 *
	$gisu∆ök_ˇlc_upd©e_¥ogªss
(
uöt32_t
 
fúmw¨e_size
, uöt32_à
å™s„r_off£t
, 
uöt16_t
 
bur°
) {

184 
fúmw¨e_bur°
 = ((
fúmw¨e_size
/
bur°
)/100.0) * burst;

185 
uöt16_t
 
¥ogªss
 = 100 - ((
fúmw¨e_size
 - 
å™s„r_off£t
)/
fúmw¨e_bur°
);

186 
°©us_°rög
[18] = {0};

187 
	`¢¥ötf
(
°©us_°rög
,18,"%s%02d%s",
LCD_STATE_UPDATEING
,
¥ogªss
,"%");

188  
°©us_°rög
;

189 
	}
}

191 
	$gisu∆ök_lcd_£t_≠Rssi
(sig√d 
≠Rssi
) {

192 c⁄° *
°rög
 = 
	`gisu∆ök_ôﬂ
(
≠Rssi
);

193 
gisu∆ök_ª‰esh_°rög
 *
°rög_èsk
 = 
NULL
;

194 
uöt8_t
 
°rög_Àn
 = 
	`°æí
(
°rög
);

195 
uöt8_t
 
Rssi
[5] = {0x20,0x20,0x20,0x20,0x00};

196 
°rög_èsk
 = &
ª‰esh_°rög
[
RSSI_STRING
];

197 
	`mem˝y
(
Rssi
,
°rög
,
°rög_Àn
);

198 
	`mem˝y
(
°rög_èsk
->
buf„r
,
Rssi
,5);

199 
°rög_èsk
->
co‹
.
x
 = 45;°rög_èsk->co‹.
y
 = 10;

200 
°rög_èsk
->
ª‰esh
 = 
REFRESH_ENABLE
;

201 
	}
}

203 
	$gisu∆ök_lcd_£t_°©us
(c⁄° *
°rög
) {

204 
uöt8_t
 
°rög_Àn
 = 0;

205 
uöt8_t
 
À·_off£t
 = 17;

206 
gisu∆ök_ª‰esh_°rög
 *
°rög_èsk
 = 
NULL
;

207 
uöt8_t
 
°©us
[18] = {0x20,0x20,0x20,0x20,0x20,

211 if(
°rög
) {

212 
°rög_Àn
 = 
	`°æí
(
°rög
);

213 
°rög_èsk
 = &
ª‰esh_°rög
[
STATUS_STRING
];

214 if(
°rög_Àn
 <
À·_off£t
) {

215 
À·_off£t
 -
°rög_Àn
;

216 
°rög_èsk
->
co‹
.
x
 = 80;°rög_èsk->co‹.
y
 = 10;

217 
	`mem˝y
(
°©us
 + 
À·_off£t
,
°rög
,
°rög_Àn
);

218 
	`mem˝y
(
°rög_èsk
->
buf„r
,
°©us
,18);

219 
°rög_èsk
->
ª‰esh
 = 
REFRESH_ENABLE
;

222 
	}
}

224 
	$gisu∆ök_lcd_£t_bŸtom
(c⁄° *
°rög
, 
uöt8_t
 
ty≥
) {

225 
uöt8_t
 
°rög_Àn
 = 0;

226 
uöt8_t
 
¥efix_Àn
 = 0;

227 
gisu∆ök_ª‰esh_°rög
 *
°rög_èsk
 = 
NULL
;

229 
uöt8_t
 
°rög_buf
[27] = {0x20,0x20,0x20,0x20,0x20,

236 if(
°rög
 =
NULL
) {

240 
ty≥
) {

241 
VERSION_STRING
:

242 
¥efix_Àn
 = 
	`°æí
(
DEV_VER_PREFIX
);

243 
	`mem˝y
(
°rög_buf
,
DEV_VER_PREFIX
,
¥efix_Àn
);

244 
°rög_èsk
 = &
ª‰esh_°rög
[
VERSION_STRING
];

246 
SN_STRING
:

247 
¥efix_Àn
 = 
	`°æí
(
DEV_SN_PREFIX
);

248 
	`mem˝y
(
°rög_buf
,
DEV_SN_PREFIX
,
¥efix_Àn
);

249 
°rög_èsk
 = &
ª‰esh_°rög
[
SN_STRING
];

253 if(
°rög
 && 
°rög_èsk
) {

254 
°rög_Àn
 = 
	`°æí
(
°rög
);

255 if((
°rög_Àn
 + 
¥efix_Àn
) <= 27) {

256 
	`mem˝y
(
°rög_buf
 + 
¥efix_Àn
,
°rög
,
°rög_Àn
);

257 
	`mem˝y
(
°rög_èsk
->
buf„r
,
°rög_buf
,(string_buf));

258 
°rög_èsk
->
ª‰esh
 = 
REFRESH_ENABLE
;

261 
	}
}

263 
	$gisu∆ök_lcd_£t_p‹t_°©us
(
uöt8_t
 
id
,uöt8_à
°©us
) {

264 if(
id
 < 
MAX_COM_QUANTITY
 && 
°©us
 <
PORT_BREAKDOWN
) {

265 
gisu∆ök_ª‰esh_digô
 *
èsk
 = &
ª‰esh_digô
[
id
];

266 
uöt16_t
 
cﬁ‹
 = 
GREEN
;

267 
°©us
) {

268 
PORT_BREAKDOWN
:

269 
cﬁ‹
 = 
GRAY2
;

271 
PORT_CHARGEING
:

272 
cﬁ‹
 = 
RED
;

274 
PORT_LEISURE
:

275 
cﬁ‹
 = 
DARK_GREEN
;

278 if(
cﬁ‹
 !
èsk
->color) {

279 
èsk
->
ª‰esh
 = 
REFRESH_ENABLE
;

280 
èsk
->
cﬁ‹
 = color;

283 
	}
}

285 
	$gisu∆ök_lcd_ª‰esh_√tw‹k_°©e
(
uöt8_t
 
°©e
) {

286 
°©e
)

288 
GISUNLINK_NETMANAGER_IDLE
:

289 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_IDLE
);

291 
GISUNLINK_NETMANAGER_START
:

292 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_START_CONNECT
);

294 
GISUNLINK_NETMANAGER_CONNECTING
:

295 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_CONNECTING
);

297 
GISUNLINK_NETMANAGER_CONNECTED
:

298 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_CONNECTED
);

300 
GISUNLINK_NETMANAGER_DISCONNECTED
:

301 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_DISCONNECTED
);

303 
GISUNLINK_NETMANAGER_RECONNECTING
:

304 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_RECONNECTING
);

306 
GISUNLINK_NETMANAGER_ENT_CONFIG
:

307 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_ENT_CONFIG
);

309 
GISUNLINK_NETMANAGER_EXI_CONFIG
:

310 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_EXI_CONFIG
);

312 
GISUNLINK_NETMANAGER_SAVE_CONFIG
:

313 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_SAVE_CONFIG
);

315 
GISUNLINK_NETMANAGER_TIME_SUCCEED
:

316 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_TIME_SUCCEED
);

318 
GISUNLINK_NETMANAGER_TIME_FAILED
:

319 
	`gisu∆ök_lcd_£t_°©us
(
LCD_NET_TIME_FAILED
);

321 
GISUNLINK_NETMANAGER_CONNECTED_SER
:

322 
	`gisu∆ök_lcd_£t_°©us
(
LCD_CONNECTED_SERVICE
);

324 
GISUNLINK_NETMANAGER_DISCONNECTED_SER
:

325 
	`gisu∆ök_lcd_£t_°©us
(
LCD_DISCONNECTED_SERVICE
);

327 
GISUNLINK_NETMANAGER_GSM_CONNECTED
:

328 
	`gisu∆ök_lcd_£t_°©us
(
LCD_REGISTER_GSM_SUCCEED
);

330 
GISUNLINK_NETMANAGER_GSM_DISCONNECTED
:

331 
	`gisu∆ök_lcd_£t_°©us
(
LCD_REGISTER_GSM_FAILED
);

336 
	}
}

338 
	$gisu∆ök_lcd_ª‰esh
() {

339 
uöt8_t
 
ödex
 = 0;

341 
ödex
 = 0; index < 
MAX_DIGIT_TASK
; index++) {

342 
gisu∆ök_ª‰esh_digô
 *
digô_èsk
 = &
ª‰esh_digô
[
ödex
];

343 if(
digô_èsk
->
ª‰esh
 =
REFRESH_ENABLE
) {

344 
digô_èsk
->
ª‰esh
 = 
REFRESH_DISENABLE
;

345 
	`Gui_DøwF⁄t_Num32
(
digô_èsk
->
co‹
.
x
,digô_èsk->co‹.
y
,digô_èsk->
cﬁ‹
,
BLACK
,
ödex
);

346 
	`DñayMs
(10);

350 
ödex
 = 0; index < 
MAX_STRING_TASK
; index++) {

351 
gisu∆ök_ª‰esh_°rög
 *
°rög_èsk
 = &
ª‰esh_°rög
[
ödex
];

352 if(
°rög_èsk
->
ª‰esh
 =
REFRESH_ENABLE
) {

353 
°rög_èsk
->
ª‰esh
 = 
REFRESH_DISENABLE
;

354 
	`Gui_DøwF⁄t_GBK16
(
°rög_èsk
->
co‹
.
x
,°rög_èsk->co‹.
y
,°rög_èsk->
cﬁ‹
,
BLACK
,°rög_èsk->
buf„r
);

355 
	`DñayMs
(10);

358 
	}
}

	@code/User/gisunlink_lcd.h

13 #i‚de‡
__GISUNLINK_LCD_H__


14 
	#__GISUNLINK_LCD_H__


	)

16 
	~"°m32f10x.h
"

18 #ifde‡
__˝lu•lus


23 
	#LCD_STATE_START_UPDATE
 "◊¥Ã¨:ø™ º…˝º∂"

	)

24 
	#LCD_STATE_UPDATEING
 "◊¥Ã¨:…˝º∂÷–"

	)

25 
	#LCD_STATE_UPDATE_FAILED
 "◊¥Ã¨:…˝º∂ ß∞‹"

	)

26 
	#LCD_STATE_UPDATE_SUCCEED
 "◊¥Ã¨:…˝º∂≥…π¶"

	)

27 
	#LCD_STATE_UPDATE_TIMEOUT
 "◊¥Ã¨:…˝º∂≥¨ ±"

	)

28 
	#LCD_STATE_EXIT_UPDATE
 "◊¥Ã¨:ÕÀ≥ˆ…˝º∂"

	)

31 
PORT_CHARGEING
 = 0x0,

32 
PORT_LEISURE
 = 0x1,

33 
PORT_BREAKDOWN
 = 0x2,

34 } 
	tPORT_STATUS
;

37 
RSSI_STRING
,

38 
STATUS_STRING
,

39 
VERSION_STRING
,

40 
SN_STRING
,

41 } 
	tSTRING_TYPE
;

43 
gisu∆ök_lcd_öô
();

45 
gisu∆ök_lcd_£t_≠Rssi
(sig√d 
≠Rssi
);

47 
gisu∆ök_lcd_£t_°©us
(c⁄° *
°rög
);

49 
gisu∆ök_lcd_£t_bŸtom
(c⁄° *
°rög
, 
uöt8_t
 
ty≥
);

51 *
gisu∆ök_ôﬂ
(
n
);

53 *
gisu∆ök_ˇlc_upd©e_¥ogªss
(
uöt32_t
 
fúmw¨e_size
, uöt32_à
å™s„r_off£t
, 
uöt16_t
 
bur°
);

55 
gisu∆ök_lcd_£t_p‹t_°©us
(
uöt8_t
 
id
,uöt8_à
°©us
);

57 
gisu∆ök_lcd_ª‰esh_√tw‹k_°©e
(
uöt8_t
 
°©e
);

59 
gisu∆ök_lcd_ª‰esh
();

61 #ifde‡
__˝lu•lus


	@code/User/gisunlink_network_module.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"gisu∆ök.h
"

16 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

18 
	#GISUNLINK_PACKET_HEAD
 0XAA

	)

19 
	#GISUNLINK_PACKET_TAIL
 0XBB

	)

20 
	#GISUNLINK_PACKET_HEAD_SIZE
 1

	)

21 
	#GISUNLINK_PACKET_LEN_SIZE
 2

	)

22 
	#GISUNLINK_PACKET_FLOW_SIZE
 4

	)

23 
	#GISUNLINK_PACKET_DIR_SIZE
 1

	)

24 
	#GISUNLINK_PACKET_CMD_SIZE
 1

	)

25 
	#GISUNLINK_PACKET_CHKSUM_SIZE
 2

	)

26 
	#GISUNLINK_PACKET_TAIL_SIZE
 1

	)

28 
	#GISUNLINK_PACKET_HEAD_TAIL_SIZE
 2

	)

30 
	#UART_PACKET_NO_HEAD_AND_TAIL_SIZE
 (
GISUNLINK_PACKET_LEN_SIZE
 + 
GISUNLINK_PACKET_FLOW_SIZE
 + 
GISUNLINK_PACKET_DIR_SIZE
 + 
GISUNLINK_PACKET_CMD_SIZE
 + 
GISUNLINK_PACKET_CHKSUM_SIZE
)

	)

32 
	#UART_PACKET_BUF_MAX_LEN
 (512)

	)

33 
	#UART_PACKET_BUF_MIN_LEN
 (
GISUNLINK_PACKET_HEAD_TAIL_SIZE
 + 
UART_PACKET_NO_HEAD_AND_TAIL_SIZE
)

	)

35 
	#UART_PACKET_CMD_OFFSET
 (
GISUNLINK_PACKET_HEAD_SIZE
 + 
GISUNLINK_PACKET_LEN_SIZE
 + 
GISUNLINK_PACKET_FLOW_SIZE
 + 
GISUNLINK_PACKET_DIR_SIZE
)

	)

36 
	#UART_PACKET_DATA_OFFSET
 (
GISUNLINK_PACKET_HEAD_SIZE
 + 
GISUNLINK_PACKET_LEN_SIZE
 + 
GISUNLINK_PACKET_FLOW_SIZE
 + 
GISUNLINK_PACKET_DIR_SIZE
 + 
GISUNLINK_PACKET_CMD_SIZE
)

	)

38 
	#SET_NEXT_OFFSET
(
cur_off£t
,
size
Ë(cur_off£tË+(size)

	)

39 
	#SET_NEXT_LEN
(
cur_Àngth
,
Àngth
Ë(cur_ÀngthË÷ígth)

	)

40 
	#CLEAR_RECV_MODE
(
mode
,
√t_Àn
,
off£t
Ë(modeË
GISUNLINK_RECV_HEAD
; (√t_ÀnË0; (off£t)++;

	)

41 
	#CPOY_DATA
(
§c
,
d°
,
off£t
,
Àn
Ë
	`mem˝y
(§¯+ off£t,d°,Àn);off£à+Àn;

	)

44 
	mGISUNLINK_RECV_HEAD
,

45 
	mGISUNLINK_RECV_LEN
,

46 
	mGISUNLINK_RECV_FLOW
,

47 
	mGISUNLINK_RECV_DIR
,

48 
	mGISUNLINK_RECV_CMD
,

49 
	mGISUNLINK_RECV_DATA
,

50 
	mGISUNLINK_RECV_CHECK_SUM
,

51 
	mGISUNLINK_RECV_TAIL
,

55 
	mDMA_TX_CHANNEL
,

56 
	mDMA_RX_CHANNEL
,

57 } 
	tUSART_DMA_CHANNEL_ID
;

60 
uöt8_t
 
	mRxBuf„r
[
USART_BUF_DIMENSION
][
USART_RX_BUFFER_SIZE
];

61 
uöt16_t
 
	mRxEndIndex
[
USART_BUF_DIMENSION
];

62 
FœgSètus
 
	mRxEndFœg
[
USART_BUF_DIMENSION
];

63 
uöt8_t
 
	mRxDimísi⁄
;

64 }
	tUßπ_RecvBuf
;

66 
	s_gisu∆ök_√tw‹k_moduÀ_˘æ
 {

67 
USART_ID
 
	mu¨tID
;

68 
uöt32_t
 
	mÊowID
;

69 
uöt32_t
 
	mªq_id
;

70 
USART_Ty≥Def
 *
	mUSART
;

71 
DMA_Ch™√l_Ty≥Def
 *
	mtx_ch™√l
;

72 
DMA_Ch™√l_Ty≥Def
 *
	mrx_ch™√l
;

73 
uöt8_t
 
	mtx_buf„r
[
USART_TX_BUFFER_SIZE
];

74 
gisu∆ök_ªcv_‰ame
 
	mªcv
;

75 } 
	tgisu∆ök_√tw‹k_moduÀ_˘æ
;

78 
	s_gisu∆ök_po°_öfo
 {

79 
uöt8_t
 
	mid_tŸÆ
;

80 
uöt8_t
 
	msig«l
;

81 
ch¨ge_com
 *
	mcomLi°
[
MAX_COM_QUANTITY
];

82 
uöt32_t
 
	míîgyOff£t
[
MAX_COM_QUANTITY
];

83 
uöt16_t
 
	micRe£t
[
MAX_COM_QUANTITY
];

84 } 
	tgisu∆ök_po°_öfo
;

87 
	mMQTT_PUBLISH_NOACK
,

88 
	mMQTT_PUBLISH_NEEDACK
,

89 } 
	tMQTT_PUBLISH_ACK
;

91 
Ußπ_RecvBuf
 
	gRecvBuf
;

92 
gisu∆ök_√tw‹k_moduÀ_˘æ
 
	gmoduÀ_˘æ
;

93 
gisu∆ök_‰ame
 
	g‰ame_c⁄°ru˘i⁄
;

94 
gisu∆ök_‰ame
 
	gpo°_c⁄°ru˘i⁄
;

96 
	tGISUNLINK_MESSAGE_CALLBACK
(
	tgisu∆ök_ªcv_‰ame
 *
	t‰ame
);

98 
uöt8_t
 
	$gisu∆ök_√tw‹k_moduÀ_u¨t_c⁄fig
(
gisu∆ök_√tw‹k_moduÀ_˘æ
 *
moduÀ_˘æ
, 
BaudR©e
,
uöt16_t
 
W‹dLígth
,
uöt8_t
 
Pri‹ôy
) {

99 
uöt16_t
 
u¨t_tx_io
 = 0;uöt16_à
u¨t_rx_io
 = 0;

100 
GPIO_Ty≥Def
 *
GPIO_TYPE
 = 
NULL
;

101 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

102 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

103 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

104 
moduÀ_˘æ
->
u¨tID
) {

105 
USE_USART1
:

106 
GPIO_TYPE
 = 
GPIOA
;

107 
u¨t_tx_io
 = 
GPIO_Pö_9
; 
u¨t_rx_io
 = 
GPIO_Pö_10
;

108 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
|
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

110 
moduÀ_˘æ
->
USART
 = 
USART1
;

111 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

113 
USE_USART2
:

114 
GPIO_TYPE
 = 
GPIOA
;

115 
u¨t_tx_io
 = 
GPIO_Pö_2
; 
u¨t_rx_io
 = 
GPIO_Pö_3
;

116 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

117 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

119 
moduÀ_˘æ
->
USART
 = 
USART2
;

120 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART2_IRQn
;

122 
USE_USART3
:

123 
GPIO_TYPE
 = 
GPIOB
;

124 
u¨t_tx_io
 = 
GPIO_Pö_10
; 
u¨t_rx_io
 = 
GPIO_Pö_11
;

125 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

126 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

127 
moduÀ_˘æ
->
USART
 = 
USART3
;

128 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART3_IRQn
;

134 
	`USART_DeInô
(
moduÀ_˘æ
->
USART
);

137 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
u¨t_tx_io
;

138 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

139 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

140 
	`GPIO_Inô
(
GPIO_TYPE
, &
GPIO_InôSåu˘uª
);

143 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
u¨t_rx_io
;

144 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

145 
	`GPIO_Inô
(
GPIO_TYPE
, &
GPIO_InôSåu˘uª
);

147 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
BaudR©e
;

148 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
W‹dLígth
;

149 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

150 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

151 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

152 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

153 
	`USART_Inô
(
moduÀ_˘æ
->
USART
, &
USART_InôSåu˘uª
);

155 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

156 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
Pri‹ôy
;

157 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

158 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

160 
	`USART_CÀ¨Fœg
(
moduÀ_˘æ
->
USART
, 
USART_FLAG_TC
);

161 
	`USART_ITC⁄fig
(
moduÀ_˘æ
->
USART
, 
USART_IT_TC
, 
ENABLE
);

162 
	`USART_ITC⁄fig
(
moduÀ_˘æ
->
USART
, 
USART_IT_IDLE
, 
ENABLE
);

164 
	`USART_Cmd
(
moduÀ_˘æ
->
USART
, 
ENABLE
);

166 
	}
}

168 
uöt8_t
 
	$gisu∆ök_√tw‹k_moduÀ_u¨t_dma_c⁄fig
(
gisu∆ök_√tw‹k_moduÀ_˘æ
 *
moduÀ_˘æ
) {

169 
DMA_InôTy≥Def
 
DMA_InôSåu˘uª
;

171 
moduÀ_˘æ
->
u¨tID
) {

172 
USE_USART1
:

173 
moduÀ_˘æ
->
tx_ch™√l
 = 
DMA1_Ch™√l4
; moduÀ_˘æ->
rx_ch™√l
 = 
DMA1_Ch™√l5
;

175 
USE_USART2
:

176 
moduÀ_˘æ
->
tx_ch™√l
 = 
DMA1_Ch™√l7
; moduÀ_˘æ->
rx_ch™√l
 = 
DMA1_Ch™√l6
;

178 
USE_USART3
:

179 
moduÀ_˘æ
->
tx_ch™√l
 = 
DMA1_Ch™√l2
; moduÀ_˘æ->
rx_ch™√l
 = 
DMA1_Ch™√l3
;

185 if((
u32
)
moduÀ_˘æ
->
tx_ch™√l
 > (u32)
DMA2
) {

186 
	`RCC_AHBPîùhClockCmd
(
RCC_AHBPîùh_DMA2
,
ENABLE
);

188 
	`RCC_AHBPîùhClockCmd
(
RCC_AHBPîùh_DMA1
,
ENABLE
);

191 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = (
u32
)&
moduÀ_˘æ
->
USART
->
DR
;

192 
DMA_InôSåu˘uª
.
DMA_Mem‹yBa£Addr
 = 0;

193 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = 0;

194 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

195 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

196 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

197 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

198 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

199 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_VîyHigh
;

200 
DMA_InôSåu˘uª
.
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

202 
	`DMA_DeInô
(
moduÀ_˘æ
->
rx_ch™√l
);

203 
	`DMA_DeInô
(
moduÀ_˘æ
->
tx_ch™√l
);

206 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

207 
	`DMA_Inô
(
moduÀ_˘æ
->
rx_ch™√l
, &
DMA_InôSåu˘uª
);

210 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_PîùhîÆDST
;

211 
	`DMA_Inô
(
moduÀ_˘æ
->
tx_ch™√l
, &
DMA_InôSåu˘uª
);

214 
	`USART_DMACmd
(
moduÀ_˘æ
->
USART
, 
USART_DMAReq_Tx
|
USART_DMAReq_Rx
, 
ENABLE
);

216 
	}
}

218 
	$gisu∆ök_√tw‹k_moduÀ_£t_dma_addr
(
gisu∆ök_√tw‹k_moduÀ_˘æ
 * 
moduÀ_˘æ
,
uöt8_t
 
ch™√l
,
uöt32_t
 
addªss
, 
u16
 
size
) {

219 
DMA_Ch™√l_Ty≥Def
 *
dma_ch™√l
 = 
NULL
;

220 if(
moduÀ_˘æ
) {

221 
ch™√l
) {

222 
DMA_RX_CHANNEL
:

223 
dma_ch™√l
 = 
moduÀ_˘æ
->
rx_ch™√l
;

225 
DMA_TX_CHANNEL
:

226 
dma_ch™√l
 = 
moduÀ_˘æ
->
tx_ch™√l
;

227 
	`DMA_GëCuºD©aCou¡î
(
dma_ch™√l
));

231 if(
dma_ch™√l
) {

232 
	`DMA_Cmd
(
dma_ch™√l
, 
DISABLE
);

233 
dma_ch™√l
->
CNDTR
 = 
size
;

234 
dma_ch™√l
->
CMAR
 = 
addªss
;

235 
	`DMA_Cmd
(
dma_ch™√l
, 
ENABLE
);

239 
	}
}

241 
uöt8_t
 
	$gisu∆ök_√tw‹k_moduÀ_öô
(
USART_ID
 
UßπID
) {

242 
uöt8_t
 
ªt
 = 1;

243 
uöt8_t
 *
dma_addªss
 = 
NULL
;

244 
moduÀ_˘æ
.
u¨tID
 = 
UßπID
;

245 
moduÀ_˘æ
.
ÊowID
 = 0;

246 
moduÀ_˘æ
.
ªq_id
 = 0;

247 
moduÀ_˘æ
.
ªcv
.
mode
 = 
GISUNLINK_RECV_HEAD
;

248 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_4
);

249 if(
	`gisu∆ök_√tw‹k_moduÀ_u¨t_c⁄fig
(&
moduÀ_˘æ
,115200,
USART_W‹dLígth_8b
,5) == 0) {

250 
	`gisu∆ök_√tw‹k_moduÀ_u¨t_dma_c⁄fig
(&
moduÀ_˘æ
);

252 
RecvBuf
.
RxDimísi⁄
 = 0;

253 
RecvBuf
.
RxDimísi⁄
 %
USART_BUF_DIMENSION
;

255 
dma_addªss
 = 
RecvBuf
.
RxBuf„r
[RecvBuf.
RxDimísi⁄
];

256 
	`gisu∆ök_√tw‹k_moduÀ_£t_dma_addr
(&
moduÀ_˘æ
,
DMA_RX_CHANNEL
,(
uöt32_t
)
dma_addªss
,
USART_RX_BUFFER_SIZE
);

257 
ªt
 = 0;

259  
ªt
;

260 
	}
}

262 
uöt16_t
 
	$gisu∆ök_check_sum
(
uöt8_t
 *
d©a
,
uöt16_t
 
d©a_Àn
) {

263 
uöt32_t
 
check_sum
 = 0;

264 
d©a_Àn
--) {

265 
check_sum
 +*
d©a
++;

267 
check_sum
 >> 16) {

268 
check_sum
 = (check_sum >> 16) + (check_sum & 0xffff);

270  (
uöt16_t
)(~
check_sum
);

271 
	}
}

273 
gisu∆ök_‰ame
 *
	$gisu∆ök_¸óã_‰ame
(
uöt8_t
 
cmd
,
uöt32_t
 
Êow_id
,uöt8_à
Êow_dú
,uöt8_à*
d©a
, 
uöt16_t
 
d©a_Àn
) {

274 
gisu∆ök_‰ame
 *
‰ame
 = &
‰ame_c⁄°ru˘i⁄
;

275 
uöt8_t
 *
d©a_off£t
 = 
NULL
;

276 
uöt8_t
 *
chk_buf
 = 
NULL
;

277 
uöt16_t
 
chk_Àn
 = 0;

278 
uöt16_t
 
chk_sum
 = 0;

279 
uöt16_t
 
øw_size
 = 
UART_PACKET_BUF_MIN_LEN
 + 
d©a_Àn
;

281 if(
øw_size
 > 
UART_PACKET_BUF_MAX_LEN
) {

282  
NULL
;

285 
‰ame
->
Àn
 = 
øw_size
;

287 
d©a_off£t
 = 
‰ame
->
buf
;

289 *(
d©a_off£t
++Ë
GISUNLINK_PACKET_HEAD
;

291 *(
d©a_off£t
++Ë((
øw_size
 - 
GISUNLINK_PACKET_HEAD_TAIL_SIZE
) & 0xFF);

292 *(
d©a_off£t
++Ë(((
øw_size
 - 
GISUNLINK_PACKET_HEAD_TAIL_SIZE
) >> 8) & 0xFF);

294 *(
d©a_off£t
++Ë(
Êow_id
 & 0xFF);

295 *(
d©a_off£t
++Ë((
Êow_id
 >> 8) & 0xFF);

296 *(
d©a_off£t
++Ë((
Êow_id
 >> 16) & 0xFF);

297 *(
d©a_off£t
++Ë((
Êow_id
 >> 24) & 0xFF);

298 *(
d©a_off£t
++Ë
Êow_dú
;

299 *(
d©a_off£t
++Ë
cmd
;

301 if(
d©a_Àn
) {

302 
	`mem˝y
(
d©a_off£t
,
d©a
,
d©a_Àn
);

303 
d©a_off£t
 +
d©a_Àn
;

306 
chk_buf
 = (
‰ame
->
buf
 + 
GISUNLINK_PACKET_HEAD_SIZE
);

307 
chk_Àn
 = 
‰ame
->
Àn
 - 
GISUNLINK_PACKET_HEAD_TAIL_SIZE
 - 
GISUNLINK_PACKET_CHKSUM_SIZE
;

308 
chk_sum
 = 
	`gisu∆ök_check_sum
(
chk_buf
,
chk_Àn
);

309 *(
d©a_off£t
++Ë(
chk_sum
 & 0xFF);

310 *(
d©a_off£t
++Ë((
chk_sum
 >> 8) & 0xFF);

312 *(
d©a_off£t
Ë
GISUNLINK_PACKET_TAIL
;

313  
‰ame
;

314 
	}
}

316 
uöt16_t
 
	$gisu∆ök_√tw‹k_moduÀ_wrôe
(
uöt8_t
 
cmd
,uöt8_à*
buf„r
, 
uöt16_t
 
size
) {

317 
gisu∆ök_‰ame
 *
‰ame
 = 
NULL
;

318 if(
size
 > (
USART_TX_BUFFER_SIZE
 - 
UART_PACKET_BUF_MIN_LEN
)) {

322 
‰ame
 = 
	`gisu∆ök_¸óã_‰ame
(
cmd
,++
moduÀ_˘æ
.
ÊowID
,
GISUNLINK_COMM_REQ
,
buf„r
,
size
);

324 if(
‰ame
) {

325 
	`DMA_GëCuºD©aCou¡î
(
moduÀ_˘æ
.
tx_ch™√l
));

326 
	`mem˝y
(
moduÀ_˘æ
.
tx_buf„r
,
‰ame
->
buf
,‰ame->
Àn
);

327 
	`gisu∆ök_√tw‹k_moduÀ_£t_dma_addr
(&
moduÀ_˘æ
,
DMA_TX_CHANNEL
,(
uöt32_t
)moduÀ_˘æ.
tx_buf„r
,
‰ame
->
Àn
);

328  
‰ame
->
Àn
;

331 
	}
}

333 
uöt16_t
 
	$gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
uöt32_t
 
id
,
uöt8_t
 
cmd
,uöt8_à*
buf„r
, 
uöt16_t
 
size
) {

334 
gisu∆ök_‰ame
 *
‰ame
 = 
NULL
;

335 if(
size
 > (
USART_TX_BUFFER_SIZE
 - 
UART_PACKET_BUF_MIN_LEN
)) {

339 
‰ame
 = 
	`gisu∆ök_¸óã_‰ame
(
cmd
,
id
,
GISUNLINK_COMM_RES
,
buf„r
,
size
);

340 if(
‰ame
) {

341 
	`DMA_GëCuºD©aCou¡î
(
moduÀ_˘æ
.
tx_ch™√l
));

342 
	`mem˝y
(
moduÀ_˘æ
.
tx_buf„r
,
‰ame
->
buf
,‰ame->
Àn
);

343 
	`gisu∆ök_√tw‹k_moduÀ_£t_dma_addr
(&
moduÀ_˘æ
,
DMA_TX_CHANNEL
,(
uöt32_t
)moduÀ_˘æ.
tx_buf„r
,
‰ame
->
Àn
);

344  
‰ame
->
Àn
;

347 
	}
}

349 
gisu∆ök_‰ame
 *
	$gisu∆ök_°ru˘_to_byãs
(
uöt8_t
 
cmd
, uöt8_à
subcmd
, *
°ru˘±r
) {

350 
gisu∆ök_‰ame
 *
‰ame
 = 
NULL
;

351 
uöt8_t
 *
d©a_off£t
 = 
NULL
;

352 
gisu∆ök_po°_öfo
 *
po°_öfo
 = 
NULL
;

354 if(
cmd
 =
GISUNLINK_TASK_CONTROL
 && 
°ru˘±r
 !
NULL
) {

355 
uöt8_t
 
ödex
 = 0;

356 
ch¨ge_com
 *
com
 = 
NULL
;

358 
‰ame
 = &
po°_c⁄°ru˘i⁄
;

360 
d©a_off£t
 = 
‰ame
->
buf
;

361 
po°_öfo
 = (
gisu∆ök_po°_öfo
 *)
°ru˘±r
;

363 
subcmd
) {

364 
GISUNLINK_START_CHARGE
:

365 
GISUNLINK_CHARGEING
:

366 
GISUNLINK_CHARGE_FINISH
:

367 
GISUNLINK_CHARGE_LEISURE
:

368 
GISUNLINK_CHARGE_BREAKDOWN
:

369 
GISUNLINK_CHARGE_NO_LOAD
:

370 
GISUNLINK_UPDATE_FIRMWARE
:

371 
GISUNLINK_COM_UPDATE
:

372 
GISUNLINK_STOP_CHARGE
:

374 *(
d©a_off£t
++Ë
subcmd
;

376 if(
subcmd
 =
GISUNLINK_CHARGEING
 || subcmd =
GISUNLINK_CHARGE_LEISURE
) {

377 *(
d©a_off£t
++Ë
MQTT_PUBLISH_NOACK
;

379 *(
d©a_off£t
++Ë
MQTT_PUBLISH_NEEDACK
;

383 *(
d©a_off£t
++Ë
po°_öfo
->
sig«l
;

384 *(
d©a_off£t
++Ë
po°_öfo
->
id_tŸÆ
;

386 
ödex
 = 0; index < 
po°_öfo
->
id_tŸÆ
; index++) {

387 
com
 = 
po°_öfo
->
comLi°
[
ödex
];

388 *(
d©a_off£t
++Ë
com
->
id
;

391 
ödex
 = 0; index < 
po°_öfo
->
id_tŸÆ
; index++) {

393 
uöt32_t
 
u£d_íîgyOff£t
 = 0;

394 
uöt16_t
 
icRe£t
 = 0;

396 
com
 = 
po°_öfo
->
comLi°
[
ödex
];

397 
u£d_íîgyOff£t
 = 
com
->
u£d
 + 
po°_öfo
->
íîgyOff£t
[
ödex
];

398 
icRe£t
 = 
po°_öfo
->icRe£t[
ödex
];

400 *(
d©a_off£t
++Ë(
com
->
tokí
 & 0xFF);

401 *(
d©a_off£t
++Ë((
com
->
tokí
 >> 8) & 0xFF);

402 *(
d©a_off£t
++Ë((
com
->
tokí
 >> 16) & 0xFF);

403 *(
d©a_off£t
++Ë((
com
->
tokí
 >> 24) & 0xFF);

405 *(
d©a_off£t
++Ë(
com
->
tŸÆ
 & 0xFF);

406 *(
d©a_off£t
++Ë((
com
->
tŸÆ
 >> 8) & 0xFF);

407 *(
d©a_off£t
++Ë((
com
->
tŸÆ
 >> 16) & 0xFF);

408 *(
d©a_off£t
++Ë((
com
->
tŸÆ
 >> 24) & 0xFF);

410 *(
d©a_off£t
++Ë(
u£d_íîgyOff£t
 & 0xFF);

411 *(
d©a_off£t
++Ë((
u£d_íîgyOff£t
 >> 8) & 0xFF);

412 *(
d©a_off£t
++Ë((
u£d_íîgyOff£t
 >> 16) & 0xFF);

413 *(
d©a_off£t
++Ë((
u£d_íîgyOff£t
 >> 24) & 0xFF);

415 *(
d©a_off£t
++Ë(
com
->
±ime
 & 0xFF);

416 *(
d©a_off£t
++Ë((
com
->
±ime
 >> 8) & 0xFF);

417 *(
d©a_off£t
++Ë((
com
->
±ime
 >> 16) & 0xFF);

418 *(
d©a_off£t
++Ë((
com
->
±ime
 >> 24) & 0xFF);

420 *(
d©a_off£t
++Ë(
com
->
utime
 & 0xFF);

421 *(
d©a_off£t
++Ë((
com
->
utime
 >> 8) & 0xFF);

422 *(
d©a_off£t
++Ë((
com
->
utime
 >> 16) & 0xFF);

423 *(
d©a_off£t
++Ë((
com
->
utime
 >> 24) & 0xFF);

425 *(
d©a_off£t
++Ë(
com
->
cur_cuºít
 & 0xFF);

426 *(
d©a_off£t
++Ë((
com
->
cur_cuºít
 >> 8) & 0xFF);

427 *(
d©a_off£t
++Ë((
com
->
cur_cuºít
 >> 16) & 0xFF);

428 *(
d©a_off£t
++Ë((
com
->
cur_cuºít
 >> 24) & 0xFF);

430 *(
d©a_off£t
++Ë(
icRe£t
 & 0xFF);

431 *(
d©a_off£t
++Ë((
icRe£t
 >> 8) & 0xFF);

432 *(
d©a_off£t
++Ë(
com
->
max_cuºít
 & 0xFF);

433 *(
d©a_off£t
++Ë((
com
->
max_cuºít
 >> 8) & 0xFF);

436 
com
->
cur_cuºít
 = 0;

438 *(
d©a_off£t
++Ë(
com
->
bªakdown
 & 0xFF);

439 *(
d©a_off£t
++Ë(
com
->
íabÀ
 & 0xFF);

440 *(
d©a_off£t
++Ë(
com
->
cur_behavi‹
 & 0xFF);

443 
‰ame
->
Àn
 = 
d©a_off£t
 - føme->
buf
;

448  
‰ame
;

449 
	}
}

451 
uöt8_t
 
	$gisu∆ök_byãs_to_°ru˘
(
uöt8_t
 
cmd
,*
°ru˘uª
,uöt8_à*
buf„r
, 
uöt16_t
 
size
) {

452 
uöt8_t
 
ªt
 = 1;

453 if(
°ru˘uª
 && 
size
) {

454 if(
cmd
 =
GISUNLINK_TASK_CONTROL
) {

455 
uöt8_t
 
subcmd
 = *
buf„r
;

456 
uöt8_t
 *
d©a
 = 
buf„r
+1;

457 
subcmd
) {

458 
GISUNLINK_CHARGE_TASK
:

460 
gisu∆ök_ch¨ge_èsk
 *
ch¨ge_èsk
 = (gisu∆ök_ch¨ge_èsk *)
°ru˘uª
;

461 
ch¨ge_èsk
->
id
 = 
d©a
[0];

462 
ch¨ge_èsk
->
tokí
 = 
d©a
[1] + (data[2] << 8) + (data[3] << 16) + (data[4] << 24);

463 
ch¨ge_èsk
->
tŸÆ
 = 
d©a
[5] + (data[6] << 8) + (data[7] << 16) + (data[8] << 24);

464 
ch¨ge_èsk
->
max_cuºít
 = 
d©a
[9] + (data[10] << 8) + (data[11] << 16) + (data[12] << 24);

465 
ch¨ge_èsk
->
±ime
 = 
d©a
[13] + (data[14] << 8) + (data[15] << 16) + (data[16] << 24);

468 
GISUNLINK_DEVIDE_STATUS
:

470 
gisu∆ök_devi˚_°©us
 *
devi˚_°©us
 = (gisu∆ök_devi˚_°©u†*)
°ru˘uª
;

471 
devi˚_°©us
->
id
 = 
d©a
[0];

474 
GISUNLINK_EXIT_CHARGE_TASK
:

476 
gisu∆ök_°›_ch¨ge_èsk
 *
°›_ch¨ge
 = (gisu∆ök_°›_ch¨ge_èsk *)
°ru˘uª
;

477 
°›_ch¨ge
->
id
 = 
d©a
[0];

478 
°›_ch¨ge
->
tokí
 = 
d©a
[1] + (data[2] << 8) + (data[3] << 16) + (data[4] << 24);

479 
°›_ch¨ge
->
f‹˚_°›
 = 
d©a
[5];

482 
GISUNLINK_SET_CONFIG
:

484 
gisu∆ök_£t_c⁄fig
 *
£t_c⁄fig
 = (gisu∆ök_£t_c⁄fig *)
°ru˘uª
;

485 
£t_c⁄fig
->
Ælow_zîo_bÆ™˚
 = 
d©a
[0];

490 
cmd
) {

491 
GISUNLINK_DEV_FW_INFO
:

493 
uöt16_t
 
∑ckë_size
 = ((
uöt32_t
) + (uint32_t));

494 if(
size
 > 
∑ckë_size
) {

495 
gisu∆ök_devi˚_fúmw¨e_öfo
 *
fúmw¨e
 = (gisu∆ök_devi˚_fúmw¨e_öfÿ*)
°ru˘uª
;

496 
fúmw¨e
->
vîsi⁄
 = 
buf„r
[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);

497 
fúmw¨e
->
size
 = 
buf„r
[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);

498 
fúmw¨e
->
md5
 = 
buf„r
+8;

499 
ªt
 = 0;

503 
GISUNLINK_DEV_FW_TRANS
:

505 
uöt16_t
 
∑ckë_size
 = ((uint16_t) + (uint16_t));

506 if(
size
 > 
∑ckë_size
) {

507 
gisu∆ök_devi˚_fúmw¨e_å™s„r
 *
å™s„r
 = (gisu∆ök_devi˚_fúmw¨e_å™s„∏*)
°ru˘uª
;

508 
å™s„r
->
off£t
 = 
buf„r
[0] + (buffer[1] << 8);

509 
å™s„r
->
size
 = 
buf„r
[2] + (buffer[3] << 8);

510 
å™s„r
->
d©a
 = 
buf„r
+4;

511 
ªt
 = 0;

515 
GISUNLINK_DEV_FW_READY
:

520  
ªt
;

521 
	}
}

523 
	$gisu∆ök_¥o˚ss_‰ame
(
GISUNLINK_MESSAGE_CALLBACK
 *
msgCb
,
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

524 
uöt16_t
 
chk_sum
 = 0;

525 if(
msgCb
 && 
‰ame
) {

526 if(
moduÀ_˘æ
.
ªq_id
 !
‰ame
->
id
) {

527 
moduÀ_˘æ
.
ªq_id
 = 
‰ame
->
id
;

528 
chk_sum
 = 
	`gisu∆ök_check_sum
(
‰ame
->
buf„r
,‰ame->
Àn
 - 
GISUNLINK_PACKET_HEAD_TAIL_SIZE
 - 
GISUNLINK_PACKET_CHKSUM_SIZE
);

529 if(
‰ame
->
chk_sum
 == chk_sum) {

530 
	`msgCb
(
‰ame
);

534 
	}
}

536 
	$gisu∆ök_√tw‹k_moduÀ_∑r£_‰ame
(
GISUNLINK_MESSAGE_CALLBACK
 *
msgCb
,
uöt8_t
 *
buf„r
,
uöt16_t
 
size
) {

537 
uöt16_t
 
off£t
 = 0; uöt16_à
√xt_Àn
 = 0;uöt16_à
c›y_off£t
 = 0;

538 
uöt8_t
 *
d©a
 = 
NULL
;

540 
gisu∆ök_ªcv_‰ame
 *
‰ame
 = &
moduÀ_˘æ
.
ªcv
;

541 if(
msgCb
 && 
size
) {

542 
off£t
 < 
size
) {

543 if(
√xt_Àn
 + 
off£t
 > 
size
) {

546 
d©a
 = 
buf„r
 + 
off£t
;

547 
‰ame
->
mode
) {

548 
GISUNLINK_RECV_HEAD
:

549 
c›y_off£t
 = 0;

550 if(
d©a
[0] =
GISUNLINK_PACKET_HEAD
) {

551 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_LEN_SIZE
);

552 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_HEAD_SIZE
);

553 
‰ame
->
mode
 = 
GISUNLINK_RECV_LEN
;

555 
	`CLEAR_RECV_MODE
(
‰ame
->
mode
,
√xt_Àn
,
off£t
);

558 
GISUNLINK_RECV_LEN
:

559 
‰ame
->
Àn
 = 
d©a
[0] + (data[1] << 8);

560 
‰ame
->
Àn
 +
GISUNLINK_PACKET_HEAD_TAIL_SIZE
;

561 if(
‰ame
->
Àn
 > 
UART_PACKET_BUF_MAX_LEN
 || føme->À¿< 
UART_PACKET_BUF_MIN_LEN
) {

562 
	`CLEAR_RECV_MODE
(
‰ame
->
mode
,
√xt_Àn
,
off£t
);

564 
‰ame
->
d©a_Àn
 = føme->
Àn
 - 
UART_PACKET_BUF_MIN_LEN
;

565 
	`CPOY_DATA
(
‰ame
->
buf„r
,
d©a
,
c›y_off£t
,
GISUNLINK_PACKET_LEN_SIZE
);

566 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_FLOW_SIZE
);

567 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_LEN_SIZE
);

568 
‰ame
->
mode
 = 
GISUNLINK_RECV_FLOW
;

571 
GISUNLINK_RECV_FLOW
:

572 
‰ame
->
id
 = 
d©a
[0] + (data[1] << 8) + (data[2] << 16) + (data[3] << 24);

573 
	`CPOY_DATA
(
‰ame
->
buf„r
,
d©a
,
c›y_off£t
,
GISUNLINK_PACKET_FLOW_SIZE
);

574 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_DIR_SIZE
);

575 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_FLOW_SIZE
);

576 
‰ame
->
mode
 = 
GISUNLINK_RECV_DIR
;

578 
GISUNLINK_RECV_DIR
:

579 
‰ame
->
dú
 = 
d©a
[0];

580 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
 || føme->dú =
GISUNLINK_COMM_RES
) {

581 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_CMD_SIZE
);

582 
	`CPOY_DATA
(
‰ame
->
buf„r
,
d©a
,
c›y_off£t
,
GISUNLINK_PACKET_DIR_SIZE
);

583 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_DIR_SIZE
);

584 
‰ame
->
mode
 = 
GISUNLINK_RECV_CMD
;

586 
	`CLEAR_RECV_MODE
(
‰ame
->
mode
,
√xt_Àn
,
off£t
);

589 
GISUNLINK_RECV_CMD
:

590 
‰ame
->
cmd
 = 
d©a
[0];

591 
‰ame
->
cmd
) {

592 
GISUNLINK_NETWORK_STATUS
:

593 
GISUNLINK_NETWORK_RESET
:

594 
GISUNLINK_NETWORK_RSSI
:

595 
GISUNLINK_DEV_FW_INFO
:

596 
GISUNLINK_DEV_FW_TRANS
:

597 
GISUNLINK_DEV_FW_READY
:

598 
GISUNLINK_DEV_SN
:

599 
GISUNLINK_TASK_CONTROL
:

600 
GISUNLINK_HW_SN
:

601 
GISUNLINK_FIRMWARE_VERSION
:

602 
	`SET_NEXT_LEN
(
√xt_Àn
,
‰ame
->
d©a_Àn
);

603 
	`CPOY_DATA
(
‰ame
->
buf„r
,
d©a
,
c›y_off£t
,
GISUNLINK_PACKET_CMD_SIZE
);

604 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_CMD_SIZE
);

605 
‰ame
->
mode
 = 
GISUNLINK_RECV_DATA
;

608 
	`CLEAR_RECV_MODE
(
‰ame
->
mode
,
√xt_Àn
,
off£t
);

611 
GISUNLINK_RECV_DATA
:

612 if(
‰ame
->
d©a_Àn
) {

613 
‰ame
->
d©a
 = føme->
buf„r
 + 
c›y_off£t
;

614 
	`CPOY_DATA
(
‰ame
->
buf„r
,
d©a
,
c›y_off£t
,‰ame->
d©a_Àn
);

616 
‰ame
->
d©a
 = 
NULL
;

619 if(
‰ame
->
cmd
 =
GISUNLINK_NETWORK_STATUS
) {

621 
‰ame
->
cmd
 = frame->cmd;

624 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_CHKSUM_SIZE
);

625 
	`SET_NEXT_OFFSET
(
off£t
,
‰ame
->
d©a_Àn
);

626 
‰ame
->
mode
 = 
GISUNLINK_RECV_CHECK_SUM
;

628 
GISUNLINK_RECV_CHECK_SUM
:

629 
‰ame
->
chk_sum
 = 
d©a
[0] + (data[1] << 8);

630 
	`SET_NEXT_LEN
(
√xt_Àn
,
GISUNLINK_PACKET_TAIL_SIZE
);

631 
	`SET_NEXT_OFFSET
(
off£t
,
GISUNLINK_PACKET_CHKSUM_SIZE
);

632 
‰ame
->
mode
 = 
GISUNLINK_RECV_TAIL
;

634 
GISUNLINK_RECV_TAIL
:

635 if(
d©a
[0] =
GISUNLINK_PACKET_TAIL
) {

636 
	`gisu∆ök_¥o˚ss_‰ame
(
msgCb
,
‰ame
);

638 
	`CLEAR_RECV_MODE
(
‰ame
->
mode
,
√xt_Àn
,
off£t
);

644 
	}
}

646 
gisu∆ök_√tw‹k_moduÀ_ªad
((*
msgCb
)(
gisu∆ök_ªcv_‰ame
 *
‰ame
)) {

647 
uöt8_t
 
lo›
 = 0;

648 
uöt16_t
 
d©a_Àn
 = 0;

649 
uöt8_t
 *
dma_addªss
 = 
NULL
;

650 
lo›
 = 0;Üo› < 
USART_BUF_DIMENSION
;Üoop++) {

651 
d©a_Àn
 = (
USART_RX_BUFFER_SIZE
 - 
RecvBuf
.
RxEndIndex
[
lo›
]);

652 if(
RecvBuf
.
RxEndFœg
[
lo›
] =
SET
) {

653 
dma_addªss
 = 
RecvBuf
.
RxBuf„r
[
lo›
];

654 
	`gisu∆ök_√tw‹k_moduÀ_∑r£_‰ame
(
msgCb
,
dma_addªss
,
d©a_Àn
);

655 
RecvBuf
.
RxEndFœg
[
lo›
] = 
RESET
;

656 
RecvBuf
.
RxEndIndex
[
lo›
] = 0;

659 
	}
}

661 
	$gisu∆ök_√tw‹k_sögÀ_com_po°
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, uöt8_à
behavi‹
) {

663 
gisu∆ök_‰ame
 *
‰ame
 = 
NULL
;

664 
gisu∆ök_po°_öfo
 
po°_öfo
 = {0};

666 
po°_öfo
.
sig«l
 = 
globÆ
->
sy°em
.signal;

667 
po°_öfo
.
id_tŸÆ
 = 
SINGLE_RECORD
;

668 
po°_öfo
.
comLi°
[0] = &
globÆ
->comLi°[
comID
];

669 
po°_öfo
.
íîgyOff£t
[0] = 
globÆ
->íîgyOff£t[
comID
];

670 
po°_öfo
.
icRe£t
[0] = 
globÆ
->icRe£t[
comID
];

673 
‰ame
 = 
	`gisu∆ök_°ru˘_to_byãs
(
GISUNLINK_TASK_CONTROL
,
behavi‹
,&
po°_öfo
);

674 if(
‰ame
) {

676 
	`gisu∆ök_√tw‹k_moduÀ_wrôe
(
GISUNLINK_TASK_CONTROL
,
‰ame
->
buf
,‰ame->
Àn
);

678 
	}
}

680 
	$gisu∆ök_√tw‹k_mu…i_com_po°
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
behavi‹
) {

682 
uöt8_t
 
comID
 = 0;

683 
gisu∆ök_‰ame
 *
‰ame
 = 
NULL
;

684 
gisu∆ök_po°_öfo
 
po°_öfo
 = {0};

686 
po°_öfo
.
sig«l
 = 
globÆ
->
sy°em
.signal;

687 
po°_öfo
.
id_tŸÆ
 = 
MULTI_RECORD
;

688 
comID
 = 0; comID < 
MULTI_RECORD
; comID++) {

689 
po°_öfo
.
comLi°
[
comID
] = &
globÆ
->comList[comID];

690 
po°_öfo
.
íîgyOff£t
[
comID
] = 
globÆ
->energyOffset[comID];

691 
po°_öfo
.
icRe£t
[
comID
] = 
globÆ
->icReset[comID];

695 
‰ame
 = 
	`gisu∆ök_°ru˘_to_byãs
(
GISUNLINK_TASK_CONTROL
,
behavi‹
,&
po°_öfo
);

696 if(
‰ame
) {

698 
	`gisu∆ök_√tw‹k_moduÀ_wrôe
(
GISUNLINK_TASK_CONTROL
,
‰ame
->
buf
,‰ame->
Àn
);

700 
	}
}

702 
	$gisu∆ök_√tw‹k_moduÀ_úq
() {

703 
uöt16_t
 
ãmp
;

704 
uöt8_t
 *
√xt_dma_addªss
 = 
NULL
;

705 if(
	`USART_GëITSètus
(
moduÀ_˘æ
.
USART
,
USART_IT_IDLE
)!
RESET
) {

706 
ãmp
 = 
moduÀ_˘æ
.
USART
->
SR
;

707 
ãmp
 = 
moduÀ_˘æ
.
USART
->
DR
;

708 
ãmp
 =Åemp;

709 
RecvBuf
.
RxEndFœg
[RecvBuf.
RxDimísi⁄
] = 
SET
;

710 
RecvBuf
.
RxEndIndex
[RecvBuf.
RxDimísi⁄
] = 
	`DMA_GëCuºD©aCou¡î
(
moduÀ_˘æ
.
rx_ch™√l
);

711 
RecvBuf
.
RxDimísi⁄
++;

712 
RecvBuf
.
RxDimísi⁄
 %
USART_BUF_DIMENSION
;

713 
√xt_dma_addªss
 = 
RecvBuf
.
RxBuf„r
[RecvBuf.
RxDimísi⁄
];

714 
	`gisu∆ök_√tw‹k_moduÀ_£t_dma_addr
(&
moduÀ_˘æ
,
DMA_RX_CHANNEL
,(
uöt32_t
)
√xt_dma_addªss
,
USART_RX_BUFFER_SIZE
);

715 
	`USART_CÀ¨ITPídögBô
(
moduÀ_˘æ
.
USART
, 
USART_IT_IDLE
);

718 if(
	`USART_GëITSètus
(
moduÀ_˘æ
.
USART
,
USART_IT_TC
)!
RESET
) {

719 
	`DMA_Cmd
(
moduÀ_˘æ
.
tx_ch™√l
, 
DISABLE
);

720 
moduÀ_˘æ
.
tx_ch™√l
->
CNDTR
 = 0;

721 
	`USART_CÀ¨ITPídögBô
(
moduÀ_˘æ
.
USART
, 
USART_IT_TC
);

723 
	}
}

	@code/User/gisunlink_network_module.h

13 #i‚de‡
__GISUNLINK_NETWORK_MODULE_H__


14 
	#__GISUNLINK_NETWORK_MODULE_H__


	)

16 
	~"°m32f10x.h
"

17 
	~"gisu∆ök.h
"

19 #ifde‡
__˝lu•lus


24 
	#BYTES_TO_STRUCT
(
ty≥
,
èrgë
,
cmd
,
d©a
,
d©a_Àn
Ëty≥Å¨gë; 
	`gisu∆ök_byãs_to_°ru˘
(cmd,&èrgë,d©a,d©a_Àn);

	)

27 
USE_USART1
,

28 
USE_USART2
,

29 
USE_USART3


30 } 
	tUSART_ID
;

36 
uöt8_t
 
gisu∆ök_√tw‹k_moduÀ_öô
(
USART_ID
 
UßπID
);

44 
uöt16_t
 
gisu∆ök_√tw‹k_moduÀ_wrôe
(
uöt8_t
 
cmd
,uöt8_à*
buf„r
, uöt16_à
size
);

53 
uöt16_t
 
gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
uöt32_t
 
id
,
uöt8_t
 
cmd
,uöt8_à*
buf„r
, uöt16_à
size
);

62 
gisu∆ök_‰ame
 *
gisu∆ök_°ru˘_to_byãs
(
uöt8_t
 
cmd
,uöt8_à
subcmd
, *
°ru˘±r
);

71 
uöt8_t
 
gisu∆ök_byãs_to_°ru˘
(uöt8_à
cmd
,*
°ru˘uª
,uöt8_à*
buf„r
, 
uöt16_t
 
size
);

77 
gisu∆ök_√tw‹k_moduÀ_ªad
((*
msgCb
)(
gisu∆ök_ªcv_‰ame
 *
‰ame
));

85 
gisu∆ök_√tw‹k_sögÀ_com_po°
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
, uöt8_à
behavi‹
);

92 
gisu∆ök_√tw‹k_mu…i_com_po°
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
behavi‹
);

98 
gisu∆ök_√tw‹k_moduÀ_úq
();

100 #ifde‡
__˝lu•lus


	@code/User/gisunlink_network_task.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"gisu∆ök.h
"

16 
	~"gisu∆ök_lcd.h
"

17 
	~"gisu∆ök_ty≥.h
"

18 
	~"gisu∆ök_coms.h
"

19 
	~"gisu∆ök_c⁄f.h
"

20 
	~"gisu∆ök_dñay.h
"

21 
	~"gisu∆ök_upd©a.h
"

22 
	~"gisu∆ök_sy°em.h
"

23 
	~"gisu∆ök_√tw‹k_èsk.h
"

24 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

26 
	$gisu∆ök_dev_fw_öfo
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

27 
uöt8_t
 
ª•⁄d
 = 
GISUNLINK_DEVICE_TIMEOUT
;

29 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

30 
globÆ
->
sy°em_upd©e_Êag
 = 
FALSE
;

31 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 = 0xFFFF;

33 if(
‰ame
->
d©a_Àn
) {

34 
	`BYTES_TO_STRUCT
(
gisu∆ök_devi˚_fúmw¨e_öfo
,
fúmw¨e
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

36 if(
globÆ
->
sy°em
.
rouã_w‹k
 =
IS_ENABLE
) {

37 
ª•⁄d
 = 
GISUNLINK_DEVICE_TIMEOUT
;

39 if(
	`memcmp
((c⁄° *)
globÆ
->
c⁄f
.
fúmw¨e_md5
,
fúmw¨e
.
md5
,32) == 0) {

40 
ª•⁄d
 = 
GISUNLINK_NO_NEED_UPGRADE
;

42 
	`gisu∆ök_£t_comLi°_c⁄f
(
globÆ
);

43 
ª•⁄d
 = 
GISUNLINK_NEED_UPGRADE
;

44 
globÆ
->
sy°em_upd©e_Êag
 = 
TRUE
;

45 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 0;

46 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 = 0x00;

47 
globÆ
->
sy°em
.
fúmw¨e
.
öfo
.
size
 = firmware.size;

48 
	`mem˝y
((*)(
globÆ
->
sy°em
.
fúmw¨e
.
öfo
.
md5
),firmware.md5,32);

50 
	`MD5Inô
(&
globÆ
->
sy°em
.
fúmw¨e
.
md5
);

51 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_START_UPDATE
);

52 
	`gisu∆ök_lcd_ª‰esh
();

56 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d
,(
uöt8_t
));

58 
	}
}

60 
	$gisu∆ök_dev_fw_å™s
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

62 
uöt8_t
 
ª•⁄d_off£t
[2] = {0};

63 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

64 
	`BYTES_TO_STRUCT
(
gisu∆ök_devi˚_fúmw¨e_å™s„r
,
å™s„r
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

66 
ª•⁄d_off£t
[0] = (
å™s„r
.
off£t
 & 0xFF);

67 
ª•⁄d_off£t
[1] = ((
å™s„r
.
off£t
 >> 8) & 0xFF);

69 if(
globÆ
->
sy°em_upd©e_Êag
 =
TRUE
) {

70 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
ª•⁄d_off£t
,(
uöt16_t
));

72 
ª•⁄d_off£t
[0] = 0x00;

73 
ª•⁄d_off£t
[1] = 0x00;

74 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 = 0;

75 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
ª•⁄d_off£t
,(
uöt16_t
));

78 if(
globÆ
->
sy°em_upd©e_Êag
 =
TRUE
 && globÆ->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 !
å™s„r
.
off£t
) {

79 if((
å™s„r
.
off£t
 - 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
) == 1) {

80 if(
å™s„r
.
size
) {

81 
uöt32_t
 
d©a_off£t
 = 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 * 256;

82 
	`gisu∆ök_lcd_£t_°©us
(
	`gisu∆ök_ˇlc_upd©e_¥ogªss
(
globÆ
->
sy°em
.
fúmw¨e
.
öfo
.
size
,
d©a_off£t
,256));

83 
	`gisu∆ök_lcd_ª‰esh
();

85 
	`MD5Upd©e
(&
globÆ
->
sy°em
.
fúmw¨e
.
md5
, 
å™s„r
.
d©a
,Åøns„r.
size
);

86 if(
	`gisu∆ök_wrôe_Êash_by_upd©e
(
d©a_off£t
,
å™s„r
.
d©a
,å™s„r.
size
Ë=
FAILED
) {

87 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_UPDATE_FAILED
);

88 
	`gisu∆ök_lcd_ª‰esh
();

89 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 31;

91 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 0;

92 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 = 
å™s„r
.
off£t
;

98 
	}
}

100 
	$gisu∆ök_dev_fw_ªady
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

101 
uöt8_t
 
fúmw¨e_chk
 = 
GISUNLINK_FIRMWARE_CHK_NO_OK
;

102 
uöt8_t
 
ˇlc_md5
[
FIRMWARE_MD5_SIZE
] = {0};

103 
uöt8_t
 
i
 = 0;

104 
uöt8_t
 
cmpOk
 = 
FAILED
;

106 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

107 if(
globÆ
->
sy°em_upd©e_Êag
 =
TRUE
) {

108 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_off£t
 = 0;

109 
	`MD5FöÆ
(
globÆ
->
sy°em
.
fúmw¨e
.
md5_dige°
, &globÆ->sy°em.fúmw¨e.
md5
);

111 
i
 = 0; i < 16; ++i) {

112 
	`•rötf
((*)&(
ˇlc_md5
[
i
 * 2]), "%02x", 
globÆ
->
sy°em
.
fúmw¨e
.
md5_dige°
[i]);

115 if(
	`°∫cmp
((*)
ˇlc_md5
,(*)
globÆ
->
sy°em
.
fúmw¨e
.
öfo
.
md5
,32) == 0) {

116 
fúmw¨e_chk
 = 
GISUNLINK_FIRMWARE_CHK_OK
;

117 
cmpOk
 = 
SUCCEED
;

120 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 0;

122 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
fúmw¨e_chk
,(
uöt8_t
));

124 if(
cmpOk
 =
SUCCEED
) {

126 
	`mem˝y
((*)
globÆ
->
c⁄f
.
fúmw¨e_md5
,(*)globÆ->
sy°em
.
fúmw¨e
.
öfo
.
md5
,32);

128 
	`gisu∆ök_£t_sy°em_c⁄f
(
globÆ
);

129 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_UPDATE_SUCCEED
);

130 
	`gisu∆ök_lcd_ª‰esh
();

132 
	`DñayMs
(2500);

133 
	`gisu∆ök_íabÀ_upd©a
();

134 
globÆ
->
sy°em_upd©e_Êag
 = 
FALSE
;

136 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_UPDATE_FAILED
);

137 
	`gisu∆ök_lcd_ª‰esh
();

138 
globÆ
->
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 31;

141 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
fúmw¨e_chk
,(
uöt8_t
));

144 
	}
}

146 
uöt8_t
 
	$gisu∆ök_èsk_c⁄åﬁ_ª‰esh_ch¨ge_èsk
(
ch¨ge_com
 *
com
,
gisu∆ök_ch¨ge_èsk
 *
ch¨ge_èsk
) {

147 
uöt8_t
 
ch™ge
 = 0;

149 if(
com
->
tokí
 =
ch¨ge_èsk
->token) {

150 if(
com
->
tŸÆ
 !
ch¨ge_èsk
->total) {

151 
ch™ge
 = 1;

152 
com
->
tŸÆ
 = 
ch¨ge_èsk
->total;

155 if(
com
->
±ime
 !
ch¨ge_èsk
->ptime) {

156 
ch™ge
 = 1;

157 
com
->
±ime
 = 
ch¨ge_èsk
->ptime;

160 if(
com
->
max_cuºít
 !
ch¨ge_èsk
->max_current) {

161 
ch™ge
 = 1;

162 
com
->
max_cuºít
 = 
ch¨ge_èsk
->max_current;

166  
ch™ge
;

167 
	}
}

169 
	$gisu∆ök_èsk_c⁄åﬁ_ch¨ge_èsk
(
gisu∆ök
 *
globÆ
, 
uöt8_t
 
comID
,
gisu∆ök_ch¨ge_èsk
 *
ch¨ge_èsk
) {

170 
uöt8_t
 
ª•⁄d_vÆue
 = 
FAILED
;

171 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 =
NO_BREAKDOWN
) {

172 if(
globÆ
->
comLi°
[
comID
].
íabÀ
 =
NO_ENABLE
) {

173 
	`gisu∆ök_com_£t
(
globÆ
,
comID
,
ch¨ge_èsk
);

174 
ª•⁄d_vÆue
 = 
	`gisu∆ök_com_°¨t_ch¨ge
(
globÆ
,
comID
);

176 if(
ª•⁄d_vÆue
 =
SUCCEED
) {

177 
globÆ
->
comLi°
[
comID
].
íabÀ
 = 
IS_ENABLE
;

179 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
PORT_CHARGEING
);

180 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_START_CHARGE
;

181 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
comID
,
GISUNLINK_START_CHARGE
);

184 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 !
NO_BREAKDOWN
) {

186 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
ch¨ge_èsk
->
id
,
PORT_BREAKDOWN
);

187 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_BREAKDOWN
;

188 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
comID
,
GISUNLINK_CHARGE_BREAKDOWN
);

190 
	`gisu∆ök_com_ª£t
(
globÆ
,
comID
,0);

191 
	`gisu∆ök_com_°›_ch¨ge
(
globÆ
,
comID
);

195 if(
	`gisu∆ök_èsk_c⁄åﬁ_ª‰esh_ch¨ge_èsk
(&
globÆ
->
comLi°
[
comID
],
ch¨ge_èsk
)) {

196 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
comID
,
GISUNLINK_COM_UPDATE
);

198 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
comID
,
GISUNLINK_COM_NO_UPDATE
);

202 
globÆ
->
comLi°
[
comID
].
cur_behavi‹
 = 
GISUNLINK_CHARGE_BREAKDOWN
;

203 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
comID
,
GISUNLINK_CHARGE_BREAKDOWN
);

205 
	}
}

207 
	$gisu∆ök_èsk_c⁄åﬁ
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

209 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

211 (
uöt8_t
)*
‰ame
->
d©a
) {

212 
GISUNLINK_CHARGE_TASK
:

214 
uöt8_t
 
ª•⁄d_vÆue
 = 
FAILED
;

215 
	`BYTES_TO_STRUCT
(
gisu∆ök_ch¨ge_èsk
,
ch¨ge_èsk
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

217 if(
ch¨ge_èsk
.
id
 < 
MAX_COM_QUANTITY
) {

218 if(
globÆ
->
sy°em_upd©e_Êag
 =
TRUE
) {

219 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
ch¨ge_èsk
.
id
,
GISUNLINK_UPDATE_FIRMWARE
);

221 
ª•⁄d_vÆue
 = 
SUCCEED
;

222 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d_vÆue
,(
uöt8_t
));

223 
	`gisu∆ök_èsk_c⁄åﬁ_ch¨ge_èsk
(
globÆ
,
ch¨ge_èsk
.
id
,&charge_task);

226 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d_vÆue
,(
uöt8_t
));

230 
GISUNLINK_DEVIDE_STATUS
:

232 
uöt8_t
 
ª•⁄d_vÆue
 = 
SUCCEED
;

233 
uöt8_t
 
cmd
 = 
GISUNLINK_CHARGEING
;

234 
	`BYTES_TO_STRUCT
(
gisu∆ök_devi˚_°©us
,
devi˚_°©us
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

236 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d_vÆue
,(
uöt8_t
));

239 if(
devi˚_°©us
.
id
 < 
MAX_COM_QUANTITY
) {

241 if(
globÆ
->
comLi°
[
devi˚_°©us
.
id
].
íabÀ
 =
NO_ENABLE
) {

242 
cmd
 = 
GISUNLINK_CHARGE_LEISURE
;

244 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
devi˚_°©us
.
id
,
cmd
);

245 } i‡(
devi˚_°©us
.
id
 == 0xFF) {

247 if(
globÆ
->
sy°em
.
rouã_w‹k
 =
IS_ENABLE
) {

248 
cmd
 = 
GISUNLINK_CHARGE_LEISURE
;

250 
	`gisu∆ök_√tw‹k_mu…i_com_po°
(
globÆ
,
cmd
);

254 
GISUNLINK_EXIT_CHARGE_TASK
:

256 
uöt8_t
 
ˇnbe°›
 = 
FALSE
;

257 
uöt8_t
 
ª•⁄d_vÆue
 = 
FAILED
;

258 
	`BYTES_TO_STRUCT
(
gisu∆ök_°›_ch¨ge_èsk
,
°›_ch¨ge
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

259 if(
°›_ch¨ge
.
id
 < 
MAX_COM_QUANTITY
) {

260 if(
°›_ch¨ge
.
f‹˚_°›
) {

261 
ˇnbe°›
 = 
TRUE
;

263 if(
globÆ
->
comLi°
[
°›_ch¨ge
.
id
].
tokí
 == stop_charge.token) {

264 
ˇnbe°›
 = 
TRUE
;

269 if(
ˇnbe°›
) {

270 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
°›_ch¨ge
.
id
,
PORT_LEISURE
);

271 if(
globÆ
->
comLi°
[
°›_ch¨ge
.
id
].
íabÀ
 =
IS_ENABLE
) {

272 
	`gisu∆ök_√tw‹k_sögÀ_com_po°
(
globÆ
,
°›_ch¨ge
.
id
,
GISUNLINK_STOP_CHARGE
);

273 
	`gisu∆ök_com_ª£t
(
globÆ
,
°›_ch¨ge
.
id
,1);

274 
ª•⁄d_vÆue
 = 
	`gisu∆ök_com_°›_ch¨ge
(
globÆ
,
°›_ch¨ge
.
id
);

279 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d_vÆue
,(
uöt8_t
));

283 
GISUNLINK_SET_CONFIG
:

285 
uöt8_t
 
ª•⁄d_vÆue
 = 0;

286 
	`BYTES_TO_STRUCT
(
gisu∆ök_£t_c⁄fig
,
£t_c⁄fig
,
‰ame
->
cmd
,‰ame->
d©a
,‰ame->
d©a_Àn
);

289 
globÆ
->
sy°em
.
no_lﬂd_time
 = 
£t_c⁄fig
.
Ælow_zîo_bÆ™˚
;

290 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,&
ª•⁄d_vÆue
,(
uöt8_t
));

293 
GISUNLINK_RESTART
:

295 
	`gisu∆ök_sy°em_powîdown_backup
();

296 
	`gisu∆ök_sy°em_so·_ª£t
();

301 
	}
}

	@code/User/gisunlink_network_task.h

13 #i‚de‡
__GISUNLINK_NETWORK_TASK_H__


14 
	#__GISUNLINK_NETWORK_TASK_H__


	)

16 #ifde‡
__˝lu•lus


21 
	~"gisu∆ök.h
"

23 
gisu∆ök_dev_fw_öfo
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
);

25 
gisu∆ök_dev_fw_å™s
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
);

27 
gisu∆ök_dev_fw_ªady
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
);

29 
gisu∆ök_èsk_c⁄åﬁ
(
gisu∆ök
 *
globÆ
, 
gisu∆ök_ªcv_‰ame
 *
‰ame
);

31 #ifde‡
__˝lu•lus


	@code/User/gisunlink_system.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~"Lcd_Drivî.h
"

17 
	~"gisu∆ök_lcd.h
"

18 
	~"gisu∆ök_key.h
"

19 
	~"gisu∆ök_c⁄f.h
"

20 
	~"gisu∆ök_ty≥.h
"

21 
	~"gisu∆ök_coms.h
"

22 
	~"gisu∆ök_gpio.h
"

23 
	~"gisu∆ök_timî.h
"

24 
	~"gisu∆ök_sy°em.h
"

25 
	~"gisu∆ök_√tw‹k_èsk.h
"

26 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

28 
gisu∆ök
 
	gglobÆ
 = {0};

30 
	$gisu∆ök_sy°em_ªad_°mID
(
uöt8_t
 *
devi˚SN
) {

31 
vu8
* 
addr
 = (vu8*)(0x1ffff7e8);

32 
uöt8_t
 
i
 = 0;

33 
i
 = 0; i < 
STM32_UNIQUEID_SIZE
; ++i) {

34 
uöt8_t
 
id
*
addr
;

35 
devi˚SN
[
i
] = 
id
;

36 ++
addr
;

38 
	}
}

41 
	$gisu∆ök_sy°em_öô_coms
(
gisu∆ök
 *
globÆ
) {

42 
uöt8_t
 
comID
 = 0;

44 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

45 
globÆ
->
comLi°
[
comID
].
id
 = comID;

46 
globÆ
->
comLi°
[
comID
].
bªakdown
 = 
NO_BREAKDOWN
;

47 
globÆ
->
bªakdown_chk
[
comID
] = 
NO_BREAKDOWN
;

48 
	`gisu∆ök_com_ª£t
(
globÆ
,
comID
,1);

50 
	}
}

52 
	$gisu∆ök_sy°em_check_com_°©e
(
gisu∆ök
 *
globÆ
) {

53 
uöt8_t
 
comID
 = 0;

54 
PORT_STATUS
 
lcd°©e
 = 
PORT_LEISURE
;

56 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

57 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 =
NO_BREAKDOWN
 && globÆ->comLi°[comID].
íabÀ
 =
IS_ENABLE
) {

58 if(
	`gisu∆ök_com_°¨t_ch¨ge
(
globÆ
,
comID
Ë=
FAILED
) {

59 if(
globÆ
->
comLi°
[
comID
].
bªakdown
 !
NO_BREAKDOWN
) {

60 
lcd°©e
 = 
PORT_BREAKDOWN
;

63 
lcd°©e
 = 
PORT_CHARGEING
;

65 } if(
globÆ
->
comLi°
[
comID
].
íabÀ
 =
NO_ENABLE
) {

66 
	`gisu∆ök_com_°›_ch¨ge
(
globÆ
,
comID
);

67 
lcd°©e
 = 
PORT_LEISURE
;

69 
	`gisu∆ök_lcd_£t_p‹t_°©us
(
comID
,
lcd°©e
);

71 
	}
}

73 
uöt8_t
 
	$chkComID
(
gisu∆ök
 *
globÆ
) {

74 
uöt8_t
 
ªtBoﬁ
 = 0, 
comID
 = 0;

75 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

76 if(
globÆ
->
comLi°
[
comID
].
id
 == 0xFF) {

77 
globÆ
->
comLi°
[
comID
].
id
 = comID;

78 
	`gisu∆ök_com_ª£t
(
globÆ
,
comID
,1);

79 
ªtBoﬁ
 = 1;

82  
ªtBoﬁ
;

83 
	}
}

85 
gisu∆ök
 *
	$gisu∆ök_sy°em_öô
() {

87 
globÆ
.
sy°em_upd©e_Êag
 = 
FALSE
;

89 
globÆ
.
sy°em
.
rouã_w‹k
 = 
NO_ENABLE
;

90 
globÆ
.
sy°em
.
√tw‹k_c⁄√˘
 = 
FALSE
;

91 
globÆ
.
sy°em
.
no_lﬂd_time
 = 
NO_LOAD_TIME
;

92 
globÆ
.
sy°em
.
√tw‹k_°©e
 = 
GISUNLINK_NETMANAGER_IDLE
;

94 
	`gisu∆ök_sy°em_ªad_°mID
((
uöt8_t
 *)
globÆ
.
sy°em
.
devi˚SN
);

95 
	`gisu∆ök_sy°em_öô_coms
(&
globÆ
);

98 if(
	`gisu∆ök_c⁄f_öô
(&
globÆ
Ë!
SYSTEM_INIT
) {

99 
	`gisu∆ök_£t_comLi°_c⁄f
(&
globÆ
);

101 
	`gisu∆ök_gë_comLi°_c⁄f
(&
globÆ
);

102 
	`gisu∆ök_sy°em_check_com_°©e
(&
globÆ
);

105 if(
	`chkComID
(&
globÆ
)) {

106 
	`gisu∆ök_£t_comLi°_c⁄f
(&
globÆ
);

109 
vîsi⁄
[16] = {0};

110 
	`¢¥ötf
(
vîsi⁄
,16,"%s%s","GSL",
FIRMWARE_VERSION
);

112 
	`gisu∆ök_lcd_£t_bŸtom
(
vîsi⁄
,
VERSION_STRING
);

114 if(
globÆ
.
c⁄f
.
mode
 =
SYSTEM_GSM_MODE
) {

115 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_GSM_MODULE
);

117 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_WIFI_MODULE
);

119  &
globÆ
;

120 
	}
}

122 
	$gisu∆ök_sy°em_√tw‹k_mesßge
(
gisu∆ök_ªcv_‰ame
 *
‰ame
) {

123 
‰ame
->
cmd
) {

124 
GISUNLINK_NETWORK_STATUS
:

125 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

126 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
NULL
,0);

128 if(
‰ame
->
d©a_Àn
) {

130 
GISUNLINK_NETMANAGER_WORK_STATE
 
°©e
 = (GISUNLINK_NETMANAGER_WORK_STATE)*
‰ame
->
d©a
;

131 if(
°©e
 !
globÆ
.
sy°em
.
√tw‹k_°©e
) {

132 
globÆ
.
sy°em
.
√tw‹k_°©e
 = 
°©e
;

133 
globÆ
.
sy°em
.
√tw‹k_°©e
) {

134 
GISUNLINK_NETMANAGER_IDLE
:

135 
globÆ
.
sy°em
.
gë_devi˚Sn
 = 
FALSE
;

137 
GISUNLINK_NETMANAGER_TIME_SUCCEED
:

138 
globÆ
.
sy°em
.
°©e_ªcvTime
 = 
	`gisu∆ök_sy°em_gë_time_tick
();

140 
GISUNLINK_NETMANAGER_CONNECTED_SER
:

141 
globÆ
.
sy°em
.
√tw‹k_c⁄√˘
 = 
TURE
;

143 
GISUNLINK_NETMANAGER_DISCONNECTED_SER
:

144 
globÆ
.
sy°em
.
ªcvTime
 = 
	`gisu∆ök_sy°em_gë_time_tick
();

145 
globÆ
.
sy°em
.
√tw‹k_c⁄√˘
 = 
FALSE
;

148 
	`gisu∆ök_lcd_ª‰esh_√tw‹k_°©e
(
globÆ
.
sy°em
.
√tw‹k_°©e
);

152 
GISUNLINK_NETWORK_RSSI
:

153 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

154 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
NULL
,0);

155 if(
‰ame
->
d©a_Àn
) {

157 sig√d 
≠Rssi
 = *
‰ame
->
d©a
;

158 
globÆ
.
sy°em
.
sig«l
 = 
≠Rssi
;

159 
	`gisu∆ök_lcd_£t_≠Rssi
(
≠Rssi
);

163 
GISUNLINK_DEV_FW_INFO
:

164 
	`gisu∆ök_dev_fw_öfo
(&
globÆ
,
‰ame
);

166 
GISUNLINK_DEV_FW_TRANS
:

167 
	`gisu∆ök_dev_fw_å™s
(&
globÆ
,
‰ame
);

169 
GISUNLINK_DEV_FW_READY
:

170 
	`gisu∆ök_dev_fw_ªady
(&
globÆ
,
‰ame
);

172 
GISUNLINK_DEV_SN
:

173 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

174 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
NULL
,0);

175 if(
‰ame
->
d©a_Àn
) {

176 if(
globÆ
.
sy°em
.
gë_devi˚Sn
 =
FALSE
) {

177 
globÆ
.
sy°em
.
gë_devi˚Sn
 = 
TRUE
;

178 
	`gisu∆ök_lcd_£t_bŸtom
((*)
‰ame
->
d©a
,
SN_STRING
);

183 
GISUNLINK_HW_SN
:

184 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

185 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,
globÆ
.
sy°em
.
devi˚SN
,
STM32_UNIQUEID_SIZE
);

188 
GISUNLINK_FIRMWARE_VERSION
:

189 if(
‰ame
->
dú
 =
GISUNLINK_COMM_REQ
) {

190 
	`gisu∆ök_√tw‹k_moduÀ_ª•⁄d
(
‰ame
->
id
,‰ame->
cmd
,(
uöt8_t
 *)
FIRMWARE_VERSION
,12);

193 
GISUNLINK_TASK_CONTROL
:

194 
	`gisu∆ök_èsk_c⁄åﬁ
(&
globÆ
,
‰ame
);

199 
	}
}

201 
uöt8_t
 
	$gisu∆ök_sy°em_check_rouã_w‹k
() {

202 
uöt8_t
 
comID
 = 0;

204 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

205 if(
globÆ
.
comLi°
[
comID
].
íabÀ
 =
IS_ENABLE
) {

206 
globÆ
.
sy°em
.
rouã_w‹k
 = 
IS_ENABLE
;

207  
IS_ENABLE
;

211 
globÆ
.
sy°em
.
rouã_w‹k
 = 
NO_ENABLE
;

212  
globÆ
.
sy°em
.
rouã_w‹k
;

213 
	}
}

216 
	$gisu∆ök_sy°em_tick_po°_d©a
() {

217 
uöt8_t
 
£c⁄d
 = 
TIMER_60SECOND
;

218 
uöt8_t
 
cmd
 = 
GISUNLINK_CHARGE_LEISURE
;

220 
globÆ
.
sy°em
.
po°_tick
++;

223 if(
globÆ
.
sy°em
.
gë_devi˚Sn
 =
FALSE
) {

224 
	`gisu∆ök_√tw‹k_moduÀ_wrôe
(
GISUNLINK_DEV_SN
,
NULL
,0);

227 if(
globÆ
.
sy°em
.
rouã_w‹k
 =
IS_ENABLE
) {

228 
cmd
 = 
GISUNLINK_CHARGEING
;

229 
£c⁄d
 = 
TIMER_10SECOND
;

232 if(
globÆ
.
sy°em
.
po°_tick
 >
£c⁄d
) {

234 
	`gisu∆ök_√tw‹k_mu…i_com_po°
(&
globÆ
,
cmd
);

235 
globÆ
.
sy°em
.
po°_tick
 = 0;

238 
	`gisu∆ök_√tw‹k_moduÀ_wrôe
(
GISUNLINK_NETWORK_STATUS
,
NULL
,0);

239 
	}
}

241 
	$gisu∆ök_sy°em_lcd_ª‰esh
() {

243 if(
globÆ
.
sy°em_upd©e_Êag
 =
FALSE
) {

245 if(
globÆ
.
sy°em
.
√tw‹k_°©e
 =
GISUNLINK_NETMANAGER_TIME_SUCCEED
 && globÆ.sy°em.
√tw‹k_c⁄√˘
 =
TRUE
) {

246 if((
	`gisu∆ök_sy°em_gë_time_tick
(Ë- 
globÆ
.
sy°em
.
°©e_ªcvTime
) > 5000) {

247 
globÆ
.
sy°em
.
√tw‹k_°©e
 = 
GISUNLINK_NETMANAGER_CONNECTED_SER
;

248 
	`gisu∆ök_lcd_ª‰esh_√tw‹k_°©e
(
globÆ
.
sy°em
.
√tw‹k_°©e
);

252 
	`gisu∆ök_lcd_ª‰esh
();

254 
globÆ
.
sy°em
.
fúmw¨e
.
å™s„r_timeout
++;

257 if(
globÆ
.
sy°em
.
fúmw¨e
.
å™s„r_timeout
 == 30) {

258 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_UPDATE_TIMEOUT
);

259 
	`gisu∆ök_lcd_ª‰esh
();

262 if(
globÆ
.
sy°em
.
fúmw¨e
.
å™s„r_timeout
 == 36) {

263 
	`gisu∆ök_lcd_£t_°©us
(
LCD_STATE_EXIT_UPDATE
);

264 
	`gisu∆ök_lcd_ª‰esh
();

267 if(
globÆ
.
sy°em
.
fúmw¨e
.
å™s„r_timeout
 >= 40) {

268 
globÆ
.
sy°em
.
fúmw¨e
.
å™s„r_timeout
 = 0;

269 
globÆ
.
sy°em_upd©e_Êag
 = 
FALSE
;

270 
	`gisu∆ök_lcd_ª‰esh_√tw‹k_°©e
(
globÆ
.
sy°em
.
√tw‹k_°©e
);

273 
	}
}

275 
	$gisu∆ök_sy°em_ch¨gr_èsk_check
() {

276 
	`gisu∆ök_ch¨grög_chk
(&
globÆ
,
gisu∆ök_√tw‹k_sögÀ_com_po°
);

277 
	}
}

279 
	$gisu∆ök_sy°em_time_tick
() {

280 
uöt8_t
 
comID
 = 0;

281 
globÆ
.
sy°em
.
tick
++;

283 
	`gisu∆ök_key_sy°em_sˇn
();

285 if(
globÆ
.
sy°em
.
tick
%1000 == 0) {

287 if(
globÆ
.
sy°em
.
√tw‹k_c⁄√˘
 =
FALSE
) {

288 
uöt32_t
 
offLöeTime
 = (
globÆ
.
sy°em
.
tick
 - globÆ.sy°em.
ªcvTime
);

290 if(
offLöeTime
 >= 900000) {

293 if(
globÆ
.
sy°em
.
rouã_w‹k
 =
IS_ENABLE
) {

294 
	`gisu∆ök_sy°em_powîdown_backup
();

296 
	`gisu∆ök_sy°em_so·_ª£t
();

299 
globÆ
.
sy°em
.
ªcvTime
 = globÆ.sy°em.
tick
;

300 if(
globÆ
.
sy°em
.
rouã_w‹k
 =
IS_ENABLE
) {

301 
	`GSM_HIGH
();

302 
	`WIFI_HIGH
();

303 if(
globÆ
.
c⁄f
.
mode
 =
SYSTEM_GSM_MODE
) {

304 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_GSM_MODULE
);

306 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_WIFI_MODULE
);

309 
	`gisu∆ök_sy°em_so·_ª£t
();

315 
comID
 = 0; comID < 
MAX_COM_QUANTITY
; comID++) {

316 if(
globÆ
.
comLi°
[
comID
].
íabÀ
 =
IS_ENABLE
) {

317 
globÆ
.
comLi°
[
comID
].
utime
++;

319 if(
globÆ
.
comLi°
[
comID
].
bªakdown
 !
NO_BREAKDOWN
 && globÆ.
bªakdown_chk
[comID] == NO_BREAKDOWN) {

320 
globÆ
.
comLi°
[
comID
].
bªakdown_time
++;

324 
	}
}

326 
uöt32_t
 
	$gisu∆ök_sy°em_gë_time_tick
() {

327  
globÆ
.
sy°em
.
tick
;

328 
	}
}

330 
	$gisu∆ök_sy°em_powîdown_backup
() {

332 
	`GSM_HIGH
();

333 
	`WIFI_HIGH
();

334 
LCD_LED_CLR
;

336 
	`TaskTimî_DißbÀ
();

337 
	`Po°Timî_DißbÀ
();

338 
	`s¸ìnTimî_DißbÀ
();

339 
	`C≠tuªTimî_DißbÀ
();

340 
	`__£t_PRIMASK
(1);

341 
	`gisu∆ök_£t_comLi°_c⁄f
(&
globÆ
);

342 
	`gisu∆ök_£t_timî_ˇ±uª_°a
(0);

343 
	`C≠tuªTimî_E«bÀ
();

344 
	`__£t_PRIMASK
(0);

346 
LCD_LED_SET
;

348 if(
globÆ
.
c⁄f
.
mode
 =
SYSTEM_GSM_MODE
) {

349 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_GSM_MODULE
);

351 
	`gisu∆ök_£À˘_√tw‹k_moduÀ
(
GISUNLINK_WIFI_MODULE
);

354 
	`TaskTimî_E«bÀ
();

355 
	`Po°Timî_E«bÀ
();

356 
	`s¸ìnTimî_E«bÀ
();

357 
	`C≠tuªTimî_E«bÀ
();

358 
	}
}

360 
	$gisu∆ök_sy°em_powîdown
() {

361 if(
globÆ
.
sy°em_upd©e_Êag
 =
FALSE
) {

362 
	`gisu∆ök_sy°em_powîdown_backup
();

364 
	}
}

367 
	$gisu∆ök_sy°em_so·_ª£t
() {

368 
	`__£t_FAULTMASK
(1);

369 
	`NVIC_Sy°emRe£t
();

370 
	}
}

	@code/User/gisunlink_system.h

13 #i‚de‡
__GISUNLINK_SYSTEM_H__


14 
	#__GISUNLINK_SYSTEM_H__


	)

16 
	~"gisu∆ök.h
"

18 #ifde‡
__˝lu•lus


23 
gisu∆ök
 *
gisu∆ök_sy°em_öô
();

25 
gisu∆ök_sy°em_√tw‹k_mesßge
(
gisu∆ök_ªcv_‰ame
 *
‰ame
);

27 
uöt8_t
 
gisu∆ök_sy°em_check_rouã_w‹k
();

29 
gisu∆ök_sy°em_swôch_timî
(
uöt8_t
 
timî
);

31 
gisu∆ök_sy°em_tick_po°_d©a
();

33 
gisu∆ök_sy°em_lcd_ª‰esh
();

35 
gisu∆ök_sy°em_ch¨gr_èsk_check
();

37 
gisu∆ök_sy°em_time_tick
();

39 
uöt32_t
 
gisu∆ök_sy°em_gë_time_tick
();

41 
gisu∆ök_sy°em_powîdown
();

43 
gisu∆ök_sy°em_powîdown_backup
();

45 
gisu∆ök_sy°em_so·_ª£t
();

47 #ifde‡
__˝lu•lus


	@code/User/gisunlink_timer.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"gisu∆ök.h
"

16 
	~"gisu∆ök_timî.h
"

17 
	~"gisu∆ök_gpio.h
"

18 
	~"Lcd_Drivî.h
"

19 
	~"gisu∆ök_ì¥om.h
"

20 
	~"gisu∆ök_gpio.h
"

23 vﬁ©ûê
uöt8_t
 
	mtimî_ˇ±uª_°a
 ;

24 vﬁ©ûê
uöt16_t
 
	mtimî_ˇ±uª_vÆ
 ;

25 } 
	tC≠tuªTimîD©aTy≥
;

27 
	s_gisu∆ök_timî_˘æ
 {

28 
GISUNLINK_TIMER_CALLBACK
 *
	mèsk_check
;

29 
GISUNLINK_TIMER_CALLBACK
 *
	mpo°_d©a
;

30 
GISUNLINK_TIMER_CALLBACK
 *
	mn‹mÆ_èsk
;

31 
GISUNLINK_TIMER_CALLBACK
 *
	mˇ±uª_èsk
;

32 
TIM_Ty≥Def
 *
	mèsk_Timî
;

33 
TIM_Ty≥Def
 *
	mpo°_Timî
;

34 
TIM_Ty≥Def
 *
	mn‹mÆ_Timî
;

35 
TIM_Ty≥Def
 *
	mˇ±uª_Timî
;

36 } 
	tgisu∆ök_timî_˘æ
;

38 
gisu∆ök_timî_˘æ
 
	gtimî_˘æ
;

39 
C≠tuªTimîD©aTy≥
 
	gC≠tuªTimîD©a
;

41 
	$gisu∆ök_timî_c⁄fig
(
TIM_Ty≥Def
 *
Timî
,
uöt16_t
 
Pîiod
,uöt16_à
PªsˇÀr
,
uöt8_t
 
Pri‹ôy
) {

42 
uöt32_t
 
RCC_APB1Pîùh
 = 0;

43 
uöt8_t
 
IRQCh™√l
 = 0;

44 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

45 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

47 
	`TIM_DeInô
(
Timî
);

49 *(
uöt32_t
*)&
Timî
) {

50 
TIM1_BASE
:

51 
IRQCh™√l
 = 
TIM1_UP_IRQn
;

52 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

53 
TIM_TimeBa£Såu˘uª
.
TIM_Rïëôi⁄Cou¡î
=0;

55 
TIM2_BASE
:

56 
IRQCh™√l
 = 
TIM2_IRQn
;

57 
RCC_APB1Pîùh
 = 
RCC_APB1Pîùh_TIM2
;

59 
TIM3_BASE
:

60 
IRQCh™√l
 = 
TIM3_IRQn
;

61 
RCC_APB1Pîùh
 = 
RCC_APB1Pîùh_TIM3
;

63 
TIM4_BASE
:

64 
IRQCh™√l
 = 
TIM4_IRQn
;

65 
RCC_APB1Pîùh
 = 
RCC_APB1Pîùh_TIM4
;

69 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh
, 
ENABLE
);

71 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 
Pîiod
 - 1;

72 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 
PªsˇÀr
 - 1;

73 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 0;

74 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

75 
	`TIM_TimeBa£Inô
(
Timî
, &
TIM_TimeBa£Såu˘uª
);

77 
	`TIM_ITC⁄fig
(
Timî
,
TIM_IT_Upd©e
,
ENABLE
);

79 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
IRQCh™√l
;

80 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
Pri‹ôy
;

81 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

82 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

83 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

85 
	`TIM_CÀ¨ITPídögBô
(
Timî
, 
TIM_IT_Upd©e
);

86 
	`TIM_Cmd
(
Timî
, 
ENABLE
);

87 
	}
}

89 
	$gisu∆ök_ˇ±uª_timî_c⁄fig
(
TIM_Ty≥Def
 *
Timî
,
uöt16_t
 
Pîiod
,uöt16_à
PªsˇÀr
,
uöt8_t
 
Pri‹ôy
) {

90 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

91 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

92 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

93 
TIM_ICInôTy≥Def
 
TIM2_ICInôSåu˘uª
;

95 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

96 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
|
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

97 
	`GPIO_PöRem≠C⁄fig
(
GPIO_Rem≠_SWJ_JTAGDißbÀ
, 
ENABLE
);

98 
	`GPIO_PöRem≠C⁄fig
(
GPIO_P¨tülRem≠1_TIM2
, 
ENABLE
);

100 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_3
;

101 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPD
;

102 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

103 
	`GPIO_Re£tBôs
(
GPIOB
,
GPIO_Pö_3
);

106 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 
Pîiod
;

107 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 
PªsˇÀr
;

108 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

109 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

110 
	`TIM_TimeBa£Inô
(
TIM2
, &
TIM_TimeBa£Såu˘uª
);

113 
TIM2_ICInôSåu˘uª
.
TIM_Ch™√l
 = 
TIM_Ch™√l_2
;

114 
TIM2_ICInôSåu˘uª
.
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

115 
TIM2_ICInôSåu˘uª
.
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

116 
TIM2_ICInôSåu˘uª
.
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

117 
TIM2_ICInôSåu˘uª
.
TIM_ICFûãr
 = 0x00;

118 
	`TIM_ICInô
(
TIM2
, &
TIM2_ICInôSåu˘uª
);

121 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM2_IRQn
;

122 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
Pri‹ôy
;

123 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

124 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

125 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

127 
	`TIM_Cmd
(
TIM2
,
DISABLE
);

128 
	`TIM_ITC⁄fig
(
TIM2
,
TIM_IT_Upd©e
|
TIM_IT_CC2
,
ENABLE
);

130 
	}
}

132 
	$gisu∆ök_timî_öô
() {

133 
timî_˘æ
.
èsk_Timî
 = 
TIM1
;

134 
timî_˘æ
.
ˇ±uª_Timî
 = 
TIM2
;

135 
timî_˘æ
.
po°_Timî
 = 
TIM3
;

136 
timî_˘æ
.
n‹mÆ_Timî
 = 
TIM4
;

140 
	`gisu∆ök_timî_c⁄fig
(
timî_˘æ
.
èsk_Timî
,9500,7200,2);

141 
	`gisu∆ök_timî_c⁄fig
(
timî_˘æ
.
po°_Timî
,10000,7200,3);

142 
	`gisu∆ök_timî_c⁄fig
(
timî_˘æ
.
n‹mÆ_Timî
,5000,7200,4);

143 
	`gisu∆ök_ˇ±uª_timî_c⁄fig
(
timî_˘æ
.
ˇ±uª_Timî
,40000,72,0);

144 
	}
}

146 
	$gisu∆ök_timî_ªgi°î_èsk_check
(
GISUNLINK_TIMER_CALLBACK
 *
èsk_check
) {

148 if(
èsk_check
) {

149 
timî_˘æ
.
èsk_check
 =Åask_check;

153 
	}
}

155 
	$gisu∆ök_timî_ªgi°î_po°_d©a
(
GISUNLINK_TIMER_CALLBACK
 *
po°_d©a
) {

156 if(
po°_d©a
) {

157 
timî_˘æ
.
po°_d©a
 =Öost_data;

160 
	}
}

162 
	$gisu∆ök_timî_ªgi°î_n‹mÆ_èsk
(
GISUNLINK_TIMER_CALLBACK
 *
n‹mÆ_èsk
) {

163 if(
n‹mÆ_èsk
) {

164 
timî_˘æ
.
n‹mÆ_èsk
 =Çormal_task;

167 
	}
}

169 
	$gisu∆ök_timî_ªgi°î_ˇ±uª_èsk
(
GISUNLINK_TIMER_CALLBACK
 *
ˇ±uª_èsk
) {

170 if(
ˇ±uª_èsk
) {

171 
timî_˘æ
.
ˇ±uª_èsk
 = capture_task;

174 
	}
}

176 
	$gisu∆ök_timî_èsk_check_úq
() {

177 if(
	`TIM_GëITSètus
(
timî_˘æ
.
èsk_Timî
, 
TIM_IT_Upd©e
Ë!
RESET
)

179 if(
timî_˘æ
.
èsk_check
)

181 
timî_˘æ
.
	`èsk_check
();

183 
	`TIM_CÀ¨ITPídögBô
(
timî_˘æ
.
èsk_Timî
, 
TIM_IT_Upd©e
);

185 
	}
}

187 
	$gisu∆ök_timî_po°_d©a_úq
() {

188 if(
	`TIM_GëITSètus
(
timî_˘æ
.
po°_Timî
, 
TIM_IT_Upd©e
Ë!
RESET
)

190 if(
timî_˘æ
.
po°_d©a
)

192 
timî_˘æ
.
	`po°_d©a
();

194 
	`TIM_CÀ¨ITPídögBô
(
timî_˘æ
.
po°_Timî
, 
TIM_IT_Upd©e
);

196 
	}
}

198 
	$gisu∆ök_timî_s¸ìn_ª‰esh_úq
() {

199 if(
	`TIM_GëITSètus
(
timî_˘æ
.
n‹mÆ_Timî
, 
TIM_IT_Upd©e
Ë!
RESET
)

201 if(
timî_˘æ
.
n‹mÆ_èsk
)

203 
timî_˘æ
.
	`n‹mÆ_èsk
();

205 
	`TIM_CÀ¨ITPídögBô
(
timî_˘æ
.
n‹mÆ_Timî
, 
TIM_IT_Upd©e
);

207 
	}
}

209 
	$gisu∆ök_powîdown_ac_check_úq
() {

211 if(
	`TIM_GëITSètus
(
timî_˘æ
.
ˇ±uª_Timî
, 
TIM_IT_Upd©e
Ë!
RESET
) {

212 if(
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
&0XC0) {

213 if(
timî_˘æ
.
ˇ±uª_èsk
)

215 
timî_˘æ
.
	`ˇ±uª_èsk
();

220 i‡(
	`TIM_GëITSètus
(
timî_˘æ
.
ˇ±uª_Timî
, 
TIM_IT_CC2
Ë!
RESET
)

222 if(
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
&0X40)

224 
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
=0;

225 
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
 = 0x80;

226 
C≠tuªTimîD©a
.
timî_ˇ±uª_vÆ
=
	`TIM_GëC≠tuª2
(
TIM2
);

227 
	`TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM2
,
TIM_ICPﬁ¨ôy_Risög
);

231 
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
=0;

232 
C≠tuªTimîD©a
.
timî_ˇ±uª_vÆ
=0;

233 
	`TIM_SëCou¡î
(
TIM2
,0);

234 
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
|=0X40;

235 
	`TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM2
,
TIM_ICPﬁ¨ôy_FÆlög
);

239 
	`TIM_CÀ¨ITPídögBô
(
timî_˘æ
.
ˇ±uª_Timî
, 
TIM_IT_CC2
|
TIM_IT_Upd©e
);

240 
	}
}

242 
	$gisu∆ök_£t_timî_ˇ±uª_°a
(
uöt8_t
 
°a
) {

243 
C≠tuªTimîD©a
.
timî_ˇ±uª_°a
=
°a
;

244 
	}
}

	@code/User/gisunlink_timer.h

13 #i‚de‡
__GISUNLINK_TIMER_H__


14 
	#__GISUNLINK_TIMER_H__


	)

16 
	~"°m32f10x.h
"

18 #ifde‡
__˝lu•lus


23 
	#TaskTimî_E«bÀ
(Ë
TIM1
->
CR1
 |
TIM_CR1_CEN


	)

24 
	#TaskTimî_DißbÀ
(Ë
TIM1
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
))

	)

26 
	#C≠tuªTimî_E«bÀ
(Ë
TIM2
->
CR1
 |
TIM_CR1_CEN


	)

27 
	#C≠tuªTimî_DißbÀ
(Ë
TIM2
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
))

	)

29 
	#Po°Timî_E«bÀ
(Ë
TIM3
->
CR1
 |
TIM_CR1_CEN


	)

30 
	#Po°Timî_DißbÀ
(Ë
TIM3
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
))

	)

32 
	#s¸ìnTimî_E«bÀ
(Ë
TIM4
->
CR1
 |
TIM_CR1_CEN


	)

33 
	#s¸ìnTimî_DißbÀ
(Ë
TIM4
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
))

	)

35 
	#TaskTimî_CÀ¨ITPídögBô
(Ë
TIM1
->
SR
 = (
uöt16_t
)~
TIM_IT_Upd©e


	)

37 
	#C≠tuªTimî_CÀ¨ITPídögBô
(Ë
TIM2
->
SR
 = (
uöt16_t
)~(
TIM_IT_CC2
|
TIM_IT_Upd©e
)

	)

38 
	#Po°Timî_CÀ¨ITPídögBô
(Ë
TIM3
->
SR
 = (
uöt16_t
)~
TIM_IT_Upd©e


	)

39 
	#s¸ìnTimî_CÀ¨ITPídögBô
(Ë
TIM4
->
SR
 = (
uöt16_t
)~
TIM_IT_Upd©e


	)

41 
	tGISUNLINK_TIMER_CALLBACK
();

43 
gisu∆ök_timî_öô
();

45 
gisu∆ök_timî_ªgi°î_èsk_check
(
GISUNLINK_TIMER_CALLBACK
 *
èsk_check
);

47 
gisu∆ök_timî_ªgi°î_po°_d©a
(
GISUNLINK_TIMER_CALLBACK
 *
po°_d©a
);

49 
gisu∆ök_timî_ªgi°î_n‹mÆ_èsk
(
GISUNLINK_TIMER_CALLBACK
 *
n‹mÆ_èsk
);

51 
gisu∆ök_timî_ªgi°î_ˇ±uª_èsk
(
GISUNLINK_TIMER_CALLBACK
 *
ˇ±uª_èsk
);

53 
gisu∆ök_timî_èsk_check_úq
();

55 
gisu∆ök_timî_po°_d©a_úq
();

57 
gisu∆ök_timî_s¸ìn_ª‰esh_úq
();

59 
gisu∆ök_powîdown_ac_check_úq
();

61 
gisu∆ök_£t_timî_ˇ±uª_°a
(
uöt8_t
 
°a
);

63 #ifde‡
__˝lu•lus


	@code/User/gisunlink_type.h

13 #i‚de‡
__GISUNLINK_TYPE_H__


14 
	#__GISUNLINK_TYPE_H__


	)

16 #ifde‡
__˝lu•lus


21 
	#USART_DEBUG


	)

22 
	#EM_DEBUG


	)

24 
	#MAX_COM_QUANTITY
 10

	)

25 
	#STM32_UNIQUEID_SIZE
 12

	)

27 
	#CHARGR_OVER_CURRENT
 50

28 
	#CHK_CURRENT_MA
 5

	)

30 
	#SUCCEED
 0

31 
	#FAILED
 1

32 

	)

33 
	#TURE
 1

34 
	#FALSE
 0

35 

	)

36 
	#TIMER_10SECOND
 15

37 
	#TIMER_60SECOND
 60

38 

	)

39 
	#IS_BREAKDOWN
 1

40 
	#NO_BREAKDOWN
 0

41 

	)

42 
	#IS_ENABLE
 1

43 
	#NO_ENABLE
 0

44 

	)

45 
	#IS_FALLING
 1

46 
	#NO_FALLING
 0

	)

48 
	#SINGLE_RECORD
 1

49 
	#MULTI_RECORD
 
MAX_COM_QUANTITY


50 

	)

51 
	#FIRMWARE_MD5_SIZE
 33

52 

	)

53 
	#NO_LOAD_TIME
 30

54 

	)

55 
	#OPEN_PORT_FAILED
 0x02

56 
	#READ_PORT_FAILED
 0x04

57 
	#VOLTAGE_OVERFLOW
 0x08

58 
	#CURREN_OVERFLOW_3A
 0x10

59 
	#CURREN_OVERFLOW_SETTING
 0x20

60 

	)

61 
	#USART_RX_BUFFER_SIZE
 280

	)

62 
	#USART_TX_BUFFER_SIZE
 512

	)

63 
	#USART_BUF_DIMENSION
 12

	)

65 #ifde‡
__˝lu•lus


	@code/User/gisunlink_updata.c

2 
	~"gisu∆ök_upd©a.h
"

3 
	~"gisu∆ök_ußπ.h
"

4 
	~"gisu∆ök_ì¥om.h
"

5 
	~"gisu∆ök_dñay.h
"

6 
	~"gisu∆ök_sy°em.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	#CHIP_FLASH_SIZE
 128

13 

	)

14 
	#FLASH_RW_SIZE
 4

	)

16 #i‡
CHIP_FLASH_SIZE
 < 256

17 
	#SECTOR_SIZE
 1024

18 #ñ£

	)

19 
	#SECTOR_SIZE
 2048

	)

22 
	#WRITE_DATA_SIZE
 256

	)

24 
	#FLASH_BOOT_BASE
 0x08000000

25 

	)

26 
uöt32_t
 
	gFLASH_PAGE_BUF
[
SECTOR_SIZE
/
FLASH_RW_SIZE
];

27 
uöt32_t
 
	gCMP_DATA_BUF
[
FLASH_RW_SIZE
];

28 
uöt32_t
 
	gWRITE_DATA_BUF
[
WRITE_DATA_SIZE
/
FLASH_RW_SIZE
];

31 
	$gisu∆ök_íabÀ_upd©a
() {

32 
uöt32_t
 
wbuf
= 0x55aa55aa;

33 
	`ì_WrôeByãs
((
uöt8_t
 *)&
wbuf
, 
IAP_PARAMETER
, 4);

35 
	`Dñay
(6000000);

36 
	`gisu∆ök_sy°em_so·_ª£t
();

38 
	}
}

40 
	$gisu∆ök_Êash_ªad_d©a
(
uöt32_t
 
addªss
,uöt32_à*
buf
, 
uöt16_t
 
Àn
) {

41 
uöt16_t
 
i
;

42 
i
 = 0; i < 
Àn
; i++) {

43 
buf
[
i
] = (*(
__IO
 
uöt32_t
 *)
addªss
);

44 
addªss
 +
FLASH_RW_SIZE
;

46 
	}
}

48 
uöt8_t
 
	$gisu∆ök_Êash_wrôe_d©a
(
uöt32_t
 
addªss
, uöt32_à*
buf
, 
uöt16_t
 
Àn
) {

49 
uöt16_t
 
i
; 
uöt8_t
 
ªt
 = 0;

50 
uöt32_t
 *
d©a
 = 
NULL
;

51 
i
 = 0; i < 
Àn
; i++) {

52 
d©a
 = &
buf
[
i
];

53 if(
	`FLASH_ProgømW‹d
(
addªss
,
buf
[
i
]Ë=
FLASH_COMPLETE
) {

54 
	`gisu∆ök_Êash_ªad_d©a
(
addªss
,
CMP_DATA_BUF
,1);

55 if(
	`memcmp
(
d©a
,
CMP_DATA_BUF
,
FLASH_RW_SIZE
) == 0) {

56 
addªss
 +
FLASH_RW_SIZE
;

58 
ªt
 = 1;

62 
ªt
 = 1;

66  
ªt
;

67 
	}
}

69 
uöt8_t
 
	$gisu∆ök_wrôe_Êash_by_upd©e
(
uöt32_t
 
off£t
,
uöt8_t
 *
pd©a
,
uöt16_t
 
Àn
) {

70 
uöt16_t
 
i
; 
uöt8_t
 
ªt
 = 0;

71 
uöt32_t
 
WrôeAddr
 = 
CODE_COPY_START_ADDRESS
 + 
off£t
;

72 
uöt32_t
 
Êash_off£t
 = 
WrôeAddr
 - 
FLASH_BOOT_BASE
;

73 
uöt16_t
 
wrôe_off£t
 = 
Àn
 / 
FLASH_RW_SIZE
;

74 
uöt32_t
 
∑ge_pos
 = 
Êash_off£t
 / 
SECTOR_SIZE
;

75 
uöt16_t
 
∑ge_off£t
 = (
Êash_off£t
%
SECTOR_SIZE
)/
FLASH_RW_SIZE
;

76 
uöt16_t
 
∑ge_ªmaö_buf
 = 
SECTOR_SIZE
/
FLASH_RW_SIZE
 - 
∑ge_off£t
;

77 
uöt32_t
 
∑ge_addªss
 = 0;

78 
uöt8_t
 
d©a
[
FLASH_RW_SIZE
];

80 if(
Àn
 == 0) {

84 if(
WrôeAddr
 < 
FLASH_BOOT_BASE
||(WrôeAdd∏>(FLASH_BOOT_BASE + 1024*
CHIP_FLASH_SIZE
))) {

88 if(
wrôe_off£t
 <
∑ge_ªmaö_buf
) {

89 
∑ge_ªmaö_buf
 = 
wrôe_off£t
;

92 
	`__£t_PRIMASK
(1);

94 
	`FLASH_U∆ockB™k1
();

96 
	`FLASH_CÀ¨Fœg
(
FLASH_FLAG_EOP
 | 
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_WRPRTERR
);

99 
∑ge_addªss
 = (
∑ge_pos
 * 
SECTOR_SIZE
Ë+ 
FLASH_BOOT_BASE
;

100 
	`gisu∆ök_Êash_ªad_d©a
(
∑ge_addªss
,
FLASH_PAGE_BUF
,
SECTOR_SIZE
/
FLASH_RW_SIZE
);

101 
i
 = 0; i < 
∑ge_ªmaö_buf
; i++) {

102 if(
FLASH_PAGE_BUF
[
∑ge_off£t
 + 
i
] != 0xFFFFFFFF) ;

105 if(
i
 < 
∑ge_ªmaö_buf
) {

106 if(
	`FLASH_Eø£Page
(
∑ge_addªss
Ë!
FLASH_COMPLETE
) {

107 
ªt
 = 1;

110 
i
 = 0; i < 
∑ge_ªmaö_buf
; i++) {

111 
d©a
[0] = *
pd©a
++;

112 
d©a
[1] = *
pd©a
++;

113 
d©a
[2] = *
pd©a
++;

114 
d©a
[3] = *
pd©a
++;

115 
	`mem˝y
(&
FLASH_PAGE_BUF
[
i
 + 
∑ge_off£t
],
d©a
,
FLASH_RW_SIZE
);

117 if(
	`gisu∆ök_Êash_wrôe_d©a
(
∑ge_addªss
,
FLASH_PAGE_BUF
,
SECTOR_SIZE
/
FLASH_RW_SIZE
) != 0) {

118 
ªt
 = 1;

122 
i
 = 0; i < 
∑ge_ªmaö_buf
; i++) {

123 
d©a
[0] = *
pd©a
++;

124 
d©a
[1] = *
pd©a
++;

125 
d©a
[2] = *
pd©a
++;

126 
d©a
[3] = *
pd©a
++;

127 
	`mem˝y
(&
WRITE_DATA_BUF
[
i
],
d©a
,
FLASH_RW_SIZE
);

129 if(
	`gisu∆ök_Êash_wrôe_d©a
(
WrôeAddr
,
WRITE_DATA_BUF
,
∑ge_ªmaö_buf
) != 0) {

130 
ªt
 = 1;

135 if(
wrôe_off£t
 =
∑ge_ªmaö_buf
) {

138 
∑ge_pos
++;

139 
∑ge_off£t
 = 0;

140 
pd©a
 +(
∑ge_ªmaö_buf
 * 
FLASH_RW_SIZE
);

141 
WrôeAddr
 +
∑ge_ªmaö_buf
;

142 
wrôe_off£t
 -
∑ge_ªmaö_buf
;

143 if(
wrôe_off£t
 > (
SECTOR_SIZE
/
FLASH_RW_SIZE
)) {

144 
∑ge_ªmaö_buf
 = 
SECTOR_SIZE
 / 
FLASH_RW_SIZE
;

146 
∑ge_ªmaö_buf
 = 
wrôe_off£t
;

151 
	`FLASH_LockB™k1
();

152 
	`__£t_PRIMASK
(0);

154  
ªt
;

155 
	}
}

	@code/User/gisunlink_updata.h

1 #i‚de‡
__GISUNLINK_UPDATA_H


2 
	#__GISUNLINK_UPDATA_H


	)

5 
	~"°m32f10x.h
"

6 
	~"°m32f10x_Êash.h
"

15 
	#IAP_PARAMETER
 0

	)

17 
	#CODE_COPY_START_ADDRESS
 ((
uöt32_t
)0x08011000)

18 
	#CODE_COPY_END_ADDRESS
 ((
uöt32_t
)0x08020000)

19 

	)

32 
uöt8_t
 
gisu∆ök_wrôe_Êash_by_upd©e
(
uöt32_t
 
off£t
,uöt8_à*
pd©a
,
uöt16_t
 
Àn
);

34 
gisu∆ök_íabÀ_upd©a
();

	@code/User/gisunlink_usart.c

1 
	~"gisu∆ök_ußπ.h
"

4 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

6 
	s__FILE


8 
	mh™dÀ
;

12 
FILE
 
	g__°dout
;

14 
	$_sys_exô
(
x
)

16 
x
 = x;

17 
	}
}

19 
	$Âutc
(
ch
, 
FILE
 *
f
)

21 
	`USART_GëFœgSètus
(
USART2
,
USART_FLAG_TC
)==
RESET
);

22 
	`USART_SídD©a
(
USART2
,(
uöt8_t
)
ch
);

23  
ch
;

24 
	}
}

27 
	$gisu∆ök_debug_ußπ_öô
()

30 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

31 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

34 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

35 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

38 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

39 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

40 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

41 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

44 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_3
;

45 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

46 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

48 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 19200;

49 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

50 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

51 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

52 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

53 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

54 
	`USART_Inô
(
USART2
, &
USART_InôSåu˘uª
);

56 
	`USART_Cmd
(
USART2
, 
ENABLE
);

57 
	`USART_GëFœgSètus
(
USART2
,
USART_FLAG_TC
);

58 
	`USART2_DißbÀ
();

60 
	}
}

62 
	$gisu∆ök_check_ußπ_öô
()

65 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

66 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

67 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

69 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

70 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

73 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
;

74 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

75 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_OD
;

76 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

79 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
;

80 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

81 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

83 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 4800;

84 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_9b
;

85 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

86 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_Eví
;

87 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

88 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

89 
	`USART_Inô
(
USART3
, &
USART_InôSåu˘uª
);

92 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART3_IRQn
;

93 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

94 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

95 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

96 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

98 
	`USART_ITC⁄fig
(
USART3
, 
USART_IT_RXNE
, 
ENABLE
);

103 
	`USART_Cmd
(
USART3
, 
ENABLE
);

104 
	`USART_GëFœgSètus
(
USART3
,
USART_FLAG_TC
);

108 
	}
}

	@code/User/gisunlink_usart.h

1 #i‚de‡
__GISUNLINK_USART_H


2 
	#__GISUNLINK_USART_H


	)

5 
	~"°dio.h
"

6 
	~"°m32f10x.h
"

8 
	#USART2_E«bÀ
()

9 
	#USART2_DißbÀ
()

10 

	)

12 
	mUART1_INDEX
,

13 
	mUART2_INDEX
,

14 
	mUART3_INDEX


15 } 
	tUART_INDEX
;

18 
gisu∆ök_check_ußπ_öô
();

19 
gisu∆ök_debug_ußπ_öô
();

	@code/User/lcd/Font.h

1 #i‚de‡
_FONT_H_


2 
	#_FONT_H_


	)

3 
	#USE_ONCHIP_FLASH_FONT
 1

	)

4 c⁄° 
	gasc16
[]={

5 #i‡
USE_ONCHIP_FLASH_FONT


106 c⁄° 
	gsz32
[]={

107 #i‡
USE_ONCHIP_FLASH_FONT


142 
	stypFNT_GB162


144 
	mIndex
[2];

145 
	mMsk
[32];

148 
	#hz16_num
 60

	)

150 c⁄° 
typFNT_GB162
 
	ghz16
[] = {

151 #i‡
USE_ONCHIP_FLASH_FONT


	@code/User/lcd/GUI.c

1 
	~"°m32f10x.h
"

2 
	~"Lcd_Drivî.h
"

3 
	~"GUI.h
"

4 
	~"gisu∆ök_dñay.h
"

5 
	~"f⁄t.h
"

11 
u16
 
	$LCD_BGR2RGB
(
u16
 
c
)

13 
u16
 
r
,
g
,
b
,
rgb
;

14 
b
=(
c
>>0)&0x1f;

15 
g
=(
c
>>5)&0x3f;

16 
r
=(
c
>>11)&0x1f;

17 
rgb
=(
b
<<11)+(
g
<<5)+(
r
<<0);

18 (
rgb
);

20 
	}
}

22 
	$Gui_Cú˛e
(
u16
 
X
,u16 
Y
,u16 
R
,u16 
fc
)

24 
a
,
b
;

25 
c
;

26 
a
=0;

27 
b
=
R
;

28 
c
=3-2*
R
;

29 
a
<
b
)

31 
	`Gui_DøwPoöt
(
X
+
a
,
Y
+
b
,
fc
);

32 
	`Gui_DøwPoöt
(
X
-
a
,
Y
+
b
,
fc
);

33 
	`Gui_DøwPoöt
(
X
+
a
,
Y
-
b
,
fc
);

34 
	`Gui_DøwPoöt
(
X
-
a
,
Y
-
b
,
fc
);

35 
	`Gui_DøwPoöt
(
X
+
b
,
Y
+
a
,
fc
);

36 
	`Gui_DøwPoöt
(
X
-
b
,
Y
+
a
,
fc
);

37 
	`Gui_DøwPoöt
(
X
+
b
,
Y
-
a
,
fc
);

38 
	`Gui_DøwPoöt
(
X
-
b
,
Y
-
a
,
fc
);

40 if(
c
<0Ëc=c+4*
a
+6;

43 
c
=c+4*(
a
-
b
)+10;

44 
b
-=1;

46 
a
+=1;

48 i‡(
a
==
b
)

50 
	`Gui_DøwPoöt
(
X
+
a
,
Y
+
b
,
fc
);

51 
	`Gui_DøwPoöt
(
X
+
a
,
Y
+
b
,
fc
);

52 
	`Gui_DøwPoöt
(
X
+
a
,
Y
-
b
,
fc
);

53 
	`Gui_DøwPoöt
(
X
-
a
,
Y
-
b
,
fc
);

54 
	`Gui_DøwPoöt
(
X
+
b
,
Y
+
a
,
fc
);

55 
	`Gui_DøwPoöt
(
X
-
b
,
Y
+
a
,
fc
);

56 
	`Gui_DøwPoöt
(
X
+
b
,
Y
-
a
,
fc
);

57 
	`Gui_DøwPoöt
(
X
-
b
,
Y
-
a
,
fc
);

60 
	}
}

62 
	$Gui_DøwLöe
(
u16
 
x0
, u16 
y0
,u16 
x1
, u16 
y1
,u16 
Cﬁ‹
)

64 
dx
,

65 
dy
,

66 
dx2
,

67 
dy2
,

68 
x_öc
,

69 
y_öc
,

70 
îr‹
,

71 
ödex
;

74 
	`Lcd_SëXY
(
x0
,
y0
);

75 
dx
 = 
x1
-
x0
;

76 
dy
 = 
y1
-
y0
;

78 i‡(
dx
>=0)

80 
x_öc
 = 1;

84 
x_öc
 = -1;

85 
dx
 = -dx;

88 i‡(
dy
>=0)

90 
y_öc
 = 1;

94 
y_öc
 = -1;

95 
dy
 = -dy;

98 
dx2
 = 
dx
 << 1;

99 
dy2
 = 
dy
 << 1;

101 i‡(
dx
 > 
dy
)

104 
îr‹
 = 
dy2
 - 
dx
;

107 
ödex
=0; index <
dx
; index++)

110 
	`Gui_DøwPoöt
(
x0
,
y0
,
Cﬁ‹
);

113 i‡(
îr‹
 >= 0)

115 
îr‹
-=
dx2
;

118 
y0
+=
y_öc
;

122 
îr‹
+=
dy2
;

125 
x0
+=
x_öc
;

131 
îr‹
 = 
dx2
 - 
dy
;

134 
ödex
=0; index <
dy
; index++)

137 
	`Gui_DøwPoöt
(
x0
,
y0
,
Cﬁ‹
);

140 i‡(
îr‹
 >= 0)

142 
îr‹
-=
dy2
;

145 
x0
+=
x_öc
;

149 
îr‹
+=
dx2
;

152 
y0
+=
y_öc
;

155 
	}
}

159 
	$Gui_box
(
u16
 
x
, u16 
y
, u16 
w
, u16 
h
,u16 
bc
)

161 
	`Gui_DøwLöe
(
x
,
y
,x+
w
,y,0xEF7D);

162 
	`Gui_DøwLöe
(
x
+
w
-1,
y
+1,x+w-1,y+1+
h
,0x2965);

163 
	`Gui_DøwLöe
(
x
,
y
+
h
,x+
w
,y+h,0x2965);

164 
	`Gui_DøwLöe
(
x
,
y
,x,y+
h
,0xEF7D);

165 
	`Gui_DøwLöe
(
x
+1,
y
+1,x+1+
w
-2,y+1+
h
-2,
bc
);

166 
	}
}

167 
	$Gui_box2
(
u16
 
x
,u16 
y
,u16 
w
,u16 
h
, 
u8
 
mode
)

169 i‡(
mode
==0) {

170 
	`Gui_DøwLöe
(
x
,
y
,x+
w
,y,0xEF7D);

171 
	`Gui_DøwLöe
(
x
+
w
-1,
y
+1,x+w-1,y+1+
h
,0x2965);

172 
	`Gui_DøwLöe
(
x
,
y
+
h
,x+
w
,y+h,0x2965);

173 
	`Gui_DøwLöe
(
x
,
y
,x,y+
h
,0xEF7D);

175 i‡(
mode
==1) {

176 
	`Gui_DøwLöe
(
x
,
y
,x+
w
,y,0x2965);

177 
	`Gui_DøwLöe
(
x
+
w
-1,
y
+1,x+w-1,y+1+
h
,0xEF7D);

178 
	`Gui_DøwLöe
(
x
,
y
+
h
,x+
w
,y+h,0xEF7D);

179 
	`Gui_DøwLöe
(
x
,
y
,x,y+
h
,0x2965);

181 i‡(
mode
==2) {

182 
	`Gui_DøwLöe
(
x
,
y
,x+
w
,y,0xffff);

183 
	`Gui_DøwLöe
(
x
+
w
-1,
y
+1,x+w-1,y+1+
h
,0xffff);

184 
	`Gui_DøwLöe
(
x
,
y
+
h
,x+
w
,y+h,0xffff);

185 
	`Gui_DøwLöe
(
x
,
y
,x,y+
h
,0xffff);

187 
	}
}

195 
	$Di•œyBuâ⁄Down
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
)

197 
	`Gui_DøwLöe
(
x1
, 
y1
, 
x2
,y1, 
GRAY2
);

198 
	`Gui_DøwLöe
(
x1
+1,
y1
+1,
x2
,y1+1, 
GRAY1
);

199 
	`Gui_DøwLöe
(
x1
, 
y1
, x1,
y2
, 
GRAY2
);

200 
	`Gui_DøwLöe
(
x1
+1,
y1
+1,x1+1,
y2
, 
GRAY1
);

201 
	`Gui_DøwLöe
(
x1
, 
y2
, 
x2
,y2, 
WHITE
);

202 
	`Gui_DøwLöe
(
x2
, 
y1
, x2,
y2
, 
WHITE
);

203 
	}
}

210 
	$Di•œyBuâ⁄Up
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
)

212 
	`Gui_DøwLöe
(
x1
, 
y1
, 
x2
,y1, 
WHITE
);

213 
	`Gui_DøwLöe
(
x1
, 
y1
, x1,
y2
, 
WHITE
);

215 
	`Gui_DøwLöe
(
x1
+1,
y2
-1,
x2
,y2-1, 
GRAY1
);

216 
	`Gui_DøwLöe
(
x1
, 
y2
, 
x2
,y2, 
GRAY2
);

217 
	`Gui_DøwLöe
(
x2
-1,
y1
+1,x2-1,
y2
, 
GRAY1
);

218 
	`Gui_DøwLöe
(
x2
 ,
y1
 ,x2,
y2
, 
GRAY2
);

219 
	}
}

222 
	$Gui_DøwF⁄t_GBK16
(
u16
 
x
, u16 
y
, u16 
fc
, u16 
bc
, 
u8
 *
s
)

224 
i
,
j
;

225 
k
,
x0
;

226 
x0
=
x
;

228 *
s
)

230 if((*
s
) < 128)

232 
k
=*
s
;

233 i‡(
k
==13)

235 
x
=
x0
;

236 
y
+=16;

240 i‡(
k
>32) k-=32; k=0;

242 
i
=0;i<16;i++)

243 
j
=0;j<8;j++)

245 if(
asc16
[
k
*16+
i
]&(0x80>>
j
)Ë
	`Gui_DøwPoöt
(
x
+j,
y
+i,
fc
);

248 i‡(
fc
!=
bc
Ë
	`Gui_DøwPoöt
(
x
+
j
,
y
+
i
,bc);

251 
x
+=8;

253 
s
++;

260 
k
=0;k<
hz16_num
;k++)

265 i‡((
hz16
[
k
].
Index
[0]==*(
s
))&&(hz16[k].Index[1]==*(s+1)))

267 
i
=0;i<16;i++)

269 
j
=0;j<8;j++)

271 if(
hz16
[
k
].
Msk
[
i
*2]&(0x80>>
j
)Ë
	`Gui_DøwPoöt
(
x
+j,
y
+i,
fc
);

273 i‡(
fc
!=
bc
Ë
	`Gui_DøwPoöt
(
x
+
j
,
y
+
i
,bc);

276 
j
=0;j<8;j++)

278 if(
hz16
[
k
].
Msk
[
i
*2+1]&(0x80>>
j
)Ë
	`Gui_DøwPoöt
(
x
+j+8,
y
+i,
fc
);

281 i‡(
fc
!=
bc
Ë
	`Gui_DøwPoöt
(
x
+
j
+8,
y
+
i
,bc);

287 
s
+=2;
x
+=16;

291 
	}
}

293 
	$Gui_DøwF⁄t_Num32
(
u16
 
x
, u16 
y
, u16 
fc
, u16 
bc
, u16 
num
)

295 
i
,
j
,
k
,
c
;

299 
i
=0;i<32;i++)

301 
j
=0;j<4;j++)

303 
c
=*(
sz32
+
num
*32*4+
i
*4+
j
);

304 
k
=0;k<8;k++)

306 if(
c
&(0x80>>
k
)) {

307 
	`Gui_DøwPoöt
(
x
+
j
*8+
k
,
y
+
i
,
fc
);

309 i‡(
fc
!=
bc
) {

310 
	`Gui_DøwPoöt
(
x
+
j
*8+
k
,
y
+
i
,
bc
);

316 
	}
}

	@code/User/lcd/GUI.h

2 
	~"°m32f10x.h
"

4 
u16
 
LCD_BGR2RGB
(u16 
c
);

5 
Gui_Cú˛e
(
u16
 
X
,u16 
Y
,u16 
R
,u16 
fc
);

6 
Gui_DøwLöe
(
u16
 
x0
, u16 
y0
,u16 
x1
, u16 
y1
,u16 
Cﬁ‹
);

7 
Gui_box
(
u16
 
x
, u16 
y
, u16 
w
, u16 
h
,u16 
bc
);

8 
Gui_box2
(
u16
 
x
,u16 
y
,u16 
w
,u16 
h
, 
u8
 
mode
);

9 
Di•œyBuâ⁄Down
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
);

10 
Di•œyBuâ⁄Up
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
);

11 
Gui_DøwF⁄t_GBK16
(
u16
 
x
, u16 
y
, u16 
fc
, u16 
bc
, 
u8
 *
s
);

12 
Gui_DøwF⁄t_GBK24
(
u16
 
x
, u16 
y
, u16 
fc
, u16 
bc
, 
u8
 *
s
);

13 
Gui_DøwF⁄t_Num32
(
u16
 
x
, u16 
y
, u16 
fc
, u16 
bc
, u16 
num
) ;

14 
Te°_Show_CH_F⁄t32
(
u16
 
x
,u16 
y
,
u8
 
ödex
,u16 
cﬁ‹
);

	@code/User/lcd/LCD_Config.h

1 #i‚de‡
_LCD_CFG_


2 
	#_LCD_CFG_


	)

5 
	#USE_HARDWARE_SPI
 1

6 

	)

8 
	#X_MAX_PIXEL
 176

	)

9 
	#Y_MAX_PIXEL
 220

	)

	@code/User/lcd/Lcd_Driver.c

1 
	~"°m32f10x.h
"

2 
	~"Lcd_Drivî.h
"

3 
	~"gisu∆ök_dñay.h
"

4 
	~"gisu∆ök_dñay.h
"

51 
	$LCD_GPIO_Inô
() {

52 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

54 
	`RCC_APB2PîùhClockCmd
–
RCC_APB2Pîùh_GPIOA
 ,
ENABLE
);

55 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
|
GPIO_Pö_5
|
GPIO_Pö_6
|
GPIO_Pö_7
;

56 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

57 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

58 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

60 
	`RCC_APB2PîùhClockCmd
–
RCC_APB2Pîùh_GPIOB
 ,
ENABLE
);

61 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
| 
GPIO_Pö_1
;

62 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

63 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

64 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

65 
	}
}

73 
	$SPIv_WrôeD©a
(
u8
 
D©a
)

75 
i
=0;

76 
i
=8;i>0;i--)

78 if(
D©a
&0x80)

79 
LCD_SDA_SET
;

80 
LCD_SDA_CLR
;

82 
LCD_SCL_CLR
;

83 
LCD_SCL_SET
;

84 
D©a
<<=1;

86 
	}
}

95 
	$Lcd_WrôeIndex
(
u8
 
Index
)

97 
LCD_CS_CLR
;

98 
LCD_RS_CLR
;

99 
	`SPIv_WrôeD©a
(
Index
);

100 
LCD_CS_SET
;

101 
	}
}

110 
	$Lcd_WrôeD©a
(
u8
 
D©a
)

112 
LCD_CS_CLR
;

113 
LCD_RS_SET
;

114 
	`SPIv_WrôeD©a
(
D©a
);

115 
LCD_CS_SET
;

116 
	}
}

125 
	$LCD_WrôeReg
(
u8
 
Index
,
u16
 
D©a
)

127 
	`Lcd_WrôeIndex
(
Index
);

128 
	`Lcd_WrôeD©a_16Bô
(
D©a
);

129 
	}
}

138 
	$Lcd_WrôeD©a_16Bô
(
u16
 
D©a
)

140 
	`Lcd_WrôeD©a
(
D©a
>>8);

141 
	`Lcd_WrôeD©a
(
D©a
);

142 
	}
}

151 
	$Lcd_Re£t
()

153 
LCD_RST_CLR
;

154 
	`DñayMs
(100);

155 
LCD_RST_SET
;

156 
	`DñayMs
(50);

157 
	}
}

165 
	$Lcd_Inô
() {

166 
	`LCD_GPIO_Inô
();

167 
	`Lcd_Re£t
();

170 
	`Lcd_WrôeIndex
(0x01); 
	`Lcd_WrôeD©a_16Bô
(0x001C);

171 
	`Lcd_WrôeIndex
(0x02); 
	`Lcd_WrôeD©a_16Bô
(0x0100);

172 
	`Lcd_WrôeIndex
(0x03); 
	`Lcd_WrôeD©a_16Bô
(0x10A8);

173 
	`Lcd_WrôeIndex
(0x08); 
	`Lcd_WrôeD©a_16Bô
(0x0808);

174 
	`Lcd_WrôeIndex
(0x0B); 
	`Lcd_WrôeD©a_16Bô
(0x1100);

175 
	`Lcd_WrôeIndex
(0x0C); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

176 
	`Lcd_WrôeIndex
(0x0F); 
	`Lcd_WrôeD©a_16Bô
(0x0001);

178 
	`Lcd_WrôeIndex
(0x20); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

179 
	`Lcd_WrôeIndex
(0x21); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

181 
	`Lcd_WrôeIndex
(0x10); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

182 
	`Lcd_WrôeIndex
(0x11); 
	`Lcd_WrôeD©a_16Bô
(0x1B41);

183 
	`Lcd_WrôeIndex
(0x12); 
	`Lcd_WrôeD©a_16Bô
(0x200E);

184 
	`Lcd_WrôeIndex
(0x13); 
	`Lcd_WrôeD©a_16Bô
(0x0052);

185 
	`Lcd_WrôeIndex
(0x14); 
	`Lcd_WrôeD©a_16Bô
(0x4B5C);

186 
	`DñayMs
(100);

188 
	`Lcd_WrôeIndex
(0x30); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

189 
	`Lcd_WrôeIndex
(0x31); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

190 
	`Lcd_WrôeIndex
(0x32); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

191 
	`Lcd_WrôeIndex
(0x33); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

192 
	`Lcd_WrôeIndex
(0x34); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

193 
	`Lcd_WrôeIndex
(0x35); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

194 
	`Lcd_WrôeIndex
(0x36); 
	`Lcd_WrôeD©a_16Bô
(0x00AF);

195 
	`Lcd_WrôeIndex
(0x37); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

196 
	`Lcd_WrôeIndex
(0x38); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

197 
	`Lcd_WrôeIndex
(0x39); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

198 
	`DñayMs
(10);

199 
	`Lcd_WrôeIndex
(0xff); 
	`Lcd_WrôeD©a_16Bô
(0x0003);

202 
	`Lcd_WrôeIndex
(0x50); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

203 
	`Lcd_WrôeIndex
(0x51); 
	`Lcd_WrôeD©a_16Bô
(0x0300);

204 
	`Lcd_WrôeIndex
(0x52); 
	`Lcd_WrôeD©a_16Bô
(0x0103);

205 
	`Lcd_WrôeIndex
(0x53); 
	`Lcd_WrôeD©a_16Bô
(0x2011);

207 
	`Lcd_WrôeIndex
(0x54); 
	`Lcd_WrôeD©a_16Bô
(0x0703);

208 
	`Lcd_WrôeIndex
(0x55); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

209 
	`Lcd_WrôeIndex
(0x56); 
	`Lcd_WrôeD©a_16Bô
(0x0400);

210 
	`Lcd_WrôeIndex
(0x57); 
	`Lcd_WrôeD©a_16Bô
(0x0107);

211 
	`Lcd_WrôeIndex
(0x58); 
	`Lcd_WrôeD©a_16Bô
(0x2011);

212 
	`Lcd_WrôeIndex
(0x59); 
	`Lcd_WrôeD©a_16Bô
(0x0703);

213 
	`Lcd_WrôeIndex
(0xB0); 
	`Lcd_WrôeD©a_16Bô
(0x1d01);

214 
	`Lcd_WrôeIndex
(0xFF); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

215 
	`Lcd_WrôeIndex
(0x07); 
	`Lcd_WrôeD©a_16Bô
(0x1017);

216 
	`DñayMs
(50);

218 
	`Lcd_WrôeIndex
(0x02); 
	`Lcd_WrôeD©a_16Bô
(0x0100);

221 
	`LCD_WrôeReg
(0x01, 0x001C);

223 
	`LCD_WrôeReg
(0x03, 0x1038);

225 
	`Lcd_WrôeIndex
(0x08); 
	`Lcd_WrôeD©a_16Bô
(0x0808);

226 
	`Lcd_WrôeIndex
(0x0B); 
	`Lcd_WrôeD©a_16Bô
(0x1100);

227 
	`Lcd_WrôeIndex
(0x0C); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

228 
	`Lcd_WrôeIndex
(0x0F); 
	`Lcd_WrôeD©a_16Bô
(0x1401);

229 
	`Lcd_WrôeIndex
(0x15); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

230 
	`Lcd_WrôeIndex
(0x20); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

231 
	`Lcd_WrôeIndex
(0x21); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

233 
	`DñayMs
(50);

234 
	`Lcd_WrôeIndex
(0x10); 
	`Lcd_WrôeD©a_16Bô
(0x0800);

235 
	`Lcd_WrôeIndex
(0x11); 
	`Lcd_WrôeD©a_16Bô
(0x1F3F);

236 
	`DñayMs
(50);

237 
	`Lcd_WrôeIndex
(0x12); 
	`Lcd_WrôeD©a_16Bô
(0x0121);

238 
	`Lcd_WrôeIndex
(0x13); 
	`Lcd_WrôeD©a_16Bô
(0x006F);

239 
	`Lcd_WrôeIndex
(0x14); 
	`Lcd_WrôeD©a_16Bô
(0x4349);

241 
	`Lcd_WrôeIndex
(0x30); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

242 
	`Lcd_WrôeIndex
(0x31); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

243 
	`Lcd_WrôeIndex
(0x32); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

244 
	`Lcd_WrôeIndex
(0x33); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

245 
	`Lcd_WrôeIndex
(0x34); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

246 
	`Lcd_WrôeIndex
(0x35); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

247 
	`Lcd_WrôeIndex
(0x36); 
	`Lcd_WrôeD©a_16Bô
(0x00AF);

248 
	`Lcd_WrôeIndex
(0x37); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

249 
	`Lcd_WrôeIndex
(0x38); 
	`Lcd_WrôeD©a_16Bô
(0x00DB);

250 
	`Lcd_WrôeIndex
(0x39); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

252 
	`Lcd_WrôeIndex
(0x50); 
	`Lcd_WrôeD©a_16Bô
(0x0001);

253 
	`Lcd_WrôeIndex
(0x51); 
	`Lcd_WrôeD©a_16Bô
(0x200B);

254 
	`Lcd_WrôeIndex
(0x52); 
	`Lcd_WrôeD©a_16Bô
(0x0000);

255 
	`Lcd_WrôeIndex
(0x53); 
	`Lcd_WrôeD©a_16Bô
(0x0404);

256 
	`Lcd_WrôeIndex
(0x54); 
	`Lcd_WrôeD©a_16Bô
(0x0C0C);

257 
	`Lcd_WrôeIndex
(0x55); 
	`Lcd_WrôeD©a_16Bô
(0x000C);

258 
	`Lcd_WrôeIndex
(0x56); 
	`Lcd_WrôeD©a_16Bô
(0x0101);

259 
	`Lcd_WrôeIndex
(0x57); 
	`Lcd_WrôeD©a_16Bô
(0x0400);

260 
	`Lcd_WrôeIndex
(0x58); 
	`Lcd_WrôeD©a_16Bô
(0x1108);

261 
	`Lcd_WrôeIndex
(0x59); 
	`Lcd_WrôeD©a_16Bô
(0x050C);

262 
	`DñayMs
(50);

263 
	`Lcd_WrôeIndex
(0x07); 
	`Lcd_WrôeD©a_16Bô
(0x1017);

264 
	`Lcd_WrôeIndex
(0x22);

266 
	}
}

274 
	$Lcd_SëXY
(
u16
 
Xpos
, u16 
Ypos
)

276 
	`LCD_WrôeReg
(0x21,
X_MAX_PIXEL
 - 
Xpos
);

277 
	`LCD_WrôeReg
(0x20,
Y_MAX_PIXEL
 - 
Ypos
);

279 
	`Lcd_WrôeIndex
(0x22);

280 
	}
}

288 
	$Lcd_SëRegi⁄
(
u8
 
xSèr
, u8 
ySèr
,u8 
xEnd
,u8 
yEnd
) {

289 
	`LCD_WrôeReg
(0x38,
xEnd
);

290 
	`LCD_WrôeReg
(0x39,
xSèr
);

291 
	`LCD_WrôeReg
(0x36,
yEnd
);

292 
	`LCD_WrôeReg
(0x37,
ySèr
);

293 
	`LCD_WrôeReg
(0x21,
xSèr
);

294 
	`LCD_WrôeReg
(0x20,
ySèr
);

295 
	`Lcd_WrôeIndex
(0x22);

296 
	}
}

305 
	$Gui_DøwPoöt
(
u16
 
x
,u16 
y
,u16 
D©a
) {

306 
	`Lcd_SëXY
(
x
,
y
);

307 
	`Lcd_WrôeD©a_16Bô
(
D©a
);

308 
	}
}

316 
	$Lcd_CÀ¨
(
u16
 
Cﬁ‹
) {

317 
i
,
m
;

318 
	`Lcd_SëRegi⁄
(0,0,
X_MAX_PIXEL
-1,
Y_MAX_PIXEL
-1);

319 
i
=0;i<
X_MAX_PIXEL
;i++) {

320 
m
=0;m<
Y_MAX_PIXEL
;m++) {

321 
	`Lcd_WrôeD©a_16Bô
(
Cﬁ‹
);

324 
	}
}

	@code/User/lcd/Lcd_Driver.h

1 #i‚de‡
_LCD_DRIVER_H_


2 
	#_LCD_DRIVER_H_


	)

4 
	~"°m32f10x.h
"

7 
	#LCD_X_SIZE
 176

	)

8 
	#LCD_Y_SIZE
 220

	)

10 
	#X_MAX_PIXEL
 
LCD_Y_SIZE


	)

11 
	#Y_MAX_PIXEL
 
LCD_X_SIZE


	)

14 
	#RED
 0xf800

	)

15 
	#GREEN
 0x07e0

	)

16 
	#WHITE
 0xffff

	)

17 
	#BLACK
 0x0000

	)

18 
	#BLUE
 0x001f

	)

20 
	#NAVY_BLUE
 0x0010

21 
	#DARK_BLUE
 0x0011

22 
	#MED_BLUE
 0x0019

23 
	#INT_BLUE
 0x0174

24 
	#PRU_BLUE
 0x018A

25 
	#DARK_P_BLUE
 0x0193

26 
	#ULTRAMARINE
 0x019F

27 
	#MAARINE_BLUE
 0x022F

28 
	#COBALT_BLUE
 0x0235

29 
	#MINERAL_BLUE
 0x0273

30 
	#STRONG_BLUE
 0x030E

31 
	#DARK_GREEN
 0x0320

32 
	#AZURE
 0x03FF

33 
	#GREEN2
 0x0400

34 
	#TEAL
 0x0410

35 

	)

37 
	#NAVY
 0x000F

38 
	#DGREEN
 0x03E0

39 
	#DCYAN
 0x03EF

40 
	#MAROON
 0x7800

41 
	#PURPLE
 0x780F

42 
	#OLIVE
 0x7BE0

43 
	#LGRAY
 0xC618

44 
	#DGRAY
 0x7BEF

45 
	#GREEN1
 0x07E0

46 
	#CYAN
 0x07FF

47 
	#MAGENTA
 0xF81F

48 
	#YELLOW
 0xFFE0

49 
	#GRAY0
 0xEF7D

50 
	#GRAY1
 0x8410

51 
	#GRAY2
 0x4208

52 

	)

54 
	#LCD_LED
 
GPIO_Pö_1


	)

55 
	#LCD_LED_PORT
 
GPIOB


	)

56 
	#LCD_LED_CLK
 
RCC_APB2Pîùh_GPIOB


	)

57 
	#LCD_LED_SET
 
LCD_LED_PORT
->
BSRR
 = 
LCD_LED


	)

58 
	#LCD_LED_CLR
 
LCD_LED_PORT
->
BRR
 = 
LCD_LED


	)

60 
	#LCD_RS
 
GPIO_Pö_7


	)

61 
	#LCD_RS_PORT
 
GPIOA


	)

62 
	#LCD_RS_CLK
 
RCC_APB2Pîùh_GPIOA


	)

63 
	#LCD_RS_SET
 
LCD_RS_PORT
->
BSRR
 = 
LCD_RS


	)

64 
	#LCD_RS_CLR
 
LCD_RS_PORT
->
BRR
 = 
LCD_RS


	)

66 
	#LCD_CS
 
GPIO_Pö_4


	)

67 
	#LCD_CS_PORT
 
GPIOA


	)

68 
	#LCD_CS_CLK
 
RCC_APB2Pîùh_GPIOA


	)

69 
	#LCD_CS_SET
 
LCD_CS_PORT
->
BSRR
 = 
LCD_CS


	)

70 
	#LCD_CS_CLR
 
LCD_CS_PORT
->
BRR
 = 
LCD_CS


	)

72 
	#LCD_SCL
 
GPIO_Pö_5


	)

73 
	#LCD_SCL_PORT
 
GPIOA


	)

74 
	#LCD_SCL_CLK
 
RCC_APB2Pîùh_GPIOA


	)

75 
	#LCD_SCL_SET
 
LCD_CS_PORT
->
BSRR
 = 
LCD_SCL


	)

76 
	#LCD_SCL_CLR
 
LCD_CS_PORT
->
BRR
 = 
LCD_SCL


	)

78 
	#LCD_SDA
 
GPIO_Pö_6


	)

79 
	#LCD_SDA_PORT
 
GPIOA


	)

80 
	#LCD_SDA_CLK
 
RCC_APB2Pîùh_GPIOA


	)

81 
	#LCD_SDA_SET
 
LCD_CS_PORT
->
BSRR
 = 
LCD_SDA


	)

82 
	#LCD_SDA_CLR
 
LCD_CS_PORT
->
BRR
 = 
LCD_SDA


	)

84 
	#LCD_RST
 
GPIO_Pö_0


	)

85 
	#LCD_RST_PORT
 
GPIOB


	)

86 
	#LCD_RST_CLK
 
RCC_APB2Pîùh_GPIOB


	)

87 
	#LCD_RST_SET
 
LCD_LED_PORT
->
BSRR
 = 
LCD_RST


	)

88 
	#LCD_RST_CLR
 
LCD_LED_PORT
->
BRR
 = 
LCD_RST


	)

92 
	#LCD_CS
 
GPIO_Pö_1


	)

93 
	#LCD_CS_PORT
 
GPIOB


	)

94 
	#LCD_CS_CLK
 
RCC_APB2Pîùh_GPIOB


	)

95 
	#LCD_CS_SET
 
LCD_CS_PORT
->
BSRR
 = 
LCD_CS


	)

96 
	#LCD_CS_CLR
 
LCD_CS_PORT
->
BRR
 = 
LCD_CS


	)

98 
	#LCD_RS
 
GPIO_Pö_7


	)

99 
	#LCD_RS_PORT
 
GPIOA


	)

100 
	#LCD_RS_CLK
 
RCC_APB2Pîùh_GPIOA


	)

101 
	#LCD_RS_SET
 
LCD_RS_PORT
->
BSRR
 = 
LCD_RS


	)

102 
	#LCD_RS_CLR
 
LCD_RS_PORT
->
BRR
 = 
LCD_RS


	)

104 
	#LCD_LED
 
GPIO_Pö_4


	)

105 
	#LCD_LED_PORT
 
GPIOA


	)

106 
	#LCD_LED_CLK
 
RCC_APB2Pîùh_GPIOA


	)

107 
	#LCD_LED_SET
 
LCD_LED_PORT
->
BSRR
 = 
LCD_LED


	)

108 
	#LCD_LED_CLR
 
LCD_LED_PORT
->
BRR
 = 
LCD_LED


	)

110 
	#LCD_SCL
 
GPIO_Pö_5


	)

111 
	#LCD_SCL_PORT
 
GPIOA


	)

112 
	#LCD_SCL_CLK
 
RCC_APB2Pîùh_GPIOA


	)

113 
	#LCD_SCL_SET
 
LCD_SCL_PORT
->
BSRR
 = 
LCD_SCL


	)

114 
	#LCD_SCL_CLR
 
LCD_SCL_PORT
->
BRR
 = 
LCD_SCL


	)

116 
	#LCD_SDA
 
GPIO_Pö_6


	)

117 
	#LCD_SDA_PORT
 
GPIOA


	)

118 
	#LCD_SDA_CLK
 
RCC_APB2Pîùh_GPIOA


	)

119 
	#LCD_SDA_SET
 
LCD_SDA_PORT
->
BSRR
 = 
LCD_SDA


	)

120 
	#LCD_SDA_CLR
 
LCD_SDA_PORT
->
BRR
 = 
LCD_SDA


	)

122 
	#LCD_RST
 
GPIO_Pö_0


	)

123 
	#LCD_RST_PORT
 
GPIOB


	)

124 
	#LCD_RST_CLK
 
RCC_APB2Pîùh_GPIOB


	)

125 
	#LCD_RST_SET
 
LCD_RST_PORT
->
BSRR
 = 
LCD_RST


	)

126 
	#LCD_RST_CLR
 
LCD_RST_PORT
->
BRR
 = 
LCD_RST


	)

131 
LCD_GPIO_Inô
();

132 
Lcd_WrôeIndex
(
u8
 
Index
);

133 
Lcd_WrôeD©a
(
u8
 
D©a
);

134 
Lcd_WrôeReg
(
u8
 
Index
,u8 
D©a
);

135 
u16
 
Lcd_RódReg
(
u8
 
LCD_Reg
);

136 
Lcd_Re£t
();

137 
Lcd_Inô
();

138 
Lcd_CÀ¨
(
u16
 
Cﬁ‹
);

139 
Lcd_SëXY
(
u16
 
x
,u16 
y
);

140 
Gui_DøwPoöt
(
u16
 
x
,u16 
y
,u16 
D©a
);

141 
Lcd_RódPoöt
(
u16
 
x
,u16 
y
);

142 
Lcd_SëRegi⁄
(
u8
 
x_°¨t
,u8 
y_°¨t
,u8 
x_íd
,u8 
y_íd
);

143 
Lcd_WrôeD©a_16Bô
(
u16
 
D©a
);

	@code/User/lcd/Picture.h

11 c⁄° 
	ggImage_qq
[3200] = {

	@code/User/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

27 
	~"°m32f10x_adc.h
"

34 
	~"°m32f10x_dma.h
"

35 
	~"°m32f10x_exti.h
"

38 
	~"°m32f10x_gpio.h
"

39 
	~"°m32f10x_i2c.h
"

42 
	~"°m32f10x_rcc.h
"

46 
	~"°m32f10x_tim.h
"

47 
	~"°m32f10x_ußπ.h
"

49 
	~"misc.h
"

58 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@code/User/stm32f10x_it.c

24 
	~"°m32f10x_ô.h
"

25 
	~"gisu∆ök_gpio.h
"

26 
	~"gisu∆ök_íîgy_mëîög.h
"

27 
	~"gisu∆ök_ußπ.h
"

28 
	~"gisu∆ök_timî.h
"

29 
	~"gisu∆ök_√tw‹k_moduÀ.h
"

30 
	~"gisu∆ök_sy°em.h
"

41 
	$NMI_H™dÀr
() {

43 
	}
}

50 
	$H¨dFau…_H™dÀr
() {

55 
	}
}

62 
	$MemM™age_H™dÀr
() {

67 
	}
}

74 
	$BusFau…_H™dÀr
() {

79 
	}
}

86 
	$UßgeFau…_H™dÀr
()

92 
	}
}

99 
	$SVC_H™dÀr
() {

101 
	}
}

108 
	$DebugM⁄_H™dÀr
() {

110 
	}
}

117 
	$PídSV_H™dÀr
() {

119 
	}
}

126 
	$SysTick_H™dÀr
() {

127 
	`gisu∆ök_sy°em_time_tick
();

128 
	}
}

135 
	$TIM1_UP_IRQH™dÀr
()

137 
	`gisu∆ök_timî_èsk_check_úq
();

138 
	}
}

141 
	$TIM2_IRQH™dÀr
()

143 
	`gisu∆ök_powîdown_ac_check_úq
();

144 
	}
}

147 
	$TIM3_IRQH™dÀr
()

149 
	`gisu∆ök_timî_po°_d©a_úq
();

150 
	}
}

153 
	$TIM4_IRQH™dÀr
()

155 
	`gisu∆ök_timî_s¸ìn_ª‰esh_úq
();

156 
	}
}

158 
	$USART1_IRQH™dÀr
()

160 
	`gisu∆ök_√tw‹k_moduÀ_úq
();

161 
	}
}

163 vﬁ©ûê
uöt8_t
 
	gãmpRevD©a
 = 0;

165 
	$USART2_IRQH™dÀr
()

167 if(
	`USART_GëITSètus
(
USART2
, 
USART_IT_RXNE
Ë!
RESET
)

169 
	`USART_CÀ¨ITPídögBô
(
USART2
, 
USART_IT_RXNE
);

170 
ãmpRevD©a
=
	`USART_Re˚iveD©a
(
USART2
);

171 
	`USART_SídD©a
(
USART2
,
ãmpRevD©a
);

173 
	}
}

175 
	$USART3_IRQH™dÀr
()

177 if(
	`USART_GëITSètus
(
USART3
, 
USART_IT_RXNE
Ë!
RESET
)

179 
	`USART_CÀ¨ITPídögBô
(
USART3
, 
USART_IT_RXNE
);

180 
ComPack
.
RxBuf
[ComPack.
RxLí
++] = 
	`USART_Re˚iveD©a
(
USART3
);

188 
	}
}

	@code/User/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

33 
NMI_H™dÀr
();

34 
H¨dFau…_H™dÀr
();

35 
MemM™age_H™dÀr
();

36 
BusFau…_H™dÀr
();

37 
UßgeFau…_H™dÀr
();

38 
SVC_H™dÀr
();

39 
DebugM⁄_H™dÀr
();

40 
PídSV_H™dÀr
();

41 
SysTick_H™dÀr
();

42 
USART1_IRQH™dÀr
();

43 
USART2_IRQH™dÀr
();

44 
USART3_IRQH™dÀr
();

	@codeboot/Libararies/CMSIS/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@codeboot/Libararies/CMSIS/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@codeboot/Libararies/CMSIS/stm32f10x.h

33 #i‚de‡
__STM32F10x_H


34 
	#__STM32F10x_H


	)

36 #ifde‡
__˝lu•lus


48 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

53 
	#STM32F10X_HD


	)

75 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


91 #i‡!
deföed
 
HSE_VALUE


92 #ifde‡
STM32F10X_CL


93 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

95 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

104 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

106 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

111 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

112 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x03Ë

	)

113 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

114 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

	)

115 | (
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

116 | 
__STM32F10X_STDPERIPH_VERSION_SUB2
)

129 #ifde‡
STM32F10X_XL


130 
	#__MPU_PRESENT
 1

	)

132 
	#__MPU_PRESENT
 0

	)

134 
	#__NVIC_PRIO_BITS
 4

	)

135 
	#__Víd‹_SysTickC⁄fig
 0

	)

141 
	eIRQn


144 
N⁄MaskabÀI¡_IRQn
 = -14,

145 
Mem‹yM™agemít_IRQn
 = -12,

146 
BusFau…_IRQn
 = -11,

147 
UßgeFau…_IRQn
 = -10,

148 
SVCÆl_IRQn
 = -5,

149 
DebugM⁄ô‹_IRQn
 = -4,

150 
PídSV_IRQn
 = -2,

151 
SysTick_IRQn
 = -1,

154 
WWDG_IRQn
 = 0,

155 
PVD_IRQn
 = 1,

156 
TAMPER_IRQn
 = 2,

157 
RTC_IRQn
 = 3,

158 
FLASH_IRQn
 = 4,

159 
RCC_IRQn
 = 5,

160 
EXTI0_IRQn
 = 6,

161 
EXTI1_IRQn
 = 7,

162 
EXTI2_IRQn
 = 8,

163 
EXTI3_IRQn
 = 9,

164 
EXTI4_IRQn
 = 10,

165 
DMA1_Ch™√l1_IRQn
 = 11,

166 
DMA1_Ch™√l2_IRQn
 = 12,

167 
DMA1_Ch™√l3_IRQn
 = 13,

168 
DMA1_Ch™√l4_IRQn
 = 14,

169 
DMA1_Ch™√l5_IRQn
 = 15,

170 
DMA1_Ch™√l6_IRQn
 = 16,

171 
DMA1_Ch™√l7_IRQn
 = 17,

173 #ifde‡
STM32F10X_LD


174 
ADC1_2_IRQn
 = 18,

175 
USB_HP_CAN1_TX_IRQn
 = 19,

176 
USB_LP_CAN1_RX0_IRQn
 = 20,

177 
CAN1_RX1_IRQn
 = 21,

178 
CAN1_SCE_IRQn
 = 22,

179 
EXTI9_5_IRQn
 = 23,

180 
TIM1_BRK_IRQn
 = 24,

181 
TIM1_UP_IRQn
 = 25,

182 
TIM1_TRG_COM_IRQn
 = 26,

183 
TIM1_CC_IRQn
 = 27,

184 
TIM2_IRQn
 = 28,

185 
TIM3_IRQn
 = 29,

186 
I2C1_EV_IRQn
 = 31,

187 
I2C1_ER_IRQn
 = 32,

188 
SPI1_IRQn
 = 35,

189 
USART1_IRQn
 = 37,

190 
USART2_IRQn
 = 38,

191 
EXTI15_10_IRQn
 = 40,

192 
RTCAœrm_IRQn
 = 41,

193 
USBWakeUp_IRQn
 = 42

196 #ifde‡
STM32F10X_LD_VL


197 
ADC1_IRQn
 = 18,

198 
EXTI9_5_IRQn
 = 23,

199 
TIM1_BRK_TIM15_IRQn
 = 24,

200 
TIM1_UP_TIM16_IRQn
 = 25,

201 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

202 
TIM1_CC_IRQn
 = 27,

203 
TIM2_IRQn
 = 28,

204 
TIM3_IRQn
 = 29,

205 
I2C1_EV_IRQn
 = 31,

206 
I2C1_ER_IRQn
 = 32,

207 
SPI1_IRQn
 = 35,

208 
USART1_IRQn
 = 37,

209 
USART2_IRQn
 = 38,

210 
EXTI15_10_IRQn
 = 40,

211 
RTCAœrm_IRQn
 = 41,

212 
CEC_IRQn
 = 42,

213 
TIM6_DAC_IRQn
 = 54,

214 
TIM7_IRQn
 = 55

217 #ifde‡
STM32F10X_MD


218 
ADC1_2_IRQn
 = 18,

219 
USB_HP_CAN1_TX_IRQn
 = 19,

220 
USB_LP_CAN1_RX0_IRQn
 = 20,

221 
CAN1_RX1_IRQn
 = 21,

222 
CAN1_SCE_IRQn
 = 22,

223 
EXTI9_5_IRQn
 = 23,

224 
TIM1_BRK_IRQn
 = 24,

225 
TIM1_UP_IRQn
 = 25,

226 
TIM1_TRG_COM_IRQn
 = 26,

227 
TIM1_CC_IRQn
 = 27,

228 
TIM2_IRQn
 = 28,

229 
TIM3_IRQn
 = 29,

230 
TIM4_IRQn
 = 30,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
I2C2_EV_IRQn
 = 33,

234 
I2C2_ER_IRQn
 = 34,

235 
SPI1_IRQn
 = 35,

236 
SPI2_IRQn
 = 36,

237 
USART1_IRQn
 = 37,

238 
USART2_IRQn
 = 38,

239 
USART3_IRQn
 = 39,

240 
EXTI15_10_IRQn
 = 40,

241 
RTCAœrm_IRQn
 = 41,

242 
USBWakeUp_IRQn
 = 42

245 #ifde‡
STM32F10X_MD_VL


246 
ADC1_IRQn
 = 18,

247 
EXTI9_5_IRQn
 = 23,

248 
TIM1_BRK_TIM15_IRQn
 = 24,

249 
TIM1_UP_TIM16_IRQn
 = 25,

250 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

251 
TIM1_CC_IRQn
 = 27,

252 
TIM2_IRQn
 = 28,

253 
TIM3_IRQn
 = 29,

254 
TIM4_IRQn
 = 30,

255 
I2C1_EV_IRQn
 = 31,

256 
I2C1_ER_IRQn
 = 32,

257 
I2C2_EV_IRQn
 = 33,

258 
I2C2_ER_IRQn
 = 34,

259 
SPI1_IRQn
 = 35,

260 
SPI2_IRQn
 = 36,

261 
USART1_IRQn
 = 37,

262 
USART2_IRQn
 = 38,

263 
USART3_IRQn
 = 39,

264 
EXTI15_10_IRQn
 = 40,

265 
RTCAœrm_IRQn
 = 41,

266 
CEC_IRQn
 = 42,

267 
TIM6_DAC_IRQn
 = 54,

268 
TIM7_IRQn
 = 55

271 #ifde‡
STM32F10X_HD


272 
ADC1_2_IRQn
 = 18,

273 
USB_HP_CAN1_TX_IRQn
 = 19,

274 
USB_LP_CAN1_RX0_IRQn
 = 20,

275 
CAN1_RX1_IRQn
 = 21,

276 
CAN1_SCE_IRQn
 = 22,

277 
EXTI9_5_IRQn
 = 23,

278 
TIM1_BRK_IRQn
 = 24,

279 
TIM1_UP_IRQn
 = 25,

280 
TIM1_TRG_COM_IRQn
 = 26,

281 
TIM1_CC_IRQn
 = 27,

282 
TIM2_IRQn
 = 28,

283 
TIM3_IRQn
 = 29,

284 
TIM4_IRQn
 = 30,

285 
I2C1_EV_IRQn
 = 31,

286 
I2C1_ER_IRQn
 = 32,

287 
I2C2_EV_IRQn
 = 33,

288 
I2C2_ER_IRQn
 = 34,

289 
SPI1_IRQn
 = 35,

290 
SPI2_IRQn
 = 36,

291 
USART1_IRQn
 = 37,

292 
USART2_IRQn
 = 38,

293 
USART3_IRQn
 = 39,

294 
EXTI15_10_IRQn
 = 40,

295 
RTCAœrm_IRQn
 = 41,

296 
USBWakeUp_IRQn
 = 42,

297 
TIM8_BRK_IRQn
 = 43,

298 
TIM8_UP_IRQn
 = 44,

299 
TIM8_TRG_COM_IRQn
 = 45,

300 
TIM8_CC_IRQn
 = 46,

301 
ADC3_IRQn
 = 47,

302 
FSMC_IRQn
 = 48,

303 
SDIO_IRQn
 = 49,

304 
TIM5_IRQn
 = 50,

305 
SPI3_IRQn
 = 51,

306 
UART4_IRQn
 = 52,

307 
UART5_IRQn
 = 53,

308 
TIM6_IRQn
 = 54,

309 
TIM7_IRQn
 = 55,

310 
DMA2_Ch™√l1_IRQn
 = 56,

311 
DMA2_Ch™√l2_IRQn
 = 57,

312 
DMA2_Ch™√l3_IRQn
 = 58,

313 
DMA2_Ch™√l4_5_IRQn
 = 59

316 #ifde‡
STM32F10X_XL


317 
ADC1_2_IRQn
 = 18,

318 
USB_HP_CAN1_TX_IRQn
 = 19,

319 
USB_LP_CAN1_RX0_IRQn
 = 20,

320 
CAN1_RX1_IRQn
 = 21,

321 
CAN1_SCE_IRQn
 = 22,

322 
EXTI9_5_IRQn
 = 23,

323 
TIM1_BRK_TIM9_IRQn
 = 24,

324 
TIM1_UP_TIM10_IRQn
 = 25,

325 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

326 
TIM1_CC_IRQn
 = 27,

327 
TIM2_IRQn
 = 28,

328 
TIM3_IRQn
 = 29,

329 
TIM4_IRQn
 = 30,

330 
I2C1_EV_IRQn
 = 31,

331 
I2C1_ER_IRQn
 = 32,

332 
I2C2_EV_IRQn
 = 33,

333 
I2C2_ER_IRQn
 = 34,

334 
SPI1_IRQn
 = 35,

335 
SPI2_IRQn
 = 36,

336 
USART1_IRQn
 = 37,

337 
USART2_IRQn
 = 38,

338 
USART3_IRQn
 = 39,

339 
EXTI15_10_IRQn
 = 40,

340 
RTCAœrm_IRQn
 = 41,

341 
USBWakeUp_IRQn
 = 42,

342 
TIM8_BRK_TIM12_IRQn
 = 43,

343 
TIM8_UP_TIM13_IRQn
 = 44,

344 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

345 
TIM8_CC_IRQn
 = 46,

346 
ADC3_IRQn
 = 47,

347 
FSMC_IRQn
 = 48,

348 
SDIO_IRQn
 = 49,

349 
TIM5_IRQn
 = 50,

350 
SPI3_IRQn
 = 51,

351 
UART4_IRQn
 = 52,

352 
UART5_IRQn
 = 53,

353 
TIM6_IRQn
 = 54,

354 
TIM7_IRQn
 = 55,

355 
DMA2_Ch™√l1_IRQn
 = 56,

356 
DMA2_Ch™√l2_IRQn
 = 57,

357 
DMA2_Ch™√l3_IRQn
 = 58,

358 
DMA2_Ch™√l4_5_IRQn
 = 59

361 #ifde‡
STM32F10X_CL


362 
ADC1_2_IRQn
 = 18,

363 
CAN1_TX_IRQn
 = 19,

364 
CAN1_RX0_IRQn
 = 20,

365 
CAN1_RX1_IRQn
 = 21,

366 
CAN1_SCE_IRQn
 = 22,

367 
EXTI9_5_IRQn
 = 23,

368 
TIM1_BRK_IRQn
 = 24,

369 
TIM1_UP_IRQn
 = 25,

370 
TIM1_TRG_COM_IRQn
 = 26,

371 
TIM1_CC_IRQn
 = 27,

372 
TIM2_IRQn
 = 28,

373 
TIM3_IRQn
 = 29,

374 
TIM4_IRQn
 = 30,

375 
I2C1_EV_IRQn
 = 31,

376 
I2C1_ER_IRQn
 = 32,

377 
I2C2_EV_IRQn
 = 33,

378 
I2C2_ER_IRQn
 = 34,

379 
SPI1_IRQn
 = 35,

380 
SPI2_IRQn
 = 36,

381 
USART1_IRQn
 = 37,

382 
USART2_IRQn
 = 38,

383 
USART3_IRQn
 = 39,

384 
EXTI15_10_IRQn
 = 40,

385 
RTCAœrm_IRQn
 = 41,

386 
OTG_FS_WKUP_IRQn
 = 42,

387 
TIM5_IRQn
 = 50,

388 
SPI3_IRQn
 = 51,

389 
UART4_IRQn
 = 52,

390 
UART5_IRQn
 = 53,

391 
TIM6_IRQn
 = 54,

392 
TIM7_IRQn
 = 55,

393 
DMA2_Ch™√l1_IRQn
 = 56,

394 
DMA2_Ch™√l2_IRQn
 = 57,

395 
DMA2_Ch™√l3_IRQn
 = 58,

396 
DMA2_Ch™√l4_IRQn
 = 59,

397 
DMA2_Ch™√l5_IRQn
 = 60,

398 
ETH_IRQn
 = 61,

399 
ETH_WKUP_IRQn
 = 62,

400 
CAN2_TX_IRQn
 = 63,

401 
CAN2_RX0_IRQn
 = 64,

402 
CAN2_RX1_IRQn
 = 65,

403 
CAN2_SCE_IRQn
 = 66,

404 
OTG_FS_IRQn
 = 67

406 } 
	tIRQn_Ty≥
;

412 
	~"c‹e_cm3.h
"

413 
	~"sy°em_°m32f10x.h
"

414 
	~<°döt.h
>

421 
öt32_t
 
	ts32
;

422 
öt16_t
 
	ts16
;

423 
öt8_t
 
	ts8
;

425 c⁄° 
	töt32_t
 
	tsc32
;

426 c⁄° 
	töt16_t
 
	tsc16
;

427 c⁄° 
	töt8_t
 
	tsc8
;

429 
__IO
 
	töt32_t
 
	tvs32
;

430 
__IO
 
	töt16_t
 
	tvs16
;

431 
__IO
 
	töt8_t
 
	tvs8
;

433 
__I
 
	töt32_t
 
	tvsc32
;

434 
__I
 
	töt16_t
 
	tvsc16
;

435 
__I
 
	töt8_t
 
	tvsc8
;

437 
uöt32_t
 
	tu32
;

438 
uöt16_t
 
	tu16
;

439 
uöt8_t
 
	tu8
;

441 c⁄° 
	tuöt32_t
 
	tuc32
;

442 c⁄° 
	tuöt16_t
 
	tuc16
;

443 c⁄° 
	tuöt8_t
 
	tuc8
;

445 
__IO
 
	tuöt32_t
 
	tvu32
;

446 
__IO
 
	tuöt16_t
 
	tvu16
;

447 
__IO
 
	tuöt8_t
 
	tvu8
;

449 
__I
 
	tuöt32_t
 
	tvuc32
;

450 
__I
 
	tuöt16_t
 
	tvuc16
;

451 
__I
 
	tuöt8_t
 
	tvuc8
;

453 #i‚de‡
__˝lu•lus


454 íum {
FALSE
 = 0, 
TRUE
 = !FALSE} 
	tboﬁ
;

457 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

459 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

460 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

462 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

465 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

466 
	#HSE_VÆue
 
HSE_VALUE


	)

467 
	#HSI_VÆue
 
HSI_VALUE


	)

482 
__IO
 
uöt32_t
 
SR
;

483 
__IO
 
uöt32_t
 
CR1
;

484 
__IO
 
uöt32_t
 
CR2
;

485 
__IO
 
uöt32_t
 
SMPR1
;

486 
__IO
 
uöt32_t
 
SMPR2
;

487 
__IO
 
uöt32_t
 
JOFR1
;

488 
__IO
 
uöt32_t
 
JOFR2
;

489 
__IO
 
uöt32_t
 
JOFR3
;

490 
__IO
 
uöt32_t
 
JOFR4
;

491 
__IO
 
uöt32_t
 
HTR
;

492 
__IO
 
uöt32_t
 
LTR
;

493 
__IO
 
uöt32_t
 
SQR1
;

494 
__IO
 
uöt32_t
 
SQR2
;

495 
__IO
 
uöt32_t
 
SQR3
;

496 
__IO
 
uöt32_t
 
JSQR
;

497 
__IO
 
uöt32_t
 
JDR1
;

498 
__IO
 
uöt32_t
 
JDR2
;

499 
__IO
 
uöt32_t
 
JDR3
;

500 
__IO
 
uöt32_t
 
JDR4
;

501 
__IO
 
uöt32_t
 
DR
;

502 } 
	tADC_Ty≥Def
;

510 
uöt32_t
 
RESERVED0
;

511 
__IO
 
uöt16_t
 
DR1
;

512 
uöt16_t
 
RESERVED1
;

513 
__IO
 
uöt16_t
 
DR2
;

514 
uöt16_t
 
RESERVED2
;

515 
__IO
 
uöt16_t
 
DR3
;

516 
uöt16_t
 
RESERVED3
;

517 
__IO
 
uöt16_t
 
DR4
;

518 
uöt16_t
 
RESERVED4
;

519 
__IO
 
uöt16_t
 
DR5
;

520 
uöt16_t
 
RESERVED5
;

521 
__IO
 
uöt16_t
 
DR6
;

522 
uöt16_t
 
RESERVED6
;

523 
__IO
 
uöt16_t
 
DR7
;

524 
uöt16_t
 
RESERVED7
;

525 
__IO
 
uöt16_t
 
DR8
;

526 
uöt16_t
 
RESERVED8
;

527 
__IO
 
uöt16_t
 
DR9
;

528 
uöt16_t
 
RESERVED9
;

529 
__IO
 
uöt16_t
 
DR10
;

530 
uöt16_t
 
RESERVED10
;

531 
__IO
 
uöt16_t
 
RTCCR
;

532 
uöt16_t
 
RESERVED11
;

533 
__IO
 
uöt16_t
 
CR
;

534 
uöt16_t
 
RESERVED12
;

535 
__IO
 
uöt16_t
 
CSR
;

536 
uöt16_t
 
RESERVED13
[5];

537 
__IO
 
uöt16_t
 
DR11
;

538 
uöt16_t
 
RESERVED14
;

539 
__IO
 
uöt16_t
 
DR12
;

540 
uöt16_t
 
RESERVED15
;

541 
__IO
 
uöt16_t
 
DR13
;

542 
uöt16_t
 
RESERVED16
;

543 
__IO
 
uöt16_t
 
DR14
;

544 
uöt16_t
 
RESERVED17
;

545 
__IO
 
uöt16_t
 
DR15
;

546 
uöt16_t
 
RESERVED18
;

547 
__IO
 
uöt16_t
 
DR16
;

548 
uöt16_t
 
RESERVED19
;

549 
__IO
 
uöt16_t
 
DR17
;

550 
uöt16_t
 
RESERVED20
;

551 
__IO
 
uöt16_t
 
DR18
;

552 
uöt16_t
 
RESERVED21
;

553 
__IO
 
uöt16_t
 
DR19
;

554 
uöt16_t
 
RESERVED22
;

555 
__IO
 
uöt16_t
 
DR20
;

556 
uöt16_t
 
RESERVED23
;

557 
__IO
 
uöt16_t
 
DR21
;

558 
uöt16_t
 
RESERVED24
;

559 
__IO
 
uöt16_t
 
DR22
;

560 
uöt16_t
 
RESERVED25
;

561 
__IO
 
uöt16_t
 
DR23
;

562 
uöt16_t
 
RESERVED26
;

563 
__IO
 
uöt16_t
 
DR24
;

564 
uöt16_t
 
RESERVED27
;

565 
__IO
 
uöt16_t
 
DR25
;

566 
uöt16_t
 
RESERVED28
;

567 
__IO
 
uöt16_t
 
DR26
;

568 
uöt16_t
 
RESERVED29
;

569 
__IO
 
uöt16_t
 
DR27
;

570 
uöt16_t
 
RESERVED30
;

571 
__IO
 
uöt16_t
 
DR28
;

572 
uöt16_t
 
RESERVED31
;

573 
__IO
 
uöt16_t
 
DR29
;

574 
uöt16_t
 
RESERVED32
;

575 
__IO
 
uöt16_t
 
DR30
;

576 
uöt16_t
 
RESERVED33
;

577 
__IO
 
uöt16_t
 
DR31
;

578 
uöt16_t
 
RESERVED34
;

579 
__IO
 
uöt16_t
 
DR32
;

580 
uöt16_t
 
RESERVED35
;

581 
__IO
 
uöt16_t
 
DR33
;

582 
uöt16_t
 
RESERVED36
;

583 
__IO
 
uöt16_t
 
DR34
;

584 
uöt16_t
 
RESERVED37
;

585 
__IO
 
uöt16_t
 
DR35
;

586 
uöt16_t
 
RESERVED38
;

587 
__IO
 
uöt16_t
 
DR36
;

588 
uöt16_t
 
RESERVED39
;

589 
__IO
 
uöt16_t
 
DR37
;

590 
uöt16_t
 
RESERVED40
;

591 
__IO
 
uöt16_t
 
DR38
;

592 
uöt16_t
 
RESERVED41
;

593 
__IO
 
uöt16_t
 
DR39
;

594 
uöt16_t
 
RESERVED42
;

595 
__IO
 
uöt16_t
 
DR40
;

596 
uöt16_t
 
RESERVED43
;

597 
__IO
 
uöt16_t
 
DR41
;

598 
uöt16_t
 
RESERVED44
;

599 
__IO
 
uöt16_t
 
DR42
;

600 
uöt16_t
 
RESERVED45
;

601 } 
	tBKP_Ty≥Def
;

609 
__IO
 
uöt32_t
 
TIR
;

610 
__IO
 
uöt32_t
 
TDTR
;

611 
__IO
 
uöt32_t
 
TDLR
;

612 
__IO
 
uöt32_t
 
TDHR
;

613 } 
	tCAN_TxMaûBox_Ty≥Def
;

621 
__IO
 
uöt32_t
 
RIR
;

622 
__IO
 
uöt32_t
 
RDTR
;

623 
__IO
 
uöt32_t
 
RDLR
;

624 
__IO
 
uöt32_t
 
RDHR
;

625 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

633 
__IO
 
uöt32_t
 
FR1
;

634 
__IO
 
uöt32_t
 
FR2
;

635 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

643 
__IO
 
uöt32_t
 
MCR
;

644 
__IO
 
uöt32_t
 
MSR
;

645 
__IO
 
uöt32_t
 
TSR
;

646 
__IO
 
uöt32_t
 
RF0R
;

647 
__IO
 
uöt32_t
 
RF1R
;

648 
__IO
 
uöt32_t
 
IER
;

649 
__IO
 
uöt32_t
 
ESR
;

650 
__IO
 
uöt32_t
 
BTR
;

651 
uöt32_t
 
RESERVED0
[88];

652 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

653 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

654 
uöt32_t
 
RESERVED1
[12];

655 
__IO
 
uöt32_t
 
FMR
;

656 
__IO
 
uöt32_t
 
FM1R
;

657 
uöt32_t
 
RESERVED2
;

658 
__IO
 
uöt32_t
 
FS1R
;

659 
uöt32_t
 
RESERVED3
;

660 
__IO
 
uöt32_t
 
FFA1R
;

661 
uöt32_t
 
RESERVED4
;

662 
__IO
 
uöt32_t
 
FA1R
;

663 
uöt32_t
 
RESERVED5
[8];

664 #i‚de‡
STM32F10X_CL


665 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

667 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

669 } 
	tCAN_Ty≥Def
;

676 
__IO
 
uöt32_t
 
CFGR
;

677 
__IO
 
uöt32_t
 
OAR
;

678 
__IO
 
uöt32_t
 
PRES
;

679 
__IO
 
uöt32_t
 
ESR
;

680 
__IO
 
uöt32_t
 
CSR
;

681 
__IO
 
uöt32_t
 
TXD
;

682 
__IO
 
uöt32_t
 
RXD
;

683 } 
	tCEC_Ty≥Def
;

691 
__IO
 
uöt32_t
 
DR
;

692 
__IO
 
uöt8_t
 
IDR
;

693 
uöt8_t
 
RESERVED0
;

694 
uöt16_t
 
RESERVED1
;

695 
__IO
 
uöt32_t
 
CR
;

696 } 
	tCRC_Ty≥Def
;

704 
__IO
 
uöt32_t
 
CR
;

705 
__IO
 
uöt32_t
 
SWTRIGR
;

706 
__IO
 
uöt32_t
 
DHR12R1
;

707 
__IO
 
uöt32_t
 
DHR12L1
;

708 
__IO
 
uöt32_t
 
DHR8R1
;

709 
__IO
 
uöt32_t
 
DHR12R2
;

710 
__IO
 
uöt32_t
 
DHR12L2
;

711 
__IO
 
uöt32_t
 
DHR8R2
;

712 
__IO
 
uöt32_t
 
DHR12RD
;

713 
__IO
 
uöt32_t
 
DHR12LD
;

714 
__IO
 
uöt32_t
 
DHR8RD
;

715 
__IO
 
uöt32_t
 
DOR1
;

716 
__IO
 
uöt32_t
 
DOR2
;

717 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

718 
__IO
 
uöt32_t
 
SR
;

720 } 
	tDAC_Ty≥Def
;

728 
__IO
 
uöt32_t
 
IDCODE
;

729 
__IO
 
uöt32_t
 
CR
;

730 }
	tDBGMCU_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CCR
;

739 
__IO
 
uöt32_t
 
CNDTR
;

740 
__IO
 
uöt32_t
 
CPAR
;

741 
__IO
 
uöt32_t
 
CMAR
;

742 } 
	tDMA_Ch™√l_Ty≥Def
;

746 
__IO
 
uöt32_t
 
ISR
;

747 
__IO
 
uöt32_t
 
IFCR
;

748 } 
	tDMA_Ty≥Def
;

756 
__IO
 
uöt32_t
 
MACCR
;

757 
__IO
 
uöt32_t
 
MACFFR
;

758 
__IO
 
uöt32_t
 
MACHTHR
;

759 
__IO
 
uöt32_t
 
MACHTLR
;

760 
__IO
 
uöt32_t
 
MACMIIAR
;

761 
__IO
 
uöt32_t
 
MACMIIDR
;

762 
__IO
 
uöt32_t
 
MACFCR
;

763 
__IO
 
uöt32_t
 
MACVLANTR
;

764 
uöt32_t
 
RESERVED0
[2];

765 
__IO
 
uöt32_t
 
MACRWUFFR
;

766 
__IO
 
uöt32_t
 
MACPMTCSR
;

767 
uöt32_t
 
RESERVED1
[2];

768 
__IO
 
uöt32_t
 
MACSR
;

769 
__IO
 
uöt32_t
 
MACIMR
;

770 
__IO
 
uöt32_t
 
MACA0HR
;

771 
__IO
 
uöt32_t
 
MACA0LR
;

772 
__IO
 
uöt32_t
 
MACA1HR
;

773 
__IO
 
uöt32_t
 
MACA1LR
;

774 
__IO
 
uöt32_t
 
MACA2HR
;

775 
__IO
 
uöt32_t
 
MACA2LR
;

776 
__IO
 
uöt32_t
 
MACA3HR
;

777 
__IO
 
uöt32_t
 
MACA3LR
;

778 
uöt32_t
 
RESERVED2
[40];

779 
__IO
 
uöt32_t
 
MMCCR
;

780 
__IO
 
uöt32_t
 
MMCRIR
;

781 
__IO
 
uöt32_t
 
MMCTIR
;

782 
__IO
 
uöt32_t
 
MMCRIMR
;

783 
__IO
 
uöt32_t
 
MMCTIMR
;

784 
uöt32_t
 
RESERVED3
[14];

785 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

786 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

787 
uöt32_t
 
RESERVED4
[5];

788 
__IO
 
uöt32_t
 
MMCTGFCR
;

789 
uöt32_t
 
RESERVED5
[10];

790 
__IO
 
uöt32_t
 
MMCRFCECR
;

791 
__IO
 
uöt32_t
 
MMCRFAECR
;

792 
uöt32_t
 
RESERVED6
[10];

793 
__IO
 
uöt32_t
 
MMCRGUFCR
;

794 
uöt32_t
 
RESERVED7
[334];

795 
__IO
 
uöt32_t
 
PTPTSCR
;

796 
__IO
 
uöt32_t
 
PTPSSIR
;

797 
__IO
 
uöt32_t
 
PTPTSHR
;

798 
__IO
 
uöt32_t
 
PTPTSLR
;

799 
__IO
 
uöt32_t
 
PTPTSHUR
;

800 
__IO
 
uöt32_t
 
PTPTSLUR
;

801 
__IO
 
uöt32_t
 
PTPTSAR
;

802 
__IO
 
uöt32_t
 
PTPTTHR
;

803 
__IO
 
uöt32_t
 
PTPTTLR
;

804 
uöt32_t
 
RESERVED8
[567];

805 
__IO
 
uöt32_t
 
DMABMR
;

806 
__IO
 
uöt32_t
 
DMATPDR
;

807 
__IO
 
uöt32_t
 
DMARPDR
;

808 
__IO
 
uöt32_t
 
DMARDLAR
;

809 
__IO
 
uöt32_t
 
DMATDLAR
;

810 
__IO
 
uöt32_t
 
DMASR
;

811 
__IO
 
uöt32_t
 
DMAOMR
;

812 
__IO
 
uöt32_t
 
DMAIER
;

813 
__IO
 
uöt32_t
 
DMAMFBOCR
;

814 
uöt32_t
 
RESERVED9
[9];

815 
__IO
 
uöt32_t
 
DMACHTDR
;

816 
__IO
 
uöt32_t
 
DMACHRDR
;

817 
__IO
 
uöt32_t
 
DMACHTBAR
;

818 
__IO
 
uöt32_t
 
DMACHRBAR
;

819 } 
	tETH_Ty≥Def
;

827 
__IO
 
uöt32_t
 
IMR
;

828 
__IO
 
uöt32_t
 
EMR
;

829 
__IO
 
uöt32_t
 
RTSR
;

830 
__IO
 
uöt32_t
 
FTSR
;

831 
__IO
 
uöt32_t
 
SWIER
;

832 
__IO
 
uöt32_t
 
PR
;

833 } 
	tEXTI_Ty≥Def
;

841 
__IO
 
uöt32_t
 
ACR
;

842 
__IO
 
uöt32_t
 
KEYR
;

843 
__IO
 
uöt32_t
 
OPTKEYR
;

844 
__IO
 
uöt32_t
 
SR
;

845 
__IO
 
uöt32_t
 
CR
;

846 
__IO
 
uöt32_t
 
AR
;

847 
__IO
 
uöt32_t
 
RESERVED
;

848 
__IO
 
uöt32_t
 
OBR
;

849 
__IO
 
uöt32_t
 
WRPR
;

850 #ifde‡
STM32F10X_XL


851 
uöt32_t
 
RESERVED1
[8];

852 
__IO
 
uöt32_t
 
KEYR2
;

853 
uöt32_t
 
RESERVED2
;

854 
__IO
 
uöt32_t
 
SR2
;

855 
__IO
 
uöt32_t
 
CR2
;

856 
__IO
 
uöt32_t
 
AR2
;

858 } 
	tFLASH_Ty≥Def
;

866 
__IO
 
uöt16_t
 
RDP
;

867 
__IO
 
uöt16_t
 
USER
;

868 
__IO
 
uöt16_t
 
D©a0
;

869 
__IO
 
uöt16_t
 
D©a1
;

870 
__IO
 
uöt16_t
 
WRP0
;

871 
__IO
 
uöt16_t
 
WRP1
;

872 
__IO
 
uöt16_t
 
WRP2
;

873 
__IO
 
uöt16_t
 
WRP3
;

874 } 
	tOB_Ty≥Def
;

882 
__IO
 
uöt32_t
 
BTCR
[8];

883 } 
	tFSMC_B™k1_Ty≥Def
;

891 
__IO
 
uöt32_t
 
BWTR
[7];

892 } 
	tFSMC_B™k1E_Ty≥Def
;

900 
__IO
 
uöt32_t
 
PCR2
;

901 
__IO
 
uöt32_t
 
SR2
;

902 
__IO
 
uöt32_t
 
PMEM2
;

903 
__IO
 
uöt32_t
 
PATT2
;

904 
uöt32_t
 
RESERVED0
;

905 
__IO
 
uöt32_t
 
ECCR2
;

906 } 
	tFSMC_B™k2_Ty≥Def
;

914 
__IO
 
uöt32_t
 
PCR3
;

915 
__IO
 
uöt32_t
 
SR3
;

916 
__IO
 
uöt32_t
 
PMEM3
;

917 
__IO
 
uöt32_t
 
PATT3
;

918 
uöt32_t
 
RESERVED0
;

919 
__IO
 
uöt32_t
 
ECCR3
;

920 } 
	tFSMC_B™k3_Ty≥Def
;

928 
__IO
 
uöt32_t
 
PCR4
;

929 
__IO
 
uöt32_t
 
SR4
;

930 
__IO
 
uöt32_t
 
PMEM4
;

931 
__IO
 
uöt32_t
 
PATT4
;

932 
__IO
 
uöt32_t
 
PIO4
;

933 } 
	tFSMC_B™k4_Ty≥Def
;

941 
__IO
 
uöt32_t
 
CRL
;

942 
__IO
 
uöt32_t
 
CRH
;

943 
__IO
 
uöt32_t
 
IDR
;

944 
__IO
 
uöt32_t
 
ODR
;

945 
__IO
 
uöt32_t
 
BSRR
;

946 
__IO
 
uöt32_t
 
BRR
;

947 
__IO
 
uöt32_t
 
LCKR
;

948 } 
	tGPIO_Ty≥Def
;

956 
__IO
 
uöt32_t
 
EVCR
;

957 
__IO
 
uöt32_t
 
MAPR
;

958 
__IO
 
uöt32_t
 
EXTICR
[4];

959 
uöt32_t
 
RESERVED0
;

960 
__IO
 
uöt32_t
 
MAPR2
;

961 } 
	tAFIO_Ty≥Def
;

968 
__IO
 
uöt16_t
 
CR1
;

969 
uöt16_t
 
RESERVED0
;

970 
__IO
 
uöt16_t
 
CR2
;

971 
uöt16_t
 
RESERVED1
;

972 
__IO
 
uöt16_t
 
OAR1
;

973 
uöt16_t
 
RESERVED2
;

974 
__IO
 
uöt16_t
 
OAR2
;

975 
uöt16_t
 
RESERVED3
;

976 
__IO
 
uöt16_t
 
DR
;

977 
uöt16_t
 
RESERVED4
;

978 
__IO
 
uöt16_t
 
SR1
;

979 
uöt16_t
 
RESERVED5
;

980 
__IO
 
uöt16_t
 
SR2
;

981 
uöt16_t
 
RESERVED6
;

982 
__IO
 
uöt16_t
 
CCR
;

983 
uöt16_t
 
RESERVED7
;

984 
__IO
 
uöt16_t
 
TRISE
;

985 
uöt16_t
 
RESERVED8
;

986 } 
	tI2C_Ty≥Def
;

994 
__IO
 
uöt32_t
 
KR
;

995 
__IO
 
uöt32_t
 
PR
;

996 
__IO
 
uöt32_t
 
RLR
;

997 
__IO
 
uöt32_t
 
SR
;

998 } 
	tIWDG_Ty≥Def
;

1006 
__IO
 
uöt32_t
 
CR
;

1007 
__IO
 
uöt32_t
 
CSR
;

1008 } 
	tPWR_Ty≥Def
;

1016 
__IO
 
uöt32_t
 
CR
;

1017 
__IO
 
uöt32_t
 
CFGR
;

1018 
__IO
 
uöt32_t
 
CIR
;

1019 
__IO
 
uöt32_t
 
APB2RSTR
;

1020 
__IO
 
uöt32_t
 
APB1RSTR
;

1021 
__IO
 
uöt32_t
 
AHBENR
;

1022 
__IO
 
uöt32_t
 
APB2ENR
;

1023 
__IO
 
uöt32_t
 
APB1ENR
;

1024 
__IO
 
uöt32_t
 
BDCR
;

1025 
__IO
 
uöt32_t
 
CSR
;

1027 #ifde‡
STM32F10X_CL


1028 
__IO
 
uöt32_t
 
AHBRSTR
;

1029 
__IO
 
uöt32_t
 
CFGR2
;

1032 #i‡
deföed
 
STM32F10X_LD_VL
 || deföed 
STM32F10X_MD_VL


1033 
uöt32_t
 
RESERVED0
;

1034 
__IO
 
uöt32_t
 
CFGR2
;

1036 } 
	tRCC_Ty≥Def
;

1044 
__IO
 
uöt16_t
 
CRH
;

1045 
uöt16_t
 
RESERVED0
;

1046 
__IO
 
uöt16_t
 
CRL
;

1047 
uöt16_t
 
RESERVED1
;

1048 
__IO
 
uöt16_t
 
PRLH
;

1049 
uöt16_t
 
RESERVED2
;

1050 
__IO
 
uöt16_t
 
PRLL
;

1051 
uöt16_t
 
RESERVED3
;

1052 
__IO
 
uöt16_t
 
DIVH
;

1053 
uöt16_t
 
RESERVED4
;

1054 
__IO
 
uöt16_t
 
DIVL
;

1055 
uöt16_t
 
RESERVED5
;

1056 
__IO
 
uöt16_t
 
CNTH
;

1057 
uöt16_t
 
RESERVED6
;

1058 
__IO
 
uöt16_t
 
CNTL
;

1059 
uöt16_t
 
RESERVED7
;

1060 
__IO
 
uöt16_t
 
ALRH
;

1061 
uöt16_t
 
RESERVED8
;

1062 
__IO
 
uöt16_t
 
ALRL
;

1063 
uöt16_t
 
RESERVED9
;

1064 } 
	tRTC_Ty≥Def
;

1072 
__IO
 
uöt32_t
 
POWER
;

1073 
__IO
 
uöt32_t
 
CLKCR
;

1074 
__IO
 
uöt32_t
 
ARG
;

1075 
__IO
 
uöt32_t
 
CMD
;

1076 
__I
 
uöt32_t
 
RESPCMD
;

1077 
__I
 
uöt32_t
 
RESP1
;

1078 
__I
 
uöt32_t
 
RESP2
;

1079 
__I
 
uöt32_t
 
RESP3
;

1080 
__I
 
uöt32_t
 
RESP4
;

1081 
__IO
 
uöt32_t
 
DTIMER
;

1082 
__IO
 
uöt32_t
 
DLEN
;

1083 
__IO
 
uöt32_t
 
DCTRL
;

1084 
__I
 
uöt32_t
 
DCOUNT
;

1085 
__I
 
uöt32_t
 
STA
;

1086 
__IO
 
uöt32_t
 
ICR
;

1087 
__IO
 
uöt32_t
 
MASK
;

1088 
uöt32_t
 
RESERVED0
[2];

1089 
__I
 
uöt32_t
 
FIFOCNT
;

1090 
uöt32_t
 
RESERVED1
[13];

1091 
__IO
 
uöt32_t
 
FIFO
;

1092 } 
	tSDIO_Ty≥Def
;

1100 
__IO
 
uöt16_t
 
CR1
;

1101 
uöt16_t
 
RESERVED0
;

1102 
__IO
 
uöt16_t
 
CR2
;

1103 
uöt16_t
 
RESERVED1
;

1104 
__IO
 
uöt16_t
 
SR
;

1105 
uöt16_t
 
RESERVED2
;

1106 
__IO
 
uöt16_t
 
DR
;

1107 
uöt16_t
 
RESERVED3
;

1108 
__IO
 
uöt16_t
 
CRCPR
;

1109 
uöt16_t
 
RESERVED4
;

1110 
__IO
 
uöt16_t
 
RXCRCR
;

1111 
uöt16_t
 
RESERVED5
;

1112 
__IO
 
uöt16_t
 
TXCRCR
;

1113 
uöt16_t
 
RESERVED6
;

1114 
__IO
 
uöt16_t
 
I2SCFGR
;

1115 
uöt16_t
 
RESERVED7
;

1116 
__IO
 
uöt16_t
 
I2SPR
;

1117 
uöt16_t
 
RESERVED8
;

1118 } 
	tSPI_Ty≥Def
;

1126 
__IO
 
uöt16_t
 
CR1
;

1127 
uöt16_t
 
RESERVED0
;

1128 
__IO
 
uöt16_t
 
CR2
;

1129 
uöt16_t
 
RESERVED1
;

1130 
__IO
 
uöt16_t
 
SMCR
;

1131 
uöt16_t
 
RESERVED2
;

1132 
__IO
 
uöt16_t
 
DIER
;

1133 
uöt16_t
 
RESERVED3
;

1134 
__IO
 
uöt16_t
 
SR
;

1135 
uöt16_t
 
RESERVED4
;

1136 
__IO
 
uöt16_t
 
EGR
;

1137 
uöt16_t
 
RESERVED5
;

1138 
__IO
 
uöt16_t
 
CCMR1
;

1139 
uöt16_t
 
RESERVED6
;

1140 
__IO
 
uöt16_t
 
CCMR2
;

1141 
uöt16_t
 
RESERVED7
;

1142 
__IO
 
uöt16_t
 
CCER
;

1143 
uöt16_t
 
RESERVED8
;

1144 
__IO
 
uöt16_t
 
CNT
;

1145 
uöt16_t
 
RESERVED9
;

1146 
__IO
 
uöt16_t
 
PSC
;

1147 
uöt16_t
 
RESERVED10
;

1148 
__IO
 
uöt16_t
 
ARR
;

1149 
uöt16_t
 
RESERVED11
;

1150 
__IO
 
uöt16_t
 
RCR
;

1151 
uöt16_t
 
RESERVED12
;

1152 
__IO
 
uöt16_t
 
CCR1
;

1153 
uöt16_t
 
RESERVED13
;

1154 
__IO
 
uöt16_t
 
CCR2
;

1155 
uöt16_t
 
RESERVED14
;

1156 
__IO
 
uöt16_t
 
CCR3
;

1157 
uöt16_t
 
RESERVED15
;

1158 
__IO
 
uöt16_t
 
CCR4
;

1159 
uöt16_t
 
RESERVED16
;

1160 
__IO
 
uöt16_t
 
BDTR
;

1161 
uöt16_t
 
RESERVED17
;

1162 
__IO
 
uöt16_t
 
DCR
;

1163 
uöt16_t
 
RESERVED18
;

1164 
__IO
 
uöt16_t
 
DMAR
;

1165 
uöt16_t
 
RESERVED19
;

1166 } 
	tTIM_Ty≥Def
;

1174 
__IO
 
uöt16_t
 
SR
;

1175 
uöt16_t
 
RESERVED0
;

1176 
__IO
 
uöt16_t
 
DR
;

1177 
uöt16_t
 
RESERVED1
;

1178 
__IO
 
uöt16_t
 
BRR
;

1179 
uöt16_t
 
RESERVED2
;

1180 
__IO
 
uöt16_t
 
CR1
;

1181 
uöt16_t
 
RESERVED3
;

1182 
__IO
 
uöt16_t
 
CR2
;

1183 
uöt16_t
 
RESERVED4
;

1184 
__IO
 
uöt16_t
 
CR3
;

1185 
uöt16_t
 
RESERVED5
;

1186 
__IO
 
uöt16_t
 
GTPR
;

1187 
uöt16_t
 
RESERVED6
;

1188 } 
	tUSART_Ty≥Def
;

1196 
__IO
 
uöt32_t
 
CR
;

1197 
__IO
 
uöt32_t
 
CFR
;

1198 
__IO
 
uöt32_t
 
SR
;

1199 } 
	tWWDG_Ty≥Def
;

1210 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1211 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1212 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1214 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1215 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1217 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1220 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1221 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1222 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1224 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1225 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1226 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1227 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1228 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1229 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1230 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1231 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1232 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1233 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1234 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1235 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1236 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1237 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1238 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1239 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1240 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1241 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1242 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1243 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1244 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1245 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1246 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1247 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1248 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1249 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1251 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1252 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1253 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1254 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1255 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1256 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1257 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1258 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1259 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1260 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1261 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1262 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1263 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1264 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1265 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1266 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1267 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1268 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1269 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1270 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1271 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1272 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1274 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1276 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1277 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1278 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1279 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1280 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1281 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1282 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1283 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1284 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1285 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1286 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1287 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1288 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1289 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1290 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1291 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1293 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1294 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1296 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1297 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1298 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1299 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1300 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1302 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1303 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1304 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1305 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1306 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1308 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1318 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1319 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1320 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1321 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1322 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1323 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1324 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1325 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1326 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1327 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1328 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1329 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1330 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1331 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1332 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1333 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1334 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1335 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1336 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1337 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1338 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1339 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1340 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1341 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1342 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1343 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1344 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1345 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1346 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1347 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1348 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1349 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1350 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1351 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1352 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1353 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1354 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1355 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1356 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1357 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1358 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1359 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1360 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1361 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1362 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1363 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1364 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1365 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1366 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1367 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1368 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1369 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1370 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1371 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1372 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1373 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1374 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1375 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1376 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1377 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1378 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1379 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1380 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1381 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1382 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1383 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1384 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1385 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1386 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1387 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1388 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1389 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1390 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1391 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1416 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1420 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1424 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1433 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1434 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1435 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1436 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1437 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1439 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1440 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1441 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1442 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1445 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1446 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1447 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1448 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1449 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1450 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1451 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1452 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1454 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1458 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1459 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1460 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1461 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1470 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1473 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1476 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1479 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1482 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1485 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1488 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1491 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1494 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1497 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1500 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1503 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1506 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1509 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1512 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1515 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1518 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1521 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1524 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1527 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1530 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1533 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1536 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1539 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1542 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1545 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1548 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1551 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1554 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1557 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1560 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1563 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1566 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1569 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1572 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1575 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1578 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1581 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1584 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1587 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1590 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1593 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1596 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1597 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1598 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1599 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1602 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1603 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1606 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1607 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1608 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1609 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1610 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1619 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1620 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1621 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1622 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1623 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1624 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1625 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1626 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1627 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1628 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1630 #ifde‡
STM32F10X_CL


1631 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1632 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1633 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1634 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1639 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1640 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1641 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1643 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1644 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1645 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1648 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1649 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1650 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1652 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1653 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1654 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1657 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1658 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1659 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1660 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1661 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1663 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1664 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1665 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1666 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1667 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1668 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1669 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1670 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1671 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1674 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1675 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1676 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1677 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1679 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1680 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1681 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1682 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1683 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1686 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1687 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1688 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1689 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1691 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1692 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1693 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1694 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1695 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1698 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1699 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1700 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1702 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1703 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1704 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1705 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1707 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1709 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1712 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1713 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1714 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1715 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1716 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1718 #ifde‡
STM32F10X_CL


1719 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1720 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1722 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1723 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1725 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1726 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1727 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1728 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1729 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1730 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1731 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1733 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1736 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1737 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1738 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1739 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1740 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1742 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1743 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1744 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1745 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1746 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1747 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1748 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1749 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1750 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1751 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1752 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1753 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1755 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1756 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1758 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1759 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1760 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1761 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1762 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1763 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1764 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1765 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1766 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1767 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1768 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1769 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1770 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1771 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1772 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1775 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1776 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1777 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1778 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1780 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1781 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1782 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1783 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1784 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1786 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1787 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1789 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1790 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1792 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1793 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1794 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1795 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1796 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1797 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1798 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1799 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1800 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1801 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1802 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1803 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1804 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1805 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1806 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1807 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1810 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1811 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1812 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1813 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1815 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1816 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1817 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1818 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1819 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1823 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1824 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1825 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1826 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1827 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1828 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1829 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1830 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1831 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1832 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1833 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1834 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1835 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1836 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1837 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1838 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1839 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1841 #ifde‡
STM32F10X_CL


1842 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1843 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1844 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1845 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1846 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1847 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1851 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1852 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1853 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1854 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1855 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1856 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1858 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1859 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1862 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1863 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1864 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1866 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1867 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1868 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1869 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1872 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1873 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1876 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1877 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1878 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1879 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1880 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1883 #ifde‡
STM32F10X_XL


1884 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1885 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1886 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1890 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1891 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1892 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1893 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1894 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1896 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1897 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1900 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1901 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1903 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1904 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1905 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1906 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1907 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1910 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1911 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1914 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1915 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1916 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1917 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1918 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1919 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1920 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1921 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1924 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1925 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1926 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1927 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1928 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1931 #ifde‡
STM32F10X_CL


1932 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

1935 #ifde‡
STM32F10X_XL


1936 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

1937 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

1938 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

1942 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1943 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1944 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1945 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1947 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1948 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1951 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1952 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1953 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1956 #ifde‡
STM32F10X_CL


1957 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

1958 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

1959 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

1960 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

1964 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

1965 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

1966 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

1967 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

1968 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

1969 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

1971 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

1972 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

1975 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

1976 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

1977 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

1979 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

1980 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

1981 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

1982 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

1985 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1986 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

1989 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1990 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

1991 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

1992 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

1993 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

1996 #ifde‡
STM32F10X_XL


1997 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

1998 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

1999 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2003 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2004 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2005 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2006 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2007 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2009 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
)

2010 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2013 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2014 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2016 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2017 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2018 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2019 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2020 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2023 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2024 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2027 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2028 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2029 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2030 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2031 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2032 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2033 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2034 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2037 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2038 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2039 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2040 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2041 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2044 #ifde‡
STM32F10X_CL


2045 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2048 #ifde‡
STM32F10X_XL


2049 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2050 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2051 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2055 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2056 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2057 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2059 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2060 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2061 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2064 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2065 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2066 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2067 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2069 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2070 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2073 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2074 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2075 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2076 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2077 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2078 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2079 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2080 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2081 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2083 #ifde‡
STM32F10X_CL


2085 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2086 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2090 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2091 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2092 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2093 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2094 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2096 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2097 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2098 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2099 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2100 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2101 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2102 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2103 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2104 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2105 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2106 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2107 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2108 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2109 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2110 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2111 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2114 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2115 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2116 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2117 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2118 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2120 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2121 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2122 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2123 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2124 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2125 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2126 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2127 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2128 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2129 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2130 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2131 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2132 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2133 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2134 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2135 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2138 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2139 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2140 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2141 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2142 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2144 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2145 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2146 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2147 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2148 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2149 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2150 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2151 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2152 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2155 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2156 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2157 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2158 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2161 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2162 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2163 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2164 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2165 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2166 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2167 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2168 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2169 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2171 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2172 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2173 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2174 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2175 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2178 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2181 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2182 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2185 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2187 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2191 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2212 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2214 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2215 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2216 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2218 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2219 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2220 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2222 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2223 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2224 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2226 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2227 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2228 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2230 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2231 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2232 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2234 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2235 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2236 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2238 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2239 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2240 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2242 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2243 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2244 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2246 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2248 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2249 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2250 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2252 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2253 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2254 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2256 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2257 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2258 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2260 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2261 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2262 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2264 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2265 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2266 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2268 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2269 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2270 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2272 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2273 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2274 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2276 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2277 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2278 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2281 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2283 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2284 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2287 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2288 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2289 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2291 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2292 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2293 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2295 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2296 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2297 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2299 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2300 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2301 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2303 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2304 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2305 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2307 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2308 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2309 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2311 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2312 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2313 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2315 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2317 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2318 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2319 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2321 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2322 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2323 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2325 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2326 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2327 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2329 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2330 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2331 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2333 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2334 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2335 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2337 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2338 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2339 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2341 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2342 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2343 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2345 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2346 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2347 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2350 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2351 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2352 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2353 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2354 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2355 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2356 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2357 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2358 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2359 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2360 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2361 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2362 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2363 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2364 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2365 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2368 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2369 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2370 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2371 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2372 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2373 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2374 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2375 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2376 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2377 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2378 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2379 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2380 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2381 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2382 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2383 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2386 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2387 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2388 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2389 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2390 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2391 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2392 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2393 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2394 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2395 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2396 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2397 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2398 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2399 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2400 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2401 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2403 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2404 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2405 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2406 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2407 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2408 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2409 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2410 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2411 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2412 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2413 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2414 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2415 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2416 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2417 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2418 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2421 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2422 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2423 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2424 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2425 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2426 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2427 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2428 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2429 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2430 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2431 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2432 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2433 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2434 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2435 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2436 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2439 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2440 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2441 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2442 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2443 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2444 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2445 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2446 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2447 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2448 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2449 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2450 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2451 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2452 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2453 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2454 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2455 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2460 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2461 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2462 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2463 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2464 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2467 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2468 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2469 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2470 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2471 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2472 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2473 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2474 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2475 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2476 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2477 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2478 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2479 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2480 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2481 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2482 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2484 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2485 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2486 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2487 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2490 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2491 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2492 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2493 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2494 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2496 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2499 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2500 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2501 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2502 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2504 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2505 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2506 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2509 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2510 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2511 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2513 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2514 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2515 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2518 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2519 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2520 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2522 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2523 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2524 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2527 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2528 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2529 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2530 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2532 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2533 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2534 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2537 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2538 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2539 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2541 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2543 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2544 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2545 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2548 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2549 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2550 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2552 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2553 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2554 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2555 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2556 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2557 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2560 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2561 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2562 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2563 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2565 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2566 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2567 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2568 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2570 #ifde‡
STM32F10X_CL


2572 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2575 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2578 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2581 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2584 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2587 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x20000000Ë

	)

2591 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2592 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2593 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2594 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2597 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2598 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2599 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2600 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2601 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2602 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2603 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2606 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2607 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2608 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2609 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2610 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2611 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2612 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2615 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2616 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2617 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2618 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2619 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2620 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2621 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2624 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2625 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2626 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2627 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2628 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2629 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2630 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2633 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2634 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2635 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2636 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2639 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2640 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2641 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2642 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2643 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2644 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2645 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2648 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2649 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2650 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2651 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2652 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2653 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2654 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2657 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2658 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2659 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2660 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2661 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2662 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2663 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2666 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2667 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2668 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2669 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2670 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2671 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2672 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2675 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2676 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2677 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2678 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2681 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2682 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2683 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2684 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2685 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2686 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2687 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2690 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2691 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2692 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2693 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2694 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2695 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2696 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2699 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2700 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2701 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2702 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2703 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2704 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2705 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2708 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2709 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2710 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2711 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2712 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2713 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2714 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2717 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2718 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2719 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2720 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2723 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2724 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2725 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2726 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2727 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2728 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2729 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2732 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2733 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2734 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2735 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2736 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2737 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2738 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2741 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2742 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2743 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2744 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2745 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2746 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2747 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2750 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2751 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2752 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2753 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2754 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2755 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2756 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2758 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

2760 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2761 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2762 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2763 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2764 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2767 #ifde‡
STM32F10X_XL


2769 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2770 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2771 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2772 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2773 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2774 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2784 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2785 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2786 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2787 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2790 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2793 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2796 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2797 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2798 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2807 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2808 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2809 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2810 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2811 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2812 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2813 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2814 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2815 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2816 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2817 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2818 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2819 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2820 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2821 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2822 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2823 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2824 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2825 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2826 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2827 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2828 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2829 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2830 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2831 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2832 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2833 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2834 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2835 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2836 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2837 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2838 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2839 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2842 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2843 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2844 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2845 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2846 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2847 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2848 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2849 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2850 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2851 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2852 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2853 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2854 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2855 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2856 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2857 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2858 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2859 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2860 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2861 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2862 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2863 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2864 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2865 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2866 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2867 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2868 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2869 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2870 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2871 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2872 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2873 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2874 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2877 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2878 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2879 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2880 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2881 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2882 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2883 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2884 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2885 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2886 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2887 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2888 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2889 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2890 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2891 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2892 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2893 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2894 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2895 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2896 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2897 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2898 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2899 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2900 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2901 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2902 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2903 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2904 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2905 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2906 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2907 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2908 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2909 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2912 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2913 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2948 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2949 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2950 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2951 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2952 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2953 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2954 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2955 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2956 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2957 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2958 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2959 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2960 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2961 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2962 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2963 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2964 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2965 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2966 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2967 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2968 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2969 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2970 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2971 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2972 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2973 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2974 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2975 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2976 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2977 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2978 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2979 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2982 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2983 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2984 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2985 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2988 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2989 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2990 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2991 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2994 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2995 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2996 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2997 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3000 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3001 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3002 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3003 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3006 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3007 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3008 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3009 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3012 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3013 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3014 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3015 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3018 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3019 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3020 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3021 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3024 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3025 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3026 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3027 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3030 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3031 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3032 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3033 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3034 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3037 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3038 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3039 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3040 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3041 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3042 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3043 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3044 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3045 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3046 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3049 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3050 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3053 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3054 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3055 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3057 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3058 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3059 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3060 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3063 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3064 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3065 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3066 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3067 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3068 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3069 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3070 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3072 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3073 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3076 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3077 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3078 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3081 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3082 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3083 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3084 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3085 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3086 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3089 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3090 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3091 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3092 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3095 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3096 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3097 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3098 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3099 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3100 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3101 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3102 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3103 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3104 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3105 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3106 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3107 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3108 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3112 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3113 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3114 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3115 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3116 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3118 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3119 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3120 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3121 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3122 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3123 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3125 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3126 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3127 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3128 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3129 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3130 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3133 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3134 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3135 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3138 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3139 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3140 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3141 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3142 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3145 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3148 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3151 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3160 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3161 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3162 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3163 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3164 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3165 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3166 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3167 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3168 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3169 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3170 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3171 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3172 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3173 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3174 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3175 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3176 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3177 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3178 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3179 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3182 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3183 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3184 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3185 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3186 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3187 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3188 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3189 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3190 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3191 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3192 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3193 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3194 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3195 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3196 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3197 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3198 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3199 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3200 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3201 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3204 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3205 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3206 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3207 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3208 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3209 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3210 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3211 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3212 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3213 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3214 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3215 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3216 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3217 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3218 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3219 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3220 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3221 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3222 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3223 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3226 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3227 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3228 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3229 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3230 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3231 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3232 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3233 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3234 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3235 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3236 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3237 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3238 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3239 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3240 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3241 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3242 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3243 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3244 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3245 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3248 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3249 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3250 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3251 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3252 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3253 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3254 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3255 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3256 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3257 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3258 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3259 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3260 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3261 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3262 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3263 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3264 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3265 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3266 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3267 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3270 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3271 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3272 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3273 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3274 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3275 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3276 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3277 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3278 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3279 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3280 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3281 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3282 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3283 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3284 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3285 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3286 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3287 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3288 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3289 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3298 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3299 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3300 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3301 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3302 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3303 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3304 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3305 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3306 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3307 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3308 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3309 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3310 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3311 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3312 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3313 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3314 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3315 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3316 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3317 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3318 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3319 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3320 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3321 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3322 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3323 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3324 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3325 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3328 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3329 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3330 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3331 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3332 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3333 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3334 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3335 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3336 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3337 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3338 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3339 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3340 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3341 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3342 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3343 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3344 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3345 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3346 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3347 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3348 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3349 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3350 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3351 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3352 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3353 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3354 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3355 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3358 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3359 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3360 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3361 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3362 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3363 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3364 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3365 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3367 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3368 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3369 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3371 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3372 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3373 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3375 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3376 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3377 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3379 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3382 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3383 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3384 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3385 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3386 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3387 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3388 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3389 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3391 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3392 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3393 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3395 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3396 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3397 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3399 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3400 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3401 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3403 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3406 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3407 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3408 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3409 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3410 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3411 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3412 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3413 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3415 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3416 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3417 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3419 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3420 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3421 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3423 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3424 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3425 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3427 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3430 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3431 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3432 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3433 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3434 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3435 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3436 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3437 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3439 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3440 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3441 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3443 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3444 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3445 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3447 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3448 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3449 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3451 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3454 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3455 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3456 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3457 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3458 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3459 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3460 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3461 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3463 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3464 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3465 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3467 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3468 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3469 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3471 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3472 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3473 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3475 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3478 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3479 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3480 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3481 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3482 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3483 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3484 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3485 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3487 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3488 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3489 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3491 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3492 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3493 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3495 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3496 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3497 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3499 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3502 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3503 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3504 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3505 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3506 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3507 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3508 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3509 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3511 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3512 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3513 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3515 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3516 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3517 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3519 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3520 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3521 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3523 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3526 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3529 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3532 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3535 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3538 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3541 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3544 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3547 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3550 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3553 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3557 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3560 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3563 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3567 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3570 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3573 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3576 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3580 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3583 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3586 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3589 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3598 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3599 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3600 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3601 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3602 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3605 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3606 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3607 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3608 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3609 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3610 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3612 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3613 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3614 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3615 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3616 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3617 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3618 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3619 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3621 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3622 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3623 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3624 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3626 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3627 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3628 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3629 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3630 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3632 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3633 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3637 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3638 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3639 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3640 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3641 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3642 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3644 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3645 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3646 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3647 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3649 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3651 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3652 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3653 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3654 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3656 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3657 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3658 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3659 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3662 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3663 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3664 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3665 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3667 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3668 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3669 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3670 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3672 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3673 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3674 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3675 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3677 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3678 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3679 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3680 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3682 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3683 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3684 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3685 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3687 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3688 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3689 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3690 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3692 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3693 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3694 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3695 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3697 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3698 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3699 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3700 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3703 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3704 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3705 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3706 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3708 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3709 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3710 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3711 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3713 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3714 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3715 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3716 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3718 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3719 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3720 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3721 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3723 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3724 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3725 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3726 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3728 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3729 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3730 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3731 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3733 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3734 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3735 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3736 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3738 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3739 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3740 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3741 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3743 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3744 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3745 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3746 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3748 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3749 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3750 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3751 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3754 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3757 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3760 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3763 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3766 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3769 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3772 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3773 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3774 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3775 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3776 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3777 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3779 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3780 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3781 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3782 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3783 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3784 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3786 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3787 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3788 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3789 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3790 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3791 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3793 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3794 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3795 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3796 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3797 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3798 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3800 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3801 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3803 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3804 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3807 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3808 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3809 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3810 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3811 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3812 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3814 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3815 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3816 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3817 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3818 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3819 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3821 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3822 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3823 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3824 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3825 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3826 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3828 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3829 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3830 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3831 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3832 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3833 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3835 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3836 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3837 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3838 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3839 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3840 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3842 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3843 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3844 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3845 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3846 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3847 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3850 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3851 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3852 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3853 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3854 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3855 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3857 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3858 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3859 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3860 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3861 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3862 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3864 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3865 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3866 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3867 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3868 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3869 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3871 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3872 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3873 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3874 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3875 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3876 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3878 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3879 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3880 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3881 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3882 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3883 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3885 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3886 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3887 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3888 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3889 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3890 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3893 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3894 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3895 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3896 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3897 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3898 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3900 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3901 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3902 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3903 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3904 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3905 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3907 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3908 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3909 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3910 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3911 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3912 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3914 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3915 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3916 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3917 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3918 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3919 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3921 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3922 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3923 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3926 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3929 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3932 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3935 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3938 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3939 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3948 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3949 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3950 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3952 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3953 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3954 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3955 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3957 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3958 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3959 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3961 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3962 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3963 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3964 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3965 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3967 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3968 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3969 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3970 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3972 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3973 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3974 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3975 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3977 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3978 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3979 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3981 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3982 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3983 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3984 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3985 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3987 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3990 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3991 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3994 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3997 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4000 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4003 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4006 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4009 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4012 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4013 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4016 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4017 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4020 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4021 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4024 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4027 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4030 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4031 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4039 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4040 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4041 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4042 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4045 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4046 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4047 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4048 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4049 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4052 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4055 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4056 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4057 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4058 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4059 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4060 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4061 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4064 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4065 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4066 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4067 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4068 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4069 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4070 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4071 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4074 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4077 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4086 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4087 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4088 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4089 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4090 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4092 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4093 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4094 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4096 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4098 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4099 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4100 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4103 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4104 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4105 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4107 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4108 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4109 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4110 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4112 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4113 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4114 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4115 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4116 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4117 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4118 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4119 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4122 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4123 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4124 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4125 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4127 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4128 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4129 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4130 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4132 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4134 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4135 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4136 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4137 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4138 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4140 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4141 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4142 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4144 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4145 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4148 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4149 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4150 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4151 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4152 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4153 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4154 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4155 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4156 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4157 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4158 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4159 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4160 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4161 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4162 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4165 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4166 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4167 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4168 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4169 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4170 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4171 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4172 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4173 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4174 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4175 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4176 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4179 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4180 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4181 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4182 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4183 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4184 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4185 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4186 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4189 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4190 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4191 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4193 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4194 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4196 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4197 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4198 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4199 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4201 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4203 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4204 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4205 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4207 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4208 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4210 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4211 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4212 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4213 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4215 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4219 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4220 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4221 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4223 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4224 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4225 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4226 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4227 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4229 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4230 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4231 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4233 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4234 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4235 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4236 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4237 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4240 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4241 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4242 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4244 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4245 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4247 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4248 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4249 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4250 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4252 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4254 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4255 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4256 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4258 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4259 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4261 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4262 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4263 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4264 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4266 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4270 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4271 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4272 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4274 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4275 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4276 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4277 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4278 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4280 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4281 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4282 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4284 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4285 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4286 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4287 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4288 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4291 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4292 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4293 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4294 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4295 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4296 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4297 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4298 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4299 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4300 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4301 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4302 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4303 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4304 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4307 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4310 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4313 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4316 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4319 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4322 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4325 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4328 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4331 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4332 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4333 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4334 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4335 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4336 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4337 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4338 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4339 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4341 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4342 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4343 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4345 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4346 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4347 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4348 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4349 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4350 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4353 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4354 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4355 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4356 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4357 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4358 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4360 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4361 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4362 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4363 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4364 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4365 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4368 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4377 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4378 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4379 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4382 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4383 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4384 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4385 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4386 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4387 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4390 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4393 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4396 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4399 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4402 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4405 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4408 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4411 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4420 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4423 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4424 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4425 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4426 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4429 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4432 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4433 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4442 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4443 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4444 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4445 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4446 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4447 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4448 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4449 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4451 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4454 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4455 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4456 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4457 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4458 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4459 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4460 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4461 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4463 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4464 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4465 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4467 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4470 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4479 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4480 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4482 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4483 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4484 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4486 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4487 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4488 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4490 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4491 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4492 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4493 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4494 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4495 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4496 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4497 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4498 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4501 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4502 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4504 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4505 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4506 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4508 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4509 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4510 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4512 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4513 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4514 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4515 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4516 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4517 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4518 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4519 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4520 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4523 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4524 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4526 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4527 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4528 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4530 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4531 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4532 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4534 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4535 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4536 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4537 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4538 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4539 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4540 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4541 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4542 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4545 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4546 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4548 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4549 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4550 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4552 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4553 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4554 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4556 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4557 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4558 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4559 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4560 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4561 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4562 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4563 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4564 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4567 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4568 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4569 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4570 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4571 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4573 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4574 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4575 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4576 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4577 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4579 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4580 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4581 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4582 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4583 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4585 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4586 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4587 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4588 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4589 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4591 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4592 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4593 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4594 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4595 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4597 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4598 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4599 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4600 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4601 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4603 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4604 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4605 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4608 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4609 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4610 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4611 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4612 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4614 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4615 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4616 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4617 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4618 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4620 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4621 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4622 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4623 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4624 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4626 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4627 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4628 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4629 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4630 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4632 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4633 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4634 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4635 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4636 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4638 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4639 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4640 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4641 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4642 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4644 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4645 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4646 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4649 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4650 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4651 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4652 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4653 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4655 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4656 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4657 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4658 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4659 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4661 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4662 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4663 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4664 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4665 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4667 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4668 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4669 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4670 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4671 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4673 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4674 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4675 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4676 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4677 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4679 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4680 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4681 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4682 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4683 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4685 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4686 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4687 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4690 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4691 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4692 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4693 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4694 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4696 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4697 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4698 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4699 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4700 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4702 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4703 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4704 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4705 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4706 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4708 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4709 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4710 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4711 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4712 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4714 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4715 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4716 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4717 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4718 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4720 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4721 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4722 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4723 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4724 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4726 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4727 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4728 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4731 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4732 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4733 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4734 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4735 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4737 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4738 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4739 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4740 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4741 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4743 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4744 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4745 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4746 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4747 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4749 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4750 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4751 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4752 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4753 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4755 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4756 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4757 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4758 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4759 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4761 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4762 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4763 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4766 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4767 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4768 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4769 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4770 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4772 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4773 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4774 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4775 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4776 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4778 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4779 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4780 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4781 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4782 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4784 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4785 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4786 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4787 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4788 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4790 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4791 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4792 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4793 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4794 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4796 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4797 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4798 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4801 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4802 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4803 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4804 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4805 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4807 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4808 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4809 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4810 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4811 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4813 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4814 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4815 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4816 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4817 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4819 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4820 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4821 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4822 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4823 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4825 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4826 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4827 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4828 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4829 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4831 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4832 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4833 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4836 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4837 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4838 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4839 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4840 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4842 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4843 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4844 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4845 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4846 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4848 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4849 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4850 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4851 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4852 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4854 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4855 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4856 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4857 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4858 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4860 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4861 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4862 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4863 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4864 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4866 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4867 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4868 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4871 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4872 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4873 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4875 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4876 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4877 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4879 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4881 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4882 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4883 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4884 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4885 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4887 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4888 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4889 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4890 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4891 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4893 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4894 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4895 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4896 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4899 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4900 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4901 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4903 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4904 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4905 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4907 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4909 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4910 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4911 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4912 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4913 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4915 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4916 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4917 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4918 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4919 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4921 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4922 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4923 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4924 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4927 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4928 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4929 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4931 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4932 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4933 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4935 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4937 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4938 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4939 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4940 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4941 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4943 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4944 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4945 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4946 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4947 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4949 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4950 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4951 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4952 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4955 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4956 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4957 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4958 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4959 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4960 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4961 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4964 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4965 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4966 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4967 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4968 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4969 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4970 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4973 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4974 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4975 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4976 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4977 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4978 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4979 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4982 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4983 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4984 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4985 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4986 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4987 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4988 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4989 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4990 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4992 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4993 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4994 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4995 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4996 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4997 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4998 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4999 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5000 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5002 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5003 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5004 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5005 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5006 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5007 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5008 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5009 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5010 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5012 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5013 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5014 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5015 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5016 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5017 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5018 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5019 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5020 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5023 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5024 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5025 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5026 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5027 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5028 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5029 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5030 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5031 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5033 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5034 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5035 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5036 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5037 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5038 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5039 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5040 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5041 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5043 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5044 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5045 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5046 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5047 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5048 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5049 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5050 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5051 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5053 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5054 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5055 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5056 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5057 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5058 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5059 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5060 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5061 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5064 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5065 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5066 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5067 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5068 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5069 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5070 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5071 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5072 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5074 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5075 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5076 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5077 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5078 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5079 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5080 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5081 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5082 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5084 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5085 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5086 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5087 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5088 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5089 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5090 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5091 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5092 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5094 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5095 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5096 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5097 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5098 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5099 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5100 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5101 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5102 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5105 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5106 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5107 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5108 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5109 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5110 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5111 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5112 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5113 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5115 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5116 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5117 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5118 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5119 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5120 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5121 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5122 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5123 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5125 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5126 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5127 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5128 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5129 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5130 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5131 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5132 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5133 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5135 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5136 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5137 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5138 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5139 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5140 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5141 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5142 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5143 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5146 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5147 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5148 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5149 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5150 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5151 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5152 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5153 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5154 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5156 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5157 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5158 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5159 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5160 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5161 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5162 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5163 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5164 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5166 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5167 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5168 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5169 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5170 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5171 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5172 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5173 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5174 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5176 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5177 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5178 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5179 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5180 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5181 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5182 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5183 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5184 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5187 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5188 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5189 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5190 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5191 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5192 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5193 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5194 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5195 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5197 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5198 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5199 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5200 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5201 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5202 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5203 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5204 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5205 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5207 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5208 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5209 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5210 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5211 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5212 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5213 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5214 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5215 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5217 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5218 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5219 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5220 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5221 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5222 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5223 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5224 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5225 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5228 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5229 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5230 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5231 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5232 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5233 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5234 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5235 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5236 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5238 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5239 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5240 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5241 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5242 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5243 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5244 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5245 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5246 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5248 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5249 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5250 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5251 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5252 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5253 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5254 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5255 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5256 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5258 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5259 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5260 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5261 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5262 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5263 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5264 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5265 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5266 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5269 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5272 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5281 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5282 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5283 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5286 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5287 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5288 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5289 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5291 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5292 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5293 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5295 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5296 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5299 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5302 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5304 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5305 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5306 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5308 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5309 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5310 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5311 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5312 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5313 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5314 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5317 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5320 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5323 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5326 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5329 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5332 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5335 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5338 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5341 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5342 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5343 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5344 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5346 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5347 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5348 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5349 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5350 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5352 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5353 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5354 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5355 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5358 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5361 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5362 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5363 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5364 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5365 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5366 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5367 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5368 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5369 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5370 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5371 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5372 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5373 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5374 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5375 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5376 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5377 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5378 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5379 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5380 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5381 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5382 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5383 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5384 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5387 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5388 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5389 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5390 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5391 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5392 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5393 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5394 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5395 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5396 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5397 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5398 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5399 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5402 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5403 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5404 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5405 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5406 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5407 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5408 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5409 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5410 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5411 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5412 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5413 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5414 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5415 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5416 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5417 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5418 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5419 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5420 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5421 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5422 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5423 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5424 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5425 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5428 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5431 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5441 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5443 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5444 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5445 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5447 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5448 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5449 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5451 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5452 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5453 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5455 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5457 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5458 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5459 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5461 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5462 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5465 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5467 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5468 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5469 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5471 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5472 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5473 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5475 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5476 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5477 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5479 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5481 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5482 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5483 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5485 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5486 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5489 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5491 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5492 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5493 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5495 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5496 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5497 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5499 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5500 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5501 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5503 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5505 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5506 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5507 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5509 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5510 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5513 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5515 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5516 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5517 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5519 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5520 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5521 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5523 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5524 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5525 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5527 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5529 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5530 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5531 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5533 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5534 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5537 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5539 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5540 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5541 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5543 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5544 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5545 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5547 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5548 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5549 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5551 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5553 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5554 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5555 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5557 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5558 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5561 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5563 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5564 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5565 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5567 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5568 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5569 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5571 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5572 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5573 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5575 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5577 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5578 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5579 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5581 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5582 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5585 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5587 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5588 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5589 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5591 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5592 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5593 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5595 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5596 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5597 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5599 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5601 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5602 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5603 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5605 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5606 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5609 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5611 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5612 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5613 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5615 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5616 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5617 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5619 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5620 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5621 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5623 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5625 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5626 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5627 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5629 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5630 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5634 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5635 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5636 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5637 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5638 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5639 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5640 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5641 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5642 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5643 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5644 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5645 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5646 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5649 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5650 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5651 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5652 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5653 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5654 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5655 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5656 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5657 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5658 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5661 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5662 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5663 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5664 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5665 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5668 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5669 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5670 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5671 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5672 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5673 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5674 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5675 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5677 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5680 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5684 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5687 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5690 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5693 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5696 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5699 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5702 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5705 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5710 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5713 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5716 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5719 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5722 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5725 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5728 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5731 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5736 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5739 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5742 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5745 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5748 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5751 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5754 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5757 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5760 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5763 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5766 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5769 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5772 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5775 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5778 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5781 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5786 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5789 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5792 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5795 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5798 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5801 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5804 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5807 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5812 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5814 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5815 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5816 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5817 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5818 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5819 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5821 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5824 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5826 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5827 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5828 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5829 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5830 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5831 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5833 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5836 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5838 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5839 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5840 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5841 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5842 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5843 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5845 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5848 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5850 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5851 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5852 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5853 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5854 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5855 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5857 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5860 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5862 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5863 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5864 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5865 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5866 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5867 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5869 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5872 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5874 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5875 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5876 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5877 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5878 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5879 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5881 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5884 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5886 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5887 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5888 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5889 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5890 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5891 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5893 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5896 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5898 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5899 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5900 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5901 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5902 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5903 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5905 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5910 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5912 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5913 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5914 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5915 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5916 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5917 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5919 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5922 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5924 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5925 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5926 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5927 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5928 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5929 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5931 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5934 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5936 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5937 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5938 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5939 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5940 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5941 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5943 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5946 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5948 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5949 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5950 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5951 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5952 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5953 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5955 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5958 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5960 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5961 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5962 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5963 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5964 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5965 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5967 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5970 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5972 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5973 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5974 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5975 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5976 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5977 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5979 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5982 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5984 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5985 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5986 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5987 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5988 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5989 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5991 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5994 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5996 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5997 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5998 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5999 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6000 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6001 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6003 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6006 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6008 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6009 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6010 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6011 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6012 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6013 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6015 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6018 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6020 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6021 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6022 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6023 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6024 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6025 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6027 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6030 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6032 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6033 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6034 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6035 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6036 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6037 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6039 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6042 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6044 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6045 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6046 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6047 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6048 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6049 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6051 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6054 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6056 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6057 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6058 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6059 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6060 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6061 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6063 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6066 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6068 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6069 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6070 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6071 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6072 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6073 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6075 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6078 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6080 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6081 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6082 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6083 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6084 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6085 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6087 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6090 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6092 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6093 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6094 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6095 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6096 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6097 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6099 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6109 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6110 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6111 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6112 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6113 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6114 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6115 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6116 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6117 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6120 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6121 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6122 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6123 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6124 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6125 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6126 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6127 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6128 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6131 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6132 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6133 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6134 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6135 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6136 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6137 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6138 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6139 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6140 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6141 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6142 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6143 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6144 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6145 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6146 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6148 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6149 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6150 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6151 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6153 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6154 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6155 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6156 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6159 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6160 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6161 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6162 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6165 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6166 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6167 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6168 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6171 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6172 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6173 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6174 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6175 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6176 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6177 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6178 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6179 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6180 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6181 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6182 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6183 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6184 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6187 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6188 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6189 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6191 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6192 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6193 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6194 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6196 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6197 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6200 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6201 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6202 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6203 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6204 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6205 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6209 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6210 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6211 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6212 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6213 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6216 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6217 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6218 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6221 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6222 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6223 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6224 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6227 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6228 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6229 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6230 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6233 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6234 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6235 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6236 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6237 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6240 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6241 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6242 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6245 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6246 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6247 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6248 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6251 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6252 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6253 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6254 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6257 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6258 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6259 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6260 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6261 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6264 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6265 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6266 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6269 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6270 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6271 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6272 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6275 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6276 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6277 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6278 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6281 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6282 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6283 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6284 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6287 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6288 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6289 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6292 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6293 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6294 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6295 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6298 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6299 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6300 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6301 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6304 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6305 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6306 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6307 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6310 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6311 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6312 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6315 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6316 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6317 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6318 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6321 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6322 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6323 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6324 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6328 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6331 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6332 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6333 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6334 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6335 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6336 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6337 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6338 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6339 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6340 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6341 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6342 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6343 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6344 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6345 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6348 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6349 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6350 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6351 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6352 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6353 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6354 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6355 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6356 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6357 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6358 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6359 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6360 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6361 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6362 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6365 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6366 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6367 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6368 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6369 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6370 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6371 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6372 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6373 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6374 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6375 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6376 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6377 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6378 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6379 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6382 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6383 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6384 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6385 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6386 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6387 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6388 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6389 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6390 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6391 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6392 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6393 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6394 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6395 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6396 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6399 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6400 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6401 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6402 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6403 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6404 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6405 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6406 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6407 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6408 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6409 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6410 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6411 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6412 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6413 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6414 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6415 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6416 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6417 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6418 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6419 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6420 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6421 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6422 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6423 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6424 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6425 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6426 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6427 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6428 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6429 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6430 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6433 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6434 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6435 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6436 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6437 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6438 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6439 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6440 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6441 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6442 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6443 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6444 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6445 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6446 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6447 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6448 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6449 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6450 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6451 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6452 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6453 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6454 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6455 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6456 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6457 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6458 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6459 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6460 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6461 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6462 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6463 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6464 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6467 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6468 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6469 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6470 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6471 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6472 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6473 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6474 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6475 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6476 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6477 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6478 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6479 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6480 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6481 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6482 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6483 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6484 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6485 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6486 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6487 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6488 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6489 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6490 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6491 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6492 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6493 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6494 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6495 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6496 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6497 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6498 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6501 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6502 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6503 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6504 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6505 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6506 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6507 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6508 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6509 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6510 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6511 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6512 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6513 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6514 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6515 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6516 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6517 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6518 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6519 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6520 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6521 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6522 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6523 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6524 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6525 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6526 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6527 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6528 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6529 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6530 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6531 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6532 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6535 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6536 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6537 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6538 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6539 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6540 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6541 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6542 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6543 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6544 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6545 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6546 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6547 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6548 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6549 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6550 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6551 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6552 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6553 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6554 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6555 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6556 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6557 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6558 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6559 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6560 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6561 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6562 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6563 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6564 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6565 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6566 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6569 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6570 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6571 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6572 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6573 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6574 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6575 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6576 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6577 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6578 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6579 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6580 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6581 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6582 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6583 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6584 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6585 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6586 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6587 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6588 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6589 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6590 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6591 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6592 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6593 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6594 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6595 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6596 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6597 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6598 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6599 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6600 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6603 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6604 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6605 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6606 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6607 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6608 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6609 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6610 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6611 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6612 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6613 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6614 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6615 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6616 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6617 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6618 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6619 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6620 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6621 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6622 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6623 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6624 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6625 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6626 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6627 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6628 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6629 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6630 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6631 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6632 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6633 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6634 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6637 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6638 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6639 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6640 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6641 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6642 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6643 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6644 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6645 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6646 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6647 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6648 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6649 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6650 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6651 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6652 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6653 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6654 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6655 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6656 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6657 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6658 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6659 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6660 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6661 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6662 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6663 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6664 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6665 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6666 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6667 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6668 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6671 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6672 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6673 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6674 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6675 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6676 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6677 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6678 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6679 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6680 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6681 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6682 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6683 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6684 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6685 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6686 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6687 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6688 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6689 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6690 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6691 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6692 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6693 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6694 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6695 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6696 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6697 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6698 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6699 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6700 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6701 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6702 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6705 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6706 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6707 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6708 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6709 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6710 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6711 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6712 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6713 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6714 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6715 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6716 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6717 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6718 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6719 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6720 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6721 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6722 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6723 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6724 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6725 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6726 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6727 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6728 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6729 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6730 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6731 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6732 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6733 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6734 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6735 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6736 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6739 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6740 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6741 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6742 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6743 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6744 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6745 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6746 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6747 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6748 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6749 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6750 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6751 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6752 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6753 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6754 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6755 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6756 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6757 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6758 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6759 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6760 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6761 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6762 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6763 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6764 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6765 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6766 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6767 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6768 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6769 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6770 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6773 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6774 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6775 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6776 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6777 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6778 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6779 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6780 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6781 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6782 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6783 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6784 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6785 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6786 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6787 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6788 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6789 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6790 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6791 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6792 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6793 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6794 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6795 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6796 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6797 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6798 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6799 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6800 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6801 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6802 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6803 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6804 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6807 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6808 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6809 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6810 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6811 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6812 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6813 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6814 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6815 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6816 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6817 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6818 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6819 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6820 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6821 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6822 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6823 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6824 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6825 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6826 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6827 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6828 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6829 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6830 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6831 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6832 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6833 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6834 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6835 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6836 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6837 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6838 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6841 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6842 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6843 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6844 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6845 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6846 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6847 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6848 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6849 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6850 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6851 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6852 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6853 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6854 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6855 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6856 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6857 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6858 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6859 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6860 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6861 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6862 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6863 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6864 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6865 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6866 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6867 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6868 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6869 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6870 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6871 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6872 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6875 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6876 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6877 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6878 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6879 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6880 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6881 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6882 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6883 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6884 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6885 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6886 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6887 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6888 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6889 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6890 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6891 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6892 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6893 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6894 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6895 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6896 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6897 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6898 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6899 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6900 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6901 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6902 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6903 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6904 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6905 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6906 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6909 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6910 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6911 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6912 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6913 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6914 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6915 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6916 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6917 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6918 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6919 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6920 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6921 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6922 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6923 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6924 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6925 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6926 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6927 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6928 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6929 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6930 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6931 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6932 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6933 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6934 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6935 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6936 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6937 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6938 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6939 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6940 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6943 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6944 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6945 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6946 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6947 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6948 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6949 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6950 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6951 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6952 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6953 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6954 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6955 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6956 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6957 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6958 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6959 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6960 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6961 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6962 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6963 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6964 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6965 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6966 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6967 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6968 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6969 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6970 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6971 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6972 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6973 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6974 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6977 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6978 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6979 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6980 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6981 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6982 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6983 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6984 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6985 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6986 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6987 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6988 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6989 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6990 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6991 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6992 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6993 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6994 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6995 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6996 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6997 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6998 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6999 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7000 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7001 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7002 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7003 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7004 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7005 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7006 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7007 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7008 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7011 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7012 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7013 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7014 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7015 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7016 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7017 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7018 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7019 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7020 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7021 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7022 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7023 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7024 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7025 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7026 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7027 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7028 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7029 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7030 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7031 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7032 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7033 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7034 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7035 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7036 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7037 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7038 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7039 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7040 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7041 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7042 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7045 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7046 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7047 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7048 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7049 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7050 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7051 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7052 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7053 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7054 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7055 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7056 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7057 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7058 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7059 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7060 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7061 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7062 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7063 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7064 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7065 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7066 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7067 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7068 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7069 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7070 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7071 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7072 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7073 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7074 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7075 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7076 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7079 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7080 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7081 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7082 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7083 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7084 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7085 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7086 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7087 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7088 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7089 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7090 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7091 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7092 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7093 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7094 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7095 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7096 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7097 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7098 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7099 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7100 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7101 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7102 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7103 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7104 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7105 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7106 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7107 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7108 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7109 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7110 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7113 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7114 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7115 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7116 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7117 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7118 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7119 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7120 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7121 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7122 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7123 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7124 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7125 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7126 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7127 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7128 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7129 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7130 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7131 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7132 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7133 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7134 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7135 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7136 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7137 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7138 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7139 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7140 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7141 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7142 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7143 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7144 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7147 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7148 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7149 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7150 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7151 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7152 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7153 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7154 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7155 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7156 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7157 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7158 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7159 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7160 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7161 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7162 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7163 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7164 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7165 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7166 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7167 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7168 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7169 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7170 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7171 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7172 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7173 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7174 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7175 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7176 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7177 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7178 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7181 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7182 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7183 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7184 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7185 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7186 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7187 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7188 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7189 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7190 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7191 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7192 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7193 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7194 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7195 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7196 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7197 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7198 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7199 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7200 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7201 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7202 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7203 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7204 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7205 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7206 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7207 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7208 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7209 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7210 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7211 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7212 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7215 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7216 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7217 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7218 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7219 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7220 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7221 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7222 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7223 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7224 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7225 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7226 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7227 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7228 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7229 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7230 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7231 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7232 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7233 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7234 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7235 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7236 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7237 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7238 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7239 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7240 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7241 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7242 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7243 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7244 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7245 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7246 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7249 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7250 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7251 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7252 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7253 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7254 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7255 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7256 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7257 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7258 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7259 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7260 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7261 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7262 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7263 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7264 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7265 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7266 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7267 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7268 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7269 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7270 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7271 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7272 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7273 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7274 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7275 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7276 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7277 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7278 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7279 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7280 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7283 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7284 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7285 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7286 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7287 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7288 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7289 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7290 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7291 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7292 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7293 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7294 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7295 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7296 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7297 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7298 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7299 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7300 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7301 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7302 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7303 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7304 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7305 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7306 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7307 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7308 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7309 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7310 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7311 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7312 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7313 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7314 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7317 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7318 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7319 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7320 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7321 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7322 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7323 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7324 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7325 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7326 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7327 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7328 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7329 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7330 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7331 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7332 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7333 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7334 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7335 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7336 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7337 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7338 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7339 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7340 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7341 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7342 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7343 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7344 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7345 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7346 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7347 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7348 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7357 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7358 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7359 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7361 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7362 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7363 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7364 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7366 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7367 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7368 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7369 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7370 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7371 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7372 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7373 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7374 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7375 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7378 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7379 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7380 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7381 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7382 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7383 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7386 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7387 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7388 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7389 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7390 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7391 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7392 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7393 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7396 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7399 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7402 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7405 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7408 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7410 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7411 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7412 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7414 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7416 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7417 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7418 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7420 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7422 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7423 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7424 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7426 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7427 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7430 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7431 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7432 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7441 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7442 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7443 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7444 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7445 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7446 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7447 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7448 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7449 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7450 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7451 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7452 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7453 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7454 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7457 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7458 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7459 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7460 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7461 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7462 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7463 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7465 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7466 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7467 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7468 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7469 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7472 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7473 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7475 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7476 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7477 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7478 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7479 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7480 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7481 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7482 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7483 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7484 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7486 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7489 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7490 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7493 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7496 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7497 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7498 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7499 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7500 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7501 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7502 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7503 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7504 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7505 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7506 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7507 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7508 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7509 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7512 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7513 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7514 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7515 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7516 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7517 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7518 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7519 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7522 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7523 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7524 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7527 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7536 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7537 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7538 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7539 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7540 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7541 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7542 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7543 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7544 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7545 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7548 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7551 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7552 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7555 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7556 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7557 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7558 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7559 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7560 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7561 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7562 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7563 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7564 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7565 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7566 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7567 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7568 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7569 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7572 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7573 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7574 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7575 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7576 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7577 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7578 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7580 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7581 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7582 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7584 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7587 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7588 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7589 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7590 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7591 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7592 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7593 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7594 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7595 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7596 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7597 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7598 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7601 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7602 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7603 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7604 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7605 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7606 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7607 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7608 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7609 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7611 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7620 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7622 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7623 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7624 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7625 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7626 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7627 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7628 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7629 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7630 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7631 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7632 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7633 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7634 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7635 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7636 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7637 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7638 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7641 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7642 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7643 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7644 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7646 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7647 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7648 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7650 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7651 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7652 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7653 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7654 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7655 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7656 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7657 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7658 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7659 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7660 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7661 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7662 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7663 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7664 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7665 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7666 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7667 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7668 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7669 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7670 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7671 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7672 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7681 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7682 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7683 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7684 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7686 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7687 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7688 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7691 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7694 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7697 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7698 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7699 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7700 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7703 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7704 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7705 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7706 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7707 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7708 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7709 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7710 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7711 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7712 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7715 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7718 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7719 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7721 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7722 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7723 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7724 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7725 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7728 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7733 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7734 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7737 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7738 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7741 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7742 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7745 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7746 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7749 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7750 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7753 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7754 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7757 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7758 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7761 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7762 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7764 #ifde‡
STM32F10X_CL


7769 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7770 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7771 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7772 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7773 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7774 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7775 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7776 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7777 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7778 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7779 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7780 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7781 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7782 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7783 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7784 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7785 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7786 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7787 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7788 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7790 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7791 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7792 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7793 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7794 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7795 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7796 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7799 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7800 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7801 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7802 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7803 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7804 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7805 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7806 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7807 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7808 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7809 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7810 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7811 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7812 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7815 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7818 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7821 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7822 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7823 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7824 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7825 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7826 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7827 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7828 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7831 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7834 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7835 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7836 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7837 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7838 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7839 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7840 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7841 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7842 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7843 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7844 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7847 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7848 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7851 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7865 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7866 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7867 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7868 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7869 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7870 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7871 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7874 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7875 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7876 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7877 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7878 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7881 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7882 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7885 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7888 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7891 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7892 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7893 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7894 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7895 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7896 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7897 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7898 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7899 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7900 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7903 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7906 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7907 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7908 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7909 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7910 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7911 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7912 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7913 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7914 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7915 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7918 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7921 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7922 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7923 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7924 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7925 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7926 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7927 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7928 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7929 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7930 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7933 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7940 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7941 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7942 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7943 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7946 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7947 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7948 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7951 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7952 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7953 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7956 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7957 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7958 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7961 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7962 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7963 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7966 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7969 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7972 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7975 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7978 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7981 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7988 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7989 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7990 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7991 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7992 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7993 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7996 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7999 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8002 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8003 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8006 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8009 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8010 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8013 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8016 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8019 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8026 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8027 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8028 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8029 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8030 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8031 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8032 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8033 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8034 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8035 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8036 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8037 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8038 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8039 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8040 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8041 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8042 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8043 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8044 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8045 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8046 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8047 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8048 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8049 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8050 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8051 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8052 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8053 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8054 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8055 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8056 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8057 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8058 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8059 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8060 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8061 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8062 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8063 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8066 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8069 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8072 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8075 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8078 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8079 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8080 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8081 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8083 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8084 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8085 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8086 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8087 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8088 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8089 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8090 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8091 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8092 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8093 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8094 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8095 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8096 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8097 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8098 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8099 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8100 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8101 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8102 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8103 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8104 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8105 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8106 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8107 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8108 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8109 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8110 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8111 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8112 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8113 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8114 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8117 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8118 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8119 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8120 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8121 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8122 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8123 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8124 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8125 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8126 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8127 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8128 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8129 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8130 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8131 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8132 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8133 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8134 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8135 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8136 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8137 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8138 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8139 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8140 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8143 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8144 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8145 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8146 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8147 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8148 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8149 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8150 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8151 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8152 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8153 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8154 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8155 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8156 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8157 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8160 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8161 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8162 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8163 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8166 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8169 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8172 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8175 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8186 #ifde‡
USE_STDPERIPH_DRIVER


8187 
	~"°m32f10x_c⁄f.h
"

8194 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8196 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8198 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8200 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8202 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8204 
	#READ_REG
(
REG
Ë((REG))

	)

8206 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8212 #ifde‡
__˝lu•lus


	@codeboot/Libararies/CMSIS/system_stm32f10x.c

33 
	~"°m32f10x.h
"

74 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
)

76 
	#SYSCLK_FREQ_24MHz
 24000000

	)

83 
	#SYSCLK_FREQ_72MHz
 72000000

	)

88 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
)

93 
	#VECT_TAB_OFFSET
 0x0

	)

115 #ifde‡
SYSCLK_FREQ_HSE


116 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

117 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


118 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

119 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


120 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

121 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


122 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

123 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


124 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

125 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


126 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

128 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VÆue
;

131 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

140 
SëSysClock
();

142 #ifde‡
SYSCLK_FREQ_HSE


143 
SëSysClockToHSE
();

144 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


145 
SëSysClockTo24
();

146 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


147 
SëSysClockTo36
();

148 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


149 
SëSysClockTo48
();

150 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


151 
SëSysClockTo56
();

152 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


153 
SëSysClockTo72
();

156 #ifde‡
DATA_IN_ExtSRAM


157 
Sy°emInô_ExtMemCé
();

176 
	$Sy°emInô
 ()

180 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

183 #i‚de‡
STM32F10X_CL


184 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

186 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

190 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

193 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

196 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

198 #ifde‡
STM32F10X_CL


200 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

203 
RCC
->
CIR
 = 0x00FF0000;

206 
RCC
->
CFGR2
 = 0x00000000;

207 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

209 
RCC
->
CIR
 = 0x009F0000;

212 
RCC
->
CFGR2
 = 0x00000000;

215 
RCC
->
CIR
 = 0x009F0000;

218 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
)

219 #ifde‡
DATA_IN_ExtSRAM


220 
	`Sy°emInô_ExtMemCé
();

226 
	`SëSysClock
();

229 #ifde‡
VECT_TAB_SRAM


230 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

232 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

235 
	}
}

243 
	$Sy°emC‹eClockUpd©e
 ()

245 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

247 #ifde‡ 
STM32F10X_CL


248 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

251 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

252 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

256 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

258 
tmp
)

261 
Sy°emC‹eClock
 = 
HSI_VÆue
;

264 
Sy°emC‹eClock
 = 
HSE_VÆue
;

269 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

270 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

272 #i‚de‡
STM32F10X_CL


273 
∂lmuŒ
 = (Öllmull >> 18) + 2;

275 i‡(
∂lsour˚
 == 0x00)

278 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

282 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

283 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

285 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

288 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

290 
Sy°emC‹eClock
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

294 
Sy°emC‹eClock
 = 
HSE_VÆue
 * 
∂lmuŒ
;

299 
∂lmuŒ
 =Öllmull >> 18;

301 i‡(
∂lmuŒ
 != 0x0D)

303 
∂lmuŒ
 += 2;

307 
∂lmuŒ
 = 13 / 2;

310 i‡(
∂lsour˚
 == 0x00)

313 
Sy°emC‹eClock
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

319 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

320 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

322 i‡(
¥ediv1sour˚
 == 0)

325 
Sy°emC‹eClock
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

331 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

332 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

333 
Sy°emC‹eClock
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

340 
Sy°emC‹eClock
 = 
HSI_VÆue
;

346 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

348 
Sy°emC‹eClock
 >>
tmp
;

349 
	}
}

356 
	$SëSysClock
()

358 #ifde‡
SYSCLK_FREQ_HSE


359 
	`SëSysClockToHSE
();

360 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


361 
	`SëSysClockTo24
();

362 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


363 
	`SëSysClockTo36
();

364 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


365 
	`SëSysClockTo48
();

366 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


367 
	`SëSysClockTo56
();

368 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


369 
	`SëSysClockTo72
();

374 
	}
}

382 #ifde‡
DATA_IN_ExtSRAM


392 
	$Sy°emInô_ExtMemCé
()

398 
RCC
->
AHBENR
 = 0x00000114;

401 
RCC
->
APB2ENR
 = 0x000001E0;

409 
GPIOD
->
CRL
 = 0x44BB44BB;

410 
GPIOD
->
CRH
 = 0xBBBBBBBB;

412 
GPIOE
->
CRL
 = 0xB44444BB;

413 
GPIOE
->
CRH
 = 0xBBBBBBBB;

415 
GPIOF
->
CRL
 = 0x44BBBBBB;

416 
GPIOF
->
CRH
 = 0xBBBB4444;

418 
GPIOG
->
CRL
 = 0x44BBBBBB;

419 
GPIOG
->
CRH
 = 0x44444B44;

424 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

425 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

426 
	}
}

429 #ifde‡
SYSCLK_FREQ_HSE


437 
	$SëSysClockToHSE
()

439 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

443 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

448 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

449 
SèπUpCou¡î
++;

450 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

452 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

454 
HSESètus
 = (
uöt32_t
)0x01;

458 
HSESètus
 = (
uöt32_t
)0x00;

461 i‡(
HSESètus
 =(
uöt32_t
)0x01)

464 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


466 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

469 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

471 #i‚de‡
STM32F10X_CL


472 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

474 i‡(
HSE_VÆue
 <= 24000000)

476 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

480 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

486 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

489 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

492 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

495 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

496 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

499 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

507 
	}
}

508 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


516 
	$SëSysClockTo24
()

518 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

522 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

527 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

528 
SèπUpCou¡î
++;

529 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

531 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

533 
HSESètus
 = (
uöt32_t
)0x01;

537 
HSESètus
 = (
uöt32_t
)0x00;

540 i‡(
HSESètus
 =(
uöt32_t
)0x01)

542 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL


544 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

547 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

548 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

552 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

555 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

558 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

560 #ifde‡
STM32F10X_CL


563 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

564 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

565 
RCC_CFGR_PLLMULL6
);

569 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

570 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

571 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

572 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

575 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

577 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

580 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

582 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

583 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

586 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

587 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

591 
RCC
->
CR
 |
RCC_CR_PLLON
;

594 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

599 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

600 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

603 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

611 
	}
}

612 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


620 
	$SëSysClockTo36
()

622 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

626 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

631 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

632 
SèπUpCou¡î
++;

633 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

635 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

637 
HSESètus
 = (
uöt32_t
)0x01;

641 
HSESètus
 = (
uöt32_t
)0x00;

644 i‡(
HSESètus
 =(
uöt32_t
)0x01)

647 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

650 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

651 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

654 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

657 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

660 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

662 #ifde‡
STM32F10X_CL


666 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

667 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

668 
RCC_CFGR_PLLMULL9
);

673 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

674 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

675 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

676 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

679 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

681 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

687 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

688 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

692 
RCC
->
CR
 |
RCC_CR_PLLON
;

695 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

700 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

701 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

704 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

712 
	}
}

713 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


721 
	$SëSysClockTo48
()

723 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

727 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

732 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

733 
SèπUpCou¡î
++;

734 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

736 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

738 
HSESètus
 = (
uöt32_t
)0x01;

742 
HSESètus
 = (
uöt32_t
)0x00;

745 i‡(
HSESètus
 =(
uöt32_t
)0x01)

748 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

751 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

752 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

755 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

758 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

761 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

763 #ifde‡
STM32F10X_CL


768 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

769 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

770 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

771 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

774 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

776 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

782 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

783 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

784 
RCC_CFGR_PLLMULL6
);

787 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

788 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

792 
RCC
->
CR
 |
RCC_CR_PLLON
;

795 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

800 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

801 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

804 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

812 
	}
}

814 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


822 
	$SëSysClockTo56
()

824 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

828 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

833 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

834 
SèπUpCou¡î
++;

835 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

837 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

839 
HSESètus
 = (
uöt32_t
)0x01;

843 
HSESètus
 = (
uöt32_t
)0x00;

846 i‡(
HSESètus
 =(
uöt32_t
)0x01)

849 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

852 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

853 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

856 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

859 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

862 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

864 #ifde‡
STM32F10X_CL


869 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

870 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

871 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

872 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

875 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

877 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

883 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

884 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

885 
RCC_CFGR_PLLMULL7
);

888 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

889 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

894 
RCC
->
CR
 |
RCC_CR_PLLON
;

897 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

902 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

903 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

906 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

914 
	}
}

916 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


924 
	$SëSysClockTo72
()

926 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

930 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

935 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

936 
SèπUpCou¡î
++;

937 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

939 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

941 
HSESètus
 = (
uöt32_t
)0x01;

945 
HSESètus
 = (
uöt32_t
)0x00;

948 i‡(
HSESètus
 =(
uöt32_t
)0x01)

951 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

954 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

955 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

959 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

962 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

965 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

967 #ifde‡
STM32F10X_CL


972 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

973 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

974 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

975 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

978 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

980 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

986 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

987 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

988 
RCC_CFGR_PLLMULL9
);

991 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

992 
RCC_CFGR_PLLMULL
));

993 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

997 
RCC
->
CR
 |
RCC_CR_PLLON
;

1000 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

1005 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

1006 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

1009 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1017 
	}
}

	@codeboot/Libararies/CMSIS/system_stm32f10x.h

32 #i‚de‡
__SYSTEM_STM32F10X_H


33 
	#__SYSTEM_STM32F10X_H


	)

35 #ifde‡
__˝lu•lus


52 
uöt32_t
 
Sy°emC‹eClock
;

78 
Sy°emInô
();

79 
Sy°emC‹eClockUpd©e
();

84 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt8_t
 
NVIC_IRQCh™√l
;

56 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

64 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

67 } 
	tNVIC_InôTy≥Def
;

114 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

115 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

116 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

117 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

126 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

127 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

128 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

129 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

130 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

140 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

142 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

144 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

146 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

148 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

151 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

152 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

157 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

159 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

161 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

171 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

172 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

173 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

174 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

195 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

196 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

197 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

198 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

199 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

201 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
ADC_Mode
;

55 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

59 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

63 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

67 
uöt32_t
 
ADC_D©aAlign
;

70 
uöt8_t
 
ADC_NbrOfCh™√l
;

73 }
	tADC_InôTy≥Def
;

82 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

83 ((
PERIPH
Ë=
ADC2
) || \

84 ((
PERIPH
Ë=
ADC3
))

86 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

87 ((
PERIPH
Ë=
ADC3
))

93 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

94 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

95 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

96 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

97 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

98 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

99 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

100 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

101 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

102 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

104 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

105 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

106 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

107 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

110 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

112 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

122 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

132 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

139 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

161 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

162 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

163 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

164 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

173 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

174 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

175 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

176 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

177 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

178 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

179 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

180 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

181 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

182 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

183 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

184 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

185 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

186 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

187 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

188 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

189 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

190 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

192 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

193 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

195 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

196 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

212 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

213 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

214 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

215 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

216 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

217 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

218 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

219 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

220 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

221 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

236 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

242 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

246 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

252 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

253 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

273 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

274 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

275 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

276 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

277 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

278 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

289 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

290 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

291 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

292 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

293 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

294 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

295 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

297 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

298 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

312 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

313 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

314 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

316 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

318 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

319 ((
IT
Ë=
ADC_IT_JEOC
))

328 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

329 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

330 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

331 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

332 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

333 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

334 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

335 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

336 ((
FLAG
Ë=
ADC_FLAG_STRT
))

345 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

355 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

365 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

375 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

386 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

395 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

405 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

427 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

428 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

429 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

434 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

435 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

436 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

437 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

439 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

440 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

441 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

442 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

444 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

445 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

451 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

452 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

453 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

454 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

455 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

456 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

457 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

458 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

460 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

462 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

464 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

58 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

59 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

60 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

69 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

70 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

71 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

72 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

73 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

74 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

85 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

86 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

87 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

88 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

89 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

90 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

91 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

92 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

93 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

94 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

95 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

96 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

97 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

98 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

99 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

100 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

101 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

102 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

103 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

104 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

105 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

106 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

107 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

108 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

109 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

110 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

111 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

112 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

113 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

114 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

115 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

116 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

117 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

118 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

119 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

120 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

121 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

122 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

123 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

124 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

125 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

126 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

128 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

129 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

130 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

131 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

132 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

133 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

134 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

135 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

136 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

137 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

138 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

139 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

140 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

141 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

143 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

164 
BKP_DeInô
();

165 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

166 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

167 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

169 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

170 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

171 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

172 
FœgSètus
 
BKP_GëFœgSètus
();

173 
BKP_CÀ¨Fœg
();

174 
ITSètus
 
BKP_GëITSètus
();

175 
BKP_CÀ¨ITPídögBô
();

177 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

46 ((
PERIPH
Ë=
CAN2
))

54 
uöt16_t
 
CAN_PªsˇÀr
;

56 
uöt8_t
 
CAN_Mode
;

59 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

66 
uöt8_t
 
CAN_BS2
;

69 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

72 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

75 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

78 
Fun˘i⁄ÆSèã
 
CAN_NART
;

81 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

84 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

86 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

133 
uöt32_t
 
StdId
;

136 
uöt32_t
 
ExtId
;

139 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

145 
uöt8_t
 
DLC
;

148 
uöt8_t
 
D©a
[8];

149 } 
	tC™TxMsg
;

157 
uöt32_t
 
StdId
;

160 
uöt32_t
 
ExtId
;

163 
uöt8_t
 
IDE
;

166 
uöt8_t
 
RTR
;

169 
uöt8_t
 
DLC
;

172 
uöt8_t
 
D©a
[8];

174 
uöt8_t
 
FMI
;

176 } 
	tC™RxMsg
;

190 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

191 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

201 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

202 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

203 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

204 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

206 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

207 ((
MODE
Ë=
CAN_Mode_Sûít
Ë|| ((MODEË=
CAN_Mode_Sûít_Lo›Back
))

216 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

217 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

218 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

219 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

221 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

222 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

231 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

232 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

233 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

234 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

235 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

236 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

237 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

238 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

239 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

240 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

241 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

242 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

243 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

244 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

245 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

246 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

248 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

257 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

258 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

259 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

260 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

261 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

262 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

263 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

264 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

266 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

276 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

285 #i‚de‡
STM32F10X_CL


286 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

288 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

298 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

301 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

302 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

311 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

314 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

315 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

325 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

327 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

328 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

337 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

346 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

347 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

348 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

349 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

359 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

360 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

361 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

371 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

372 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

373 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

383 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

384 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

385 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

386 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

396 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

397 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

399 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

409 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

410 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

420 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

421 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

431 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

432 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

433 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

435 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

436 ((
FLAG
Ë=
CAN_FLAG_BOF
))

446 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

447 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

448 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

449 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

450 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

451 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

452 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

453 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

454 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

455 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

456 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

457 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

458 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

459 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

460 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

461 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

462 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

464 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

465 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

466 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

467 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

468 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

469 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

470 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

472 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

473 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

474 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

475 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

476 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

477 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

498 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

499 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

500 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

501 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

502 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

503 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

505 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

506 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

507 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

508 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

509 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

510 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

512 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

513 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

514 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

515 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

516 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

518 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h

23 #i‚de‡
__STM32F10x_CEC_H


24 
	#__STM32F10x_CEC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
CEC_BôTimögMode
;

53 
uöt16_t
 
CEC_BôPîiodMode
;

55 }
	tCEC_InôTy≥Def
;

68 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

69 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

71 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
Ë|| \

	)

72 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

80 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

81 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

83 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
Ë|| \

	)

84 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

93 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

94 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

95 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

96 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

97 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
Ë|| \

	)

98 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

107 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

115 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

128 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

129 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

130 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

131 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

132 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

133 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

134 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

139 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

140 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

141 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

142 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

143 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

144 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

145 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

147 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

149 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
Ë|| \

	)

150 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

154 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

176 
CEC_DeInô
();

177 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

178 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

179 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

181 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

182 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

183 
uöt8_t
 
CEC_Re˚iveD©aByã
();

184 
CEC_SèπOfMesßge
();

185 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

186 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

187 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

188 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

189 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

191 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

69 
CRC_Re£tDR
();

70 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

71 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

72 
uöt32_t
 
CRC_GëCRC
();

73 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

74 
uöt8_t
 
CRC_GëIDRegi°î
();

76 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DAC_Triggî
;

54 
uöt32_t
 
DAC_WaveGíî©i⁄
;

58 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

62 
uöt32_t
 
DAC_OuçutBuf„r
;

64 }
	tDAC_InôTy≥Def
;

78 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

83 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

85 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

86 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

87 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

89 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

90 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

91 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

92 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

94 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

95 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

112 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

113 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

114 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

115 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

126 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

127 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

128 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

129 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

130 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

131 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

132 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

133 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

134 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

135 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

136 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

137 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

151 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

183 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

184 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

185 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

186 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

195 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

196 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

197 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

198 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

207 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

208 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

209 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

210 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

211 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

212 ((
ALIGN
Ë=
DAC_Align_8b_R
))

221 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

222 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

223 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

224 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

233 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

237 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

242 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

243 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

253 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

254 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

277 
DAC_DeInô
();

278 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

279 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

281 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

282 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

289 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

291 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

292 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

293 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

294 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

296 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

299 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

57 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

58 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

59 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

60 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

61 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

62 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

63 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

64 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

65 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

66 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

67 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

68 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

69 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

71 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

72 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

73 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

76 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

77 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

78 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

80 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

97 
uöt32_t
 
DBGMCU_GëREVID
();

98 
uöt32_t
 
DBGMCU_GëDEVID
();

99 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

101 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

53 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

55 
uöt32_t
 
DMA_DIR
;

58 
uöt32_t
 
DMA_Buf„rSize
;

62 
uöt32_t
 
DMA_PîùhîÆInc
;

65 
uöt32_t
 
DMA_Mem‹yInc
;

68 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

71 
uöt32_t
 
DMA_Mem‹yD©aSize
;

74 
uöt32_t
 
DMA_Mode
;

79 
uöt32_t
 
DMA_Pri‹ôy
;

82 
uöt32_t
 
DMA_M2M
;

84 }
	tDMA_InôTy≥Def
;

94 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

95 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

101 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

111 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

112 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

113 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

114 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

123 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

124 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

125 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

126 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

135 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

136 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

137 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

138 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

147 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

148 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

149 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

150 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

151 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

161 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

162 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

163 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

165 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

175 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

176 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

177 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

186 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

187 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

188 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

189 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

190 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

191 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

202 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

203 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

204 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

214 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

215 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

216 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

217 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

219 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

220 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

221 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

222 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

223 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

224 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

225 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

226 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

227 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

228 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

229 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

230 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

231 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

232 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

234 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

235 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

236 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

237 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

238 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

239 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

240 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

241 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

242 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

243 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

244 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

245 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

246 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

248 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

249 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

250 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

251 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

252 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

253 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

254 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

255 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

256 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

257 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

258 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

259 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

260 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

261 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

262 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

263 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

264 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

265 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

266 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

267 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

269 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

271 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

272 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

273 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

274 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

275 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

276 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

277 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

278 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

279 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

280 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

281 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

282 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

283 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

284 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

285 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

286 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

287 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

288 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

289 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

290 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

291 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

292 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

293 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

294 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

303 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

304 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

305 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

306 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

307 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

308 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

309 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

310 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

311 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

312 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

313 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

314 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

315 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

316 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

317 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

318 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

319 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

320 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

321 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

322 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

323 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

324 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

327 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

328 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

329 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

330 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

332 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

333 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

334 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

335 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

336 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

337 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

338 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

339 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

340 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

341 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

342 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

343 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

344 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

345 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

346 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

347 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

348 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

349 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

350 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

351 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

353 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

355 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

356 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

387 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

409 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

410 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

411 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

415 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

416 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

417 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

418 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

420 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
EXTI_Mode_I¡îru±
 = 0x00,

52 
EXTI_Mode_Evít
 = 0x04

53 }
	tEXTIMode_Ty≥Def
;

55 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

63 
EXTI_Triggî_Risög
 = 0x08,

64 
EXTI_Triggî_FÆlög
 = 0x0C,

65 
EXTI_Triggî_Risög_FÆlög
 = 0x10

66 }
	tEXTITriggî_Ty≥Def
;

68 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

69 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

77 
uöt32_t
 
EXTI_Löe
;

80 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

83 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

86 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

88 }
	tEXTI_InôTy≥Def
;

102 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

103 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

104 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

105 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

106 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

107 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

108 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

109 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

110 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

111 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

112 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

113 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

114 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

115 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

116 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

117 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

118 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

119 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

120 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

122 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

124 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

125 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

126 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

127 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

128 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

129 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

130 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

131 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

132 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

133 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

134 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

157 
EXTI_DeInô
();

158 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

159 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

161 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

162 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

163 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

164 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

166 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
FLASH_BUSY
 = 1,

52 
FLASH_ERROR_PG
,

53 
FLASH_ERROR_WRP
,

54 
FLASH_COMPLETE
,

55 
FLASH_TIMEOUT


56 }
	tFLASH_Sètus
;

70 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

71 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

72 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

73 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

74 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

84 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

86 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

87 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

96 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

97 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

98 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

109 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

110 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

111 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

112 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

113 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

114 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

115 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

116 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

119 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

120 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

121 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

122 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

123 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

124 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

125 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

126 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

127 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

128 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

129 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

131 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

132 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

133 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

134 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

135 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

145 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

147 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

149 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

151 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

153 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

155 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

157 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

159 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

161 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

163 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

165 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

167 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

169 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

171 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

173 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

175 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

177 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

179 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

181 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

183 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

185 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

187 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

189 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

191 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

193 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

195 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

197 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

199 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

201 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

203 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

205 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

207 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

211 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

213 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

215 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

217 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

227 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

228 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

229 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

239 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

240 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

241 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

251 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

252 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

253 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

255 #ifde‡
STM32F10X_XL


262 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

264 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

267 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

275 #ifde‡
STM32F10X_XL


276 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

277 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

279 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

280 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

282 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

283 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

284 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

286 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

287 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

288 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

289 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

291 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

301 #ifde‡
STM32F10X_XL


302 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

303 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

304 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

305 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

307 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

308 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

309 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

310 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

312 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

313 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

314 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

315 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

316 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

318 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

319 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

320 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

322 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

327 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

328 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

329 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

330 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

331 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

333 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

334 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

335 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

336 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

338 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

339 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

340 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

367 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

368 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

369 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

370 
FLASH_U∆ock
();

371 
FLASH_Lock
();

372 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

373 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

374 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

375 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

376 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

379 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

380 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

381 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

382 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

383 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

384 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

385 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

387 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_Sètus
 
FLASH_GëSètus
();

389 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

392 
FLASH_U∆ockB™k1
();

393 
FLASH_LockB™k1
();

394 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

395 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

396 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

398 #ifde‡
STM32F10X_XL


400 
FLASH_U∆ockB™k2
();

401 
FLASH_LockB™k2
();

402 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

403 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

404 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

405 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

408 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
FSMC_AddªssSëupTime
;

56 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

61 
uöt32_t
 
FSMC_D©aSëupTime
;

66 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

71 
uöt32_t
 
FSMC_CLKDivisi⁄
;

75 
uöt32_t
 
FSMC_D©aL©ícy
;

83 
uöt32_t
 
FSMC_Ac˚ssMode
;

85 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

93 
uöt32_t
 
FSMC_B™k
;

96 
uöt32_t
 
FSMC_D©aAddªssMux
;

100 
uöt32_t
 
FSMC_Mem‹yTy≥
;

104 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

107 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

111 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

115 
uöt32_t
 
FSMC_WøpMode
;

119 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

124 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

127 
uöt32_t
 
FSMC_WaôSig«l
;

131 
uöt32_t
 
FSMC_ExãndedMode
;

134 
uöt32_t
 
FSMC_WrôeBur°
;

137 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

139 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

140 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

180 
uöt32_t
 
FSMC_B™k
;

183 
uöt32_t
 
FSMC_Waô„©uª
;

186 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

189 
uöt32_t
 
FSMC_ECC
;

192 
uöt32_t
 
FSMC_ECCPageSize
;

194 
uöt32_t
 
FSMC_AddªssLowM≠pög
;

195 
uöt32_t
 
FSMC_TCLRSëupTime
;

199 
uöt32_t
 
FSMC_TARSëupTime
;

203 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

205 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

206 }
	tFSMC_NANDInôTy≥Def
;

214 
uöt32_t
 
FSMC_Waô„©uª
;

217 
uöt32_t
 
FSMC_TCLRSëupTime
;

221 
uöt32_t
 
FSMC_TARSëupTime
;

226 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

228 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

230 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

231 }
	tFSMC_PCCARDInôTy≥Def
;

244 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

245 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

246 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

247 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

255 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

256 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

264 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

269 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

270 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

271 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

272 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

274 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

275 ((
BANK
Ë=
FSMC_B™k3_NAND
))

277 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

278 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

281 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

282 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

293 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

294 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

295 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

296 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

306 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

307 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

308 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

309 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

310 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

311 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

321 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

322 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

323 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

324 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

346 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

347 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

348 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

349 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

359 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

361 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

362 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

385 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

386 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

387 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

388 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

398 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

399 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

400 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

401 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

410 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

411 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

413 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

414 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

436 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

446 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

456 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

466 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

476 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

486 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

496 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

497 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

498 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

499 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

500 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

501 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

502 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

503 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

521 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

522 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

523 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

524 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

535 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

537 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

538 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

547 
	#FSMC_AddªssLowM≠pög_Dúe˘
 ((
u32
)0x00000000)

	)

549 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

550 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

551 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

552 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

553 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

554 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

555 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

556 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

557 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

558 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

559 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

560 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

570 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

580 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

590 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

600 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

610 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

620 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

630 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

631 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

632 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

633 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

634 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

635 ((
IT
Ë=
FSMC_IT_Levñ
) || \

636 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

645 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

646 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

647 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

648 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

649 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

650 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

651 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

652 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

654 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

680 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

681 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

682 
FSMC_PCCARDDeInô
();

683 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

684 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

685 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

686 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

687 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

688 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

689 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

694 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

695 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

696 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

697 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

698 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

700 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

46 ((
PERIPH
Ë=
GPIOB
) || \

47 ((
PERIPH
Ë=
GPIOC
) || \

48 ((
PERIPH
Ë=
GPIOD
) || \

49 ((
PERIPH
Ë=
GPIOE
) || \

50 ((
PERIPH
Ë=
GPIOF
) || \

51 ((
PERIPH
Ë=
GPIOG
))

59 
GPIO_S≥ed_10MHz
 = 1,

60 
GPIO_S≥ed_2MHz
,

61 
GPIO_S≥ed_50MHz


62 }
	tGPIOS≥ed_Ty≥Def
;

63 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

64 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

71 { 
GPIO_Mode_AIN
 = 0x0,

72 
GPIO_Mode_IN_FLOATING
 = 0x04,

73 
GPIO_Mode_IPD
 = 0x28,

74 
GPIO_Mode_IPU
 = 0x48,

75 
GPIO_Mode_Out_OD
 = 0x14,

76 
GPIO_Mode_Out_PP
 = 0x10,

77 
GPIO_Mode_AF_OD
 = 0x1C,

78 
GPIO_Mode_AF_PP
 = 0x18

79 }
	tGPIOMode_Ty≥Def
;

81 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

82 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

83 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

84 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

92 
uöt16_t
 
GPIO_Pö
;

95 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

98 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

100 }
	tGPIO_InôTy≥Def
;

108 { 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

112 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

126 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

127 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

128 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

129 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

130 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

131 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

132 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

133 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

134 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

135 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

136 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

137 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

138 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

139 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

140 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

141 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

142 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

144 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

146 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

147 ((
PIN
Ë=
GPIO_Pö_1
) || \

148 ((
PIN
Ë=
GPIO_Pö_2
) || \

149 ((
PIN
Ë=
GPIO_Pö_3
) || \

150 ((
PIN
Ë=
GPIO_Pö_4
) || \

151 ((
PIN
Ë=
GPIO_Pö_5
) || \

152 ((
PIN
Ë=
GPIO_Pö_6
) || \

153 ((
PIN
Ë=
GPIO_Pö_7
) || \

154 ((
PIN
Ë=
GPIO_Pö_8
) || \

155 ((
PIN
Ë=
GPIO_Pö_9
) || \

156 ((
PIN
Ë=
GPIO_Pö_10
) || \

157 ((
PIN
Ë=
GPIO_Pö_11
) || \

158 ((
PIN
Ë=
GPIO_Pö_12
) || \

159 ((
PIN
Ë=
GPIO_Pö_13
) || \

160 ((
PIN
Ë=
GPIO_Pö_14
) || \

161 ((
PIN
Ë=
GPIO_Pö_15
))

171 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

176 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

177 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

178 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

179 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

180 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

181 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

182 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

183 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

184 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

185 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

186 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

187 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

188 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

189 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

191 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

193 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

194 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

195 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

196 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

197 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

198 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201000Ë

	)

199 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

202 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

204 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

205 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

206 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

207 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

208 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

210 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

211 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

212 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

213 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

214 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

215 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

219 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

220 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

221 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

222 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

223 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

224 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

225 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

226 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

227 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

228 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

229 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
))

248 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

249 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

250 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

251 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

252 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

253 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

254 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

255 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

256 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

257 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

258 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

259 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

261 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

266 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

267 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

277 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

278 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

279 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

280 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

281 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

282 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

283 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

284 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

285 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

286 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

287 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

288 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

289 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

290 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

291 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

292 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

294 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

295 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

296 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

297 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

298 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

299 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

300 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

318 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

319 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

321 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

322 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

343 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

344 
GPIO_AFIODeInô
();

345 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

346 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

347 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

348 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

349 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

350 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

351 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

352 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

353 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

354 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

355 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

357 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

359 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

360 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

362 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
I2C_ClockS≥ed
;

54 
uöt16_t
 
I2C_Mode
;

57 
uöt16_t
 
I2C_DutyCy˛e
;

60 
uöt16_t
 
I2C_OwnAddªss1
;

63 
uöt16_t
 
I2C_Ack
;

66 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

68 }
	tI2C_InôTy≥Def
;

79 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

80 ((
PERIPH
Ë=
I2C2
))

85 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

86 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

87 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

88 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

89 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

99 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

100 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

101 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

102 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

111 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

112 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

113 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

114 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

123 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

124 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

125 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

126 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

135 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

136 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

137 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

138 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

147 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

148 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

149 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

150 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

151 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

152 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

153 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

154 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

155 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

156 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

157 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

173 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

174 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

175 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

176 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

185 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

186 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

187 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

188 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

197 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

198 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

199 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

200 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

209 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

210 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

211 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

212 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

213 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

214 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

215 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

216 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

217 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

218 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

219 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

220 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

221 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

222 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

224 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

226 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

227 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

228 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

229 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

230 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

231 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

232 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

245 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

246 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

247 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

248 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

249 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

250 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

251 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

257 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

258 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

259 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

260 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

261 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

262 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

263 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

264 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

265 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

266 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

267 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

268 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

269 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

270 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

272 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

274 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

275 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

276 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

277 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

278 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

279 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

280 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

281 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

282 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

283 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

284 ((
FLAG
Ë=
I2C_FLAG_SB
))

306 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

334 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

335 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

337 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

370 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

374 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

376 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

411 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

412 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

415 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

416 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

419 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

450 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

452 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

456 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

457 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

459 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

463 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

464 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

465 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

466 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

467 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

468 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

469 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

470 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

471 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

472 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

473 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

474 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

475 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

476 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

481 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

482 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

491 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

500 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

521 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

522 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

523 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

524 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

525 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

526 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

527 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

528 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

531 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

532 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

533 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

534 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

535 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

536 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

537 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

538 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

540 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

542 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

544 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

631 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

637 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

643 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

649 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

650 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

651 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

653 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

58 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

59 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

60 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

91 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

92 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

93 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

94 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

115 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

116 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

117 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

118 
IWDG_RñﬂdCou¡î
();

119 
IWDG_E«bÀ
();

120 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

122 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

58 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

59 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

60 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

61 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

62 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

63 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

64 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

65 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

66 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

77 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

78 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

79 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

80 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

89 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

90 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

91 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

101 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

102 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

103 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

104 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

105 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

107 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

128 
PWR_DeInô
();

129 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

130 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

132 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

133 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

134 
PWR_E¡îSTANDBYMode
();

135 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

136 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

138 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SYSCLK_Fªquícy
;

48 
uöt32_t
 
HCLK_Fªquícy
;

49 
uöt32_t
 
PCLK1_Fªquícy
;

50 
uöt32_t
 
PCLK2_Fªquícy
;

51 
uöt32_t
 
ADCCLK_Fªquícy
;

52 }
	tRCC_ClocksTy≥Def
;

66 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

67 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

68 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

69 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

70 ((
HSE
Ë=
RCC_HSE_By∑ss
))

80 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

82 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_CL
)

83 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

84 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

85 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

86 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

89 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

91 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

101 #i‚de‡
STM32F10X_CL


102 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

104 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

105 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

106 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

107 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

108 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

109 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

110 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

111 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

112 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

113 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

114 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

115 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

116 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

117 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

118 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

119 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

120 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

121 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

122 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

123 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

124 ((
MUL
Ë=
RCC_PLLMul_16
))

127 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

128 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

129 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

130 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

131 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

132 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

133 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

135 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
Ë|| \

	)

136 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

137 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

138 ((
MUL
Ë=
RCC_PLLMul_6_5
))

147 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

148 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

149 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

150 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

151 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

152 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

153 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

154 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

155 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

156 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

157 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

158 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

159 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

160 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

161 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

162 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

163 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

165 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

166 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

182 #ifde‡
STM32F10X_CL


184 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

185 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

187 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
Ë|| \

	)

188 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

189 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

191 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

199 #ifde‡
STM32F10X_CL


204 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

205 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

206 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

207 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

208 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

209 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

210 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

211 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

212 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

213 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

214 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

215 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

216 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

217 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

218 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

219 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

221 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
Ë|| \

	)

222 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

238 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

239 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

240 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

241 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

242 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

243 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

244 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

245 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

246 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

248 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
Ë|| \

	)

249 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_20
))

262 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

263 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

264 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

265 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

266 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

267 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

268 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

269 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

270 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

272 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
Ë|| \

	)

273 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_20
))

288 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

289 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

290 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

291 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

292 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

302 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

303 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

304 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

305 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

306 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

307 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

308 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

309 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

310 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

311 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

312 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

324 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

325 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

326 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

327 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

328 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

329 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

330 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div16
))

340 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

341 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

342 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

343 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

344 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

345 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

347 #i‚de‡
STM32F10X_CL


348 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

349 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

350 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

351 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

352 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

354 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

355 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

356 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

357 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

358 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

359 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

360 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

361 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

369 #i‚de‡
STM32F10X_CL


374 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

375 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

377 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

378 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

386 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

389 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
Ë|| \

	)

390 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

397 #ifde‡
STM32F10X_CL


401 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

402 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

404 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| \

	)

405 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

413 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

414 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

416 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
Ë|| \

	)

417 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

428 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

429 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

430 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

431 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

432 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

433 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

442 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

443 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

444 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

445 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

446 ((
LSE
Ë=
RCC_LSE_By∑ss
))

455 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

456 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

457 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

458 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

459 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

469 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

470 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

471 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

472 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

473 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

475 #i‚de‡
STM32F10X_CL


476 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

477 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

478 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

480 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

481 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

485 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

486 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

496 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

497 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

498 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

499 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

500 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

501 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

502 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

503 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

504 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

505 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

506 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

507 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

508 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

509 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

510 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

511 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

512 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

513 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

514 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

515 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

516 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

518 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

527 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

528 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

529 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

530 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

531 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

532 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

533 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

534 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

535 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

536 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

537 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

538 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

539 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

540 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

541 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

542 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

543 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

544 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

545 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

546 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

547 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

548 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

549 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

550 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

551 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

553 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

563 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

564 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

565 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

566 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

567 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

569 #i‚de‡
STM32F10X_CL


570 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

571 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

572 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

574 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

575 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

576 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

577 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

579 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

580 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

581 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

582 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

594 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

595 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

596 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

597 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

598 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

599 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

600 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

601 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

602 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

603 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

604 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

606 #i‚de‡
STM32F10X_CL


607 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

608 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

610 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

612 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

614 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

615 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

616 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

617 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

620 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

622 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

625 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

646 
RCC_DeInô
();

647 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

648 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

649 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

650 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

651 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

652 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

654 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

655 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

658 #ifde‡ 
STM32F10X_CL


659 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

660 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

661 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

662 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

663 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

666 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

667 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

668 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

669 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

670 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

673 #i‚de‡
STM32F10X_CL


674 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

676 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

679 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

681 #ifde‡
STM32F10X_CL


682 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

683 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

686 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

687 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

688 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

689 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

691 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

695 #ifde‡
STM32F10X_CL


696 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

699 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

704 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

705 
RCC_CÀ¨Fœg
();

706 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

707 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

709 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

58 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

59 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

60 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

61 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

62 ((
IT
Ë=
RTC_IT_SEC
))

71 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

72 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

73 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

74 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

75 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

76 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

77 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

78 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

79 ((
FLAG
Ë=
RTC_FLAG_SEC
))

80 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

102 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

103 
RTC_E¡îC⁄figMode
();

104 
RTC_ExôC⁄figMode
();

105 
uöt32_t
 
RTC_GëCou¡î
();

106 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

107 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

108 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

109 
uöt32_t
 
RTC_GëDividî
();

110 
RTC_WaôF‹La°Task
();

111 
RTC_WaôF‹Synchro
();

112 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

113 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

114 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

115 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

117 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SDIO_ClockEdge
;

50 
uöt32_t
 
SDIO_ClockBy∑ss
;

54 
uöt32_t
 
SDIO_ClockPowîSave
;

58 
uöt32_t
 
SDIO_BusWide
;

61 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

64 
uöt8_t
 
SDIO_ClockDiv
;

67 } 
	tSDIO_InôTy≥Def
;

71 
uöt32_t
 
SDIO_Argumít
;

76 
uöt32_t
 
SDIO_CmdIndex
;

78 
uöt32_t
 
SDIO_Re•⁄£
;

81 
uöt32_t
 
SDIO_Waô
;

84 
uöt32_t
 
SDIO_CPSM
;

87 } 
	tSDIO_CmdInôTy≥Def
;

91 
uöt32_t
 
SDIO_D©aTimeOut
;

93 
uöt32_t
 
SDIO_D©aLígth
;

95 
uöt32_t
 
SDIO_D©aBlockSize
;

98 
uöt32_t
 
SDIO_Tøns„rDú
;

102 
uöt32_t
 
SDIO_Tøns„rMode
;

105 
uöt32_t
 
SDIO_DPSM
;

108 } 
	tSDIO_D©aInôTy≥Def
;

122 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

123 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

124 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

125 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

134 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

135 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

136 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

137 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

146 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

147 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

148 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

149 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

158 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

159 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

160 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

161 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

162 ((
WIDE
Ë=
SDIO_BusWide_8b
))

172 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

174 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

175 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

184 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

185 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

186 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

196 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

197 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

198 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

199 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

200 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

201 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

202 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

203 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

204 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

205 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

206 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

207 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

208 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

209 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

210 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

211 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

212 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

213 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

214 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

215 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

216 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

217 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

218 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

219 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

220 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

229 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

238 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

239 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

240 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

241 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

242 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

252 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

253 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

254 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

255 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

256 ((
WAIT
Ë=
SDIO_Waô_Píd
))

265 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

266 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

267 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

276 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

277 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

278 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

279 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

280 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

281 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

290 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

299 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

300 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

301 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

302 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

303 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

304 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

305 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

306 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

307 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

308 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

309 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

310 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

311 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

312 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

313 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

314 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

337 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

338 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

339 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

340 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

349 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

350 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

351 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

352 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

361 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

363 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

372 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

373 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

374 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

375 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

376 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

377 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

378 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

379 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

380 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

381 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

382 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

383 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

384 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

385 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

386 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

387 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

388 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

389 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

390 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

391 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

392 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

393 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

394 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

395 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

396 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

397 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

421 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

423 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

424 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

426 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

428 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

429 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

430 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

431 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

432 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

433 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXACT
) || \

436 ((
IT
Ë=
SDIO_IT_RXACT
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

444 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

446 ((
IT
Ë=
SDIO_IT_CEATAEND
))

448 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

458 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

459 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

460 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

461 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

482 
SDIO_DeInô
();

483 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

484 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

487 
uöt32_t
 
SDIO_GëPowîSèã
();

488 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

491 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

492 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

493 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

494 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
uöt32_t
 
SDIO_GëD©aCou¡î
();

497 
uöt32_t
 
SDIO_RódD©a
();

498 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

499 
uöt32_t
 
SDIO_GëFIFOCou¡
();

500 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

503 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

509 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

510 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

511 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

513 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
SPI_Dúe˘i⁄
;

54 
uöt16_t
 
SPI_Mode
;

57 
uöt16_t
 
SPI_D©aSize
;

60 
uöt16_t
 
SPI_CPOL
;

63 
uöt16_t
 
SPI_CPHA
;

66 
uöt16_t
 
SPI_NSS
;

70 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

76 
uöt16_t
 
SPI_Fú°Bô
;

79 
uöt16_t
 
SPI_CRCPﬁynomül
;

80 }
	tSPI_InôTy≥Def
;

89 
uöt16_t
 
I2S_Mode
;

92 
uöt16_t
 
I2S_Sènd¨d
;

95 
uöt16_t
 
I2S_D©aF‹m©
;

98 
uöt16_t
 
I2S_MCLKOuçut
;

101 
uöt32_t
 
I2S_AudioFªq
;

104 
uöt16_t
 
I2S_CPOL
;

106 }
	tI2S_InôTy≥Def
;

116 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

117 ((
PERIPH
Ë=
SPI2
) || \

118 ((
PERIPH
Ë=
SPI3
))

120 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

121 ((
PERIPH
Ë=
SPI3
))

127 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

128 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

129 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

131 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

132 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

143 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

144 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

145 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

146 ((
MODE
Ë=
SPI_Mode_Sœve
))

155 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

156 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

158 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

167 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

168 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

169 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

170 ((
CPOL
Ë=
SPI_CPOL_High
))

179 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

181 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

182 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

191 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

192 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

193 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

194 ((
NSS
Ë=
SPI_NSS_H¨d
))

203 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

205 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

206 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

207 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

208 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

209 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

210 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

211 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

212 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

227 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

229 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

230 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

239 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

240 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

241 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

242 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

243 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

244 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

245 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

255 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

256 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

257 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

258 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

259 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

260 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

261 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

273 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

274 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

275 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

276 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

277 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

278 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

289 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

290 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

291 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

292 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

301 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

302 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

303 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

304 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

305 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

306 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

307 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

308 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

309 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

310 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_96k
Ë|| \

	)

311 ((
FREQ
Ë=
I2S_AudioFªq_48k
) || \

312 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

313 ((
FREQ
Ë=
I2S_AudioFªq_32k
) || \

314 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

316 ((
FREQ
Ë=
I2S_AudioFªq_11k
) || \

317 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

318 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

327 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

328 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

329 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

330 ((
CPOL
Ë=
I2S_CPOL_High
))

339 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

340 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

341 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

350 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

351 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

352 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

353 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

362 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

363 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

364 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

373 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

374 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

375 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

376 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

385 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

386 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

387 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

388 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

389 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

390 ((
IT
Ë=
SPI_I2S_IT_ERR
))

391 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

392 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

393 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

394 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

395 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

396 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

397 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

398 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

407 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

408 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

409 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

410 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

411 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

412 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

413 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

414 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

415 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

416 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

417 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

418 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

419 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

428 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

449 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

450 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

451 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

452 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

453 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

454 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

458 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

459 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

460 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

461 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

463 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

466 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

467 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

468 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

469 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

470 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

471 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

473 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

52 
uöt16_t
 
TIM_PªsˇÀr
;

55 
uöt16_t
 
TIM_Cou¡îMode
;

58 
uöt16_t
 
TIM_Pîiod
;

62 
uöt16_t
 
TIM_ClockDivisi⁄
;

65 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

73 } 
	tTIM_TimeBa£InôTy≥Def
;

81 
uöt16_t
 
TIM_OCMode
;

84 
uöt16_t
 
TIM_OuçutSèã
;

87 
uöt16_t
 
TIM_OuçutNSèã
;

91 
uöt16_t
 
TIM_Pul£
;

94 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

97 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

101 
uöt16_t
 
TIM_OCIdÀSèã
;

105 
uöt16_t
 
TIM_OCNIdÀSèã
;

108 } 
	tTIM_OCInôTy≥Def
;

117 
uöt16_t
 
TIM_Ch™√l
;

120 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

123 
uöt16_t
 
TIM_ICSñe˘i⁄
;

126 
uöt16_t
 
TIM_ICPªsˇÀr
;

129 
uöt16_t
 
TIM_ICFûãr
;

131 } 
	tTIM_ICInôTy≥Def
;

141 
uöt16_t
 
TIM_OSSRSèã
;

144 
uöt16_t
 
TIM_OSSISèã
;

147 
uöt16_t
 
TIM_LOCKLevñ
;

150 
uöt16_t
 
TIM_DódTime
;

154 
uöt16_t
 
TIM_Bªak
;

157 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

160 
uöt16_t
 
TIM_Autom©icOuçut
;

162 } 
	tTIM_BDTRInôTy≥Def
;

168 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

169 ((
PERIPH
Ë=
TIM2
) || \

170 ((
PERIPH
Ë=
TIM3
) || \

171 ((
PERIPH
Ë=
TIM4
) || \

172 ((
PERIPH
Ë=
TIM5
) || \

173 ((
PERIPH
Ë=
TIM6
) || \

174 ((
PERIPH
Ë=
TIM7
) || \

175 ((
PERIPH
Ë=
TIM8
) || \

176 ((
PERIPH
Ë=
TIM9
) || \

177 ((
PERIPH
Ë=
TIM10
)|| \

178 ((
PERIPH
Ë=
TIM11
)|| \

179 ((
PERIPH
Ë=
TIM12
)|| \

180 ((
PERIPH
Ë=
TIM13
)|| \

181 ((
PERIPH
Ë=
TIM14
)|| \

182 ((
PERIPH
Ë=
TIM15
)|| \

183 ((
PERIPH
Ë=
TIM16
)|| \

184 ((
PERIPH
Ë=
TIM17
))

187 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

188 ((
PERIPH
Ë=
TIM8
))

191 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

192 ((
PERIPH
Ë=
TIM8
) || \

193 ((
PERIPH
Ë=
TIM15
)|| \

194 ((
PERIPH
Ë=
TIM16
)|| \

195 ((
PERIPH
Ë=
TIM17
))

198 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

199 ((
PERIPH
Ë=
TIM2
) || \

200 ((
PERIPH
Ë=
TIM3
) || \

201 ((
PERIPH
Ë=
TIM4
) || \

202 ((
PERIPH
Ë=
TIM5
) || \

203 ((
PERIPH
Ë=
TIM8
))

206 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

207 ((
PERIPH
Ë=
TIM2
) || \

208 ((
PERIPH
Ë=
TIM3
) || \

209 ((
PERIPH
Ë=
TIM4
) || \

210 ((
PERIPH
Ë=
TIM5
) || \

211 ((
PERIPH
Ë=
TIM8
) || \

212 ((
PERIPH
Ë=
TIM15
)|| \

213 ((
PERIPH
Ë=
TIM16
)|| \

214 ((
PERIPH
Ë=
TIM17
))

217 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

218 ((
PERIPH
Ë=
TIM2
) || \

219 ((
PERIPH
Ë=
TIM3
) || \

220 ((
PERIPH
Ë=
TIM4
) || \

221 ((
PERIPH
Ë=
TIM5
) || \

222 ((
PERIPH
Ë=
TIM8
) || \

223 ((
PERIPH
Ë=
TIM15
))

226 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

227 ((
PERIPH
Ë=
TIM2
) || \

228 ((
PERIPH
Ë=
TIM3
) || \

229 ((
PERIPH
Ë=
TIM4
) || \

230 ((
PERIPH
Ë=
TIM5
) || \

231 ((
PERIPH
Ë=
TIM8
) || \

232 ((
PERIPH
Ë=
TIM9
) || \

233 ((
PERIPH
Ë=
TIM12
)|| \

234 ((
PERIPH
Ë=
TIM15
))

237 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

238 ((
PERIPH
Ë=
TIM2
) || \

239 ((
PERIPH
Ë=
TIM3
) || \

240 ((
PERIPH
Ë=
TIM4
) || \

241 ((
PERIPH
Ë=
TIM5
) || \

242 ((
PERIPH
Ë=
TIM6
) || \

243 ((
PERIPH
Ë=
TIM7
) || \

244 ((
PERIPH
Ë=
TIM8
) || \

245 ((
PERIPH
Ë=
TIM9
) || \

246 ((
PERIPH
Ë=
TIM12
)|| \

247 ((
PERIPH
Ë=
TIM15
))

250 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

251 ((
PERIPH
Ë=
TIM2
) || \

252 ((
PERIPH
Ë=
TIM3
) || \

253 ((
PERIPH
Ë=
TIM4
) || \

254 ((
PERIPH
Ë=
TIM5
) || \

255 ((
PERIPH
Ë=
TIM8
) || \

256 ((
PERIPH
Ë=
TIM9
) || \

257 ((
PERIPH
Ë=
TIM10
)|| \

258 ((
PERIPH
Ë=
TIM11
)|| \

259 ((
PERIPH
Ë=
TIM12
)|| \

260 ((
PERIPH
Ë=
TIM13
)|| \

261 ((
PERIPH
Ë=
TIM14
)|| \

262 ((
PERIPH
Ë=
TIM15
)|| \

263 ((
PERIPH
Ë=
TIM16
)|| \

264 ((
PERIPH
Ë=
TIM17
))

267 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

268 ((
PERIPH
Ë=
TIM2
) || \

269 ((
PERIPH
Ë=
TIM3
) || \

270 ((
PERIPH
Ë=
TIM4
) || \

271 ((
PERIPH
Ë=
TIM5
) || \

272 ((
PERIPH
Ë=
TIM6
) || \

273 ((
PERIPH
Ë=
TIM7
) || \

274 ((
PERIPH
Ë=
TIM8
) || \

275 ((
PERIPH
Ë=
TIM15
)|| \

276 ((
PERIPH
Ë=
TIM16
)|| \

277 ((
PERIPH
Ë=
TIM17
))

287 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

288 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

289 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

290 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

291 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

292 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

293 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

294 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

295 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

297 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

298 ((
MODE
Ë=
TIM_OCMode_PWM2
))

299 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

300 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

301 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

303 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

304 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

305 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

315 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

316 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

318 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

327 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

328 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

329 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

330 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

331 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

332 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

335 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

336 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

337 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

338 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

348 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

349 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

350 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

351 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

352 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV4
))

362 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

363 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

364 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

367 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

368 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

380 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

381 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

382 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

383 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

392 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

393 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

394 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

395 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

404 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

405 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

406 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

407 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

416 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

417 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

418 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

419 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

428 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

429 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

430 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

431 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

440 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

441 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

442 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

443 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

452 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

453 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

454 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

455 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

464 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

465 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

466 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

467 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

476 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

477 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

478 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

479 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

488 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

489 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

490 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

491 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

492 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

493 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

504 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

505 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

506 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

507 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

516 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

517 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

518 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

519 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

528 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

529 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

530 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

531 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

540 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

541 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

542 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

543 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

552 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

553 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

554 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

555 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

564 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

566 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

568 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

569 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

570 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

571 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

580 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

581 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

582 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

583 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

584 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

585 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

586 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

587 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

596 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

597 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

598 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

599 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

600 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

601 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

602 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

603 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

604 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

606 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

607 ((
IT
Ë=
TIM_IT_CC1
) || \

608 ((
IT
Ë=
TIM_IT_CC2
) || \

609 ((
IT
Ë=
TIM_IT_CC3
) || \

610 ((
IT
Ë=
TIM_IT_CC4
) || \

611 ((
IT
Ë=
TIM_IT_COM
) || \

612 ((
IT
Ë=
TIM_IT_Triggî
) || \

613 ((
IT
Ë=
TIM_IT_Bªak
))

622 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

623 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

624 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

625 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

626 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

627 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

628 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

629 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

630 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

631 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

632 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

633 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

634 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

635 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

636 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

637 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

638 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

639 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

640 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

641 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

642 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

643 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

644 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

645 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

646 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

648 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

649 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

651 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

652 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

653 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

656 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

657 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

658 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_DCR
))

668 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

669 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

670 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

671 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

672 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

673 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

674 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

675 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

676 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

677 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

678 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

679 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

680 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

681 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

682 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

683 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

684 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

685 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

686 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

687 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

688 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

689 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

690 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

691 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

712 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

713 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

714 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

715 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

716 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

717 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

718 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

719 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

729 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

730 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

731 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

732 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

733 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

734 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

735 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

736 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

745 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

746 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

747 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

748 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

749 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

750 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

751 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

752 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

753 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

754 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

755 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

756 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

757 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

758 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

759 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

760 ((
SELECTION
Ë=
TIM_TS_ETRF
))

761 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

762 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

763 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

764 ((
SELECTION
Ë=
TIM_TS_ITR3
))

773 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

774 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

775 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

776 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

777 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

778 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

786 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

787 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

788 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

789 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

798 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

799 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

800 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

801 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

810 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

811 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

812 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

813 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

822 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

823 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

824 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

825 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

826 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

827 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

837 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

838 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

839 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

840 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

841 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

842 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

843 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

844 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

845 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

855 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

858 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

859 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

860 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

869 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

870 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

871 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

872 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

881 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

882 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

883 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

884 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

894 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

895 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

896 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

897 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

906 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

907 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

908 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

909 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

910 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

911 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

912 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

913 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

914 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

915 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

916 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

917 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

918 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

919 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

930 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

931 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

932 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

933 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

934 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

935 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

936 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

937 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

946 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

947 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

948 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

949 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

958 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

959 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

960 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

961 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

962 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

963 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

964 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

965 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

966 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

967 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

968 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

969 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

970 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

971 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

972 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

973 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

974 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

975 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

976 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

977 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

980 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

981 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

984 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

993 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1002 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1023 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1024 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1025 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1026 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1027 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1028 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1029 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1030 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1031 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1032 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1033 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1034 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1035 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1036 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1037 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1039 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1040 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1041 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1042 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1043 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1044 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1045 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1046 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1047 
uöt16_t
 
ExtTRGFûãr
);

1048 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1049 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1050 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1051 
uöt16_t
 
ExtTRGFûãr
);

1052 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1053 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1054 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1055 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1056 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1057 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1058 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1059 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1060 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1061 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1062 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1063 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1064 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1065 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1066 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1067 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1068 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1069 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1070 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1071 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1072 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1073 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1074 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1075 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1076 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1077 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1078 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1079 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1080 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1081 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1082 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1083 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1084 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1085 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1086 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1087 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1088 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1089 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1090 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1091 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1092 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1093 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1094 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1095 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1096 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1097 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1098 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1099 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1100 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1101 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1102 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1103 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1104 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1105 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1106 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1107 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1108 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1109 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1110 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1111 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1112 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1113 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1114 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1116 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

106 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

107 ((
PERIPH
Ë=
USART2
) || \

108 ((
PERIPH
Ë=
USART3
) || \

109 ((
PERIPH
Ë=
UART4
) || \

110 ((
PERIPH
Ë=
UART5
))

112 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

113 ((
PERIPH
Ë=
USART2
) || \

114 ((
PERIPH
Ë=
USART3
))

116 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
) || \

119 ((
PERIPH
Ë=
UART4
))

124 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

125 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

127 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

128 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

137 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

138 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

139 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

140 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

141 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

142 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

153 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

154 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

155 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

156 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

157 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

167 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

168 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

169 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

177 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

181 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

182 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

183 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

193 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

194 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

195 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

196 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

205 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

206 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

207 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

217 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

218 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

219 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

229 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

230 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

231 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

232 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

241 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

242 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

243 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

244 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

245 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

246 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

247 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

248 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

249 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

250 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

251 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

252 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

253 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

254 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

255 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

256 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

257 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

258 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

259 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

260 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

261 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

262 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

271 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

272 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

273 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

283 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

284 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

285 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

286 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

295 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

296 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

297 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

298 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

299 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

308 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

309 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

310 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

311 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

320 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

321 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

322 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

323 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

324 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

325 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

326 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

327 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

328 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

329 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

330 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

331 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

332 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

333 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

334 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

336 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

337 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

338 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

339 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

340 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

341 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

342 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

364 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

365 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

366 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

368 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

370 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

373 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

374 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

375 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

376 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

378 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

379 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

381 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

382 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

383 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

388 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

389 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

390 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

392 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

394 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

58 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

59 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

60 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

61 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

62 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

65 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

66 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

87 
WWDG_DeInô
();

88 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

89 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

90 
WWDG_E«bÀIT
();

91 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

92 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

93 
FœgSètus
 
WWDG_GëFœgSètus
();

94 
WWDG_CÀ¨Fœg
();

96 #ifde‡
__˝lu•lus


	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/misc.c

23 
	~"misc.h
"

46 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

95 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

98 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

101 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

102 
	}
}

111 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

113 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

116 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

117 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

118 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

120 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

123 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

124 
tmµª
 = (0x4 - 
tmµri‹ôy
);

125 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

127 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

128 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

129 
tmµri‹ôy
 =Åmppriority << 0x04;

131 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

134 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

135 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

140 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

141 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

143 
	}
}

154 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

157 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

158 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

160 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

161 
	}
}

173 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

179 i‡(
NewSèã
 !
DISABLE
)

181 
SCB
->
SCR
 |
LowPowîMode
;

185 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

187 
	}
}

197 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

200 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

201 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

203 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

207 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

209 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c

22 
	~"°m32f10x_adc.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

50 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

51 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

54 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

55 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

58 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

59 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

62 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

65 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

71 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

72 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

75 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

76 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

79 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

82 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

85 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

88 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

89 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

92 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

93 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

96 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

99 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

100 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

103 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

106 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

110 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

111 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

114 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

117 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

118 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

122 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

125 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

128 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

129 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

133 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

136 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

139 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

178 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

181 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

183 i‡(
ADCx
 =
ADC1
)

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

188 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

190 i‡(
ADCx
 =
ADC2
)

193 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

199 i‡(
ADCx
 =
ADC3
)

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

207 
	}
}

217 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

219 
uöt32_t
 
tm¥eg1
 = 0;

220 
uöt8_t
 
tm¥eg2
 = 0;

222 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

223 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

224 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

227 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

228 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

232 
tm¥eg1
 = 
ADCx
->
CR1
;

234 
tm¥eg1
 &
CR1_CLEAR_Mask
;

238 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

240 
ADCx
->
CR1
 = 
tm¥eg1
;

244 
tm¥eg1
 = 
ADCx
->
CR2
;

246 
tm¥eg1
 &
CR2_CLEAR_Mask
;

251 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

252 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

254 
ADCx
->
CR2
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
SQR1
;

260 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

263 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

264 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

266 
ADCx
->
SQR1
 = 
tm¥eg1
;

267 
	}
}

274 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

278 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

280 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

282 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

284 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

286 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

288 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

289 
	}
}

298 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

301 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 i‡(
NewSèã
 !
DISABLE
)

306 
ADCx
->
CR2
 |
CR2_ADON_Së
;

311 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

313 
	}
}

323 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
ADCx
->
CR2
 |
CR2_DMA_Së
;

336 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

338 
	}
}

352 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
uöt8_t
 
ômask
 = 0;

356 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

360 
ômask
 = (
uöt8_t
)
ADC_IT
;

361 i‡(
NewSèã
 !
DISABLE
)

364 
ADCx
->
CR1
 |
ômask
;

369 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

371 
	}
}

378 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

381 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

383 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

384 
	}
}

391 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

393 
FœgSètus
 
bô°©us
 = 
RESET
;

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

397 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

400 
bô°©us
 = 
SET
;

405 
bô°©us
 = 
RESET
;

408  
bô°©us
;

409 
	}
}

416 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

419 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

421 
ADCx
->
CR2
 |
CR2_CAL_Së
;

422 
	}
}

429 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

431 
FœgSètus
 
bô°©us
 = 
RESET
;

433 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

435 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

438 
bô°©us
 = 
SET
;

443 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

456 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

461 i‡(
NewSèã
 !
DISABLE
)

465 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

471 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

473 
	}
}

480 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

482 
FœgSètus
 
bô°©us
 = 
RESET
;

484 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

486 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

489 
bô°©us
 = 
SET
;

494 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

508 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

510 
uöt32_t
 
tm¥eg1
 = 0;

511 
uöt32_t
 
tm¥eg2
 = 0;

513 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

514 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

516 
tm¥eg1
 = 
ADCx
->
CR1
;

518 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

520 
tm¥eg2
 = 
Numbî
 - 1;

521 
tm¥eg1
 |
tm¥eg2
 << 13;

523 
ADCx
->
CR1
 = 
tm¥eg1
;

524 
	}
}

535 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 !
DISABLE
)

543 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

548 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

550 
	}
}

589 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

591 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

593 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

594 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

596 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

598 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

601 
tm¥eg1
 = 
ADCx
->
SMPR1
;

603 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

605 
tm¥eg1
 &~
tm¥eg2
;

607 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

609 
tm¥eg1
 |
tm¥eg2
;

611 
ADCx
->
SMPR1
 = 
tm¥eg1
;

616 
tm¥eg1
 = 
ADCx
->
SMPR2
;

618 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

620 
tm¥eg1
 &~
tm¥eg2
;

622 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

624 
tm¥eg1
 |
tm¥eg2
;

626 
ADCx
->
SMPR2
 = 
tm¥eg1
;

629 i‡(
R™k
 < 7)

632 
tm¥eg1
 = 
ADCx
->
SQR3
;

634 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

636 
tm¥eg1
 &~
tm¥eg2
;

638 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

640 
tm¥eg1
 |
tm¥eg2
;

642 
ADCx
->
SQR3
 = 
tm¥eg1
;

645 i‡(
R™k
 < 13)

648 
tm¥eg1
 = 
ADCx
->
SQR2
;

650 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

652 
tm¥eg1
 &~
tm¥eg2
;

654 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

656 
tm¥eg1
 |
tm¥eg2
;

658 
ADCx
->
SQR2
 = 
tm¥eg1
;

664 
tm¥eg1
 = 
ADCx
->
SQR1
;

666 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

668 
tm¥eg1
 &~
tm¥eg2
;

670 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

672 
tm¥eg1
 |
tm¥eg2
;

674 
ADCx
->
SQR1
 = 
tm¥eg1
;

676 
	}
}

685 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

688 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

689 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

690 i‡(
NewSèã
 !
DISABLE
)

693 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

698 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

700 
	}
}

707 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

710 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

712  (
uöt16_t
Ë
ADCx
->
DR
;

713 
	}
}

719 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

722  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

723 
	}
}

733 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

736 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

737 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

738 i‡(
NewSèã
 !
DISABLE
)

741 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

746 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

748 
	}
}

759 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

772 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

774 
	}
}

798 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

800 
uöt32_t
 
tm¥eg
 = 0;

802 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

803 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

805 
tm¥eg
 = 
ADCx
->
CR2
;

807 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

809 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

811 
ADCx
->
CR2
 = 
tm¥eg
;

812 
	}
}

823 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

826 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

827 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

828 i‡(
NewSèã
 !
DISABLE
)

831 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

836 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

838 
	}
}

848 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

851 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

852 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

853 i‡(
NewSèã
 !
DISABLE
)

857 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

863 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

865 
	}
}

872 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

874 
FœgSètus
 
bô°©us
 = 
RESET
;

876 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

878 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

881 
bô°©us
 = 
SET
;

886 
bô°©us
 = 
RESET
;

889  
bô°©us
;

890 
	}
}

929 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

931 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

933 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

934 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

935 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

936 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

938 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

941 
tm¥eg1
 = 
ADCx
->
SMPR1
;

943 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

945 
tm¥eg1
 &~
tm¥eg2
;

947 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

949 
tm¥eg1
 |
tm¥eg2
;

951 
ADCx
->
SMPR1
 = 
tm¥eg1
;

956 
tm¥eg1
 = 
ADCx
->
SMPR2
;

958 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

960 
tm¥eg1
 &~
tm¥eg2
;

962 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

964 
tm¥eg1
 |
tm¥eg2
;

966 
ADCx
->
SMPR2
 = 
tm¥eg1
;

970 
tm¥eg1
 = 
ADCx
->
JSQR
;

972 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

974 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

976 
tm¥eg1
 &~
tm¥eg2
;

978 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

980 
tm¥eg1
 |
tm¥eg2
;

982 
ADCx
->
JSQR
 = 
tm¥eg1
;

983 
	}
}

992 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

994 
uöt32_t
 
tm¥eg1
 = 0;

995 
uöt32_t
 
tm¥eg2
 = 0;

997 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

998 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1001 
tm¥eg1
 = 
ADCx
->
JSQR
;

1003 
tm¥eg1
 &
JSQR_JL_Re£t
;

1005 
tm¥eg2
 = 
Lígth
 - 1;

1006 
tm¥eg1
 |
tm¥eg2
 << 20;

1008 
ADCx
->
JSQR
 = 
tm¥eg1
;

1009 
	}
}

1024 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1026 
__IO
 
uöt32_t
 
tmp
 = 0;

1029 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1030 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1031 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1033 
tmp
 = (
uöt32_t
)
ADCx
;

1034 
tmp
 +
ADC_Inje˘edCh™√l
;

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1038 
	}
}

1051 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1053 
__IO
 
uöt32_t
 
tmp
 = 0;

1056 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1057 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1059 
tmp
 = (
uöt32_t
)
ADCx
;

1060 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1063  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1064 
	}
}

1081 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1083 
uöt32_t
 
tm¥eg
 = 0;

1085 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1086 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1088 
tm¥eg
 = 
ADCx
->
CR1
;

1090 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1092 
tm¥eg
 |
ADC_A«logW©chdog
;

1094 
ADCx
->
CR1
 = 
tm¥eg
;

1095 
	}
}

1106 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1107 
uöt16_t
 
LowThªshﬁd
)

1110 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1111 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1114 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1116 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1117 
	}
}

1144 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1146 
uöt32_t
 
tm¥eg
 = 0;

1148 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1149 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1151 
tm¥eg
 = 
ADCx
->
CR1
;

1153 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1155 
tm¥eg
 |
ADC_Ch™√l
;

1157 
ADCx
->
CR1
 = 
tm¥eg
;

1158 
	}
}

1166 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1169 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1170 i‡(
NewSèã
 !
DISABLE
)

1173 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1178 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1180 
	}
}

1194 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1198 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1199 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1201 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1204 
bô°©us
 = 
SET
;

1209 
bô°©us
 = 
RESET
;

1212  
bô°©us
;

1213 
	}
}

1227 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1230 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1231 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1233 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1234 
	}
}

1246 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1251 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1252 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1254 
ômask
 = 
ADC_IT
 >> 8;

1256 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1258 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1261 
bô°©us
 = 
SET
;

1266 
bô°©us
 = 
RESET
;

1269  
bô°©us
;

1270 
	}
}

1282 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1284 
uöt8_t
 
ômask
 = 0;

1286 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1287 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1289 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1291 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1292 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c

22 
	~"°m32f10x_bkp.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

53 
	#TPAL_BôNumbî
 0x01

	)

54 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

57 
	#TPE_BôNumbî
 0x00

	)

58 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

64 
	#TPIE_BôNumbî
 0x02

	)

65 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

68 
	#TIF_BôNumbî
 0x09

	)

69 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

72 
	#TEF_BôNumbî
 0x08

	)

73 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

78 
	#RTCCR_CAL_Mask
 ((
uöt16_t
)0xFF80)

	)

79 
	#RTCCR_Mask
 ((
uöt16_t
)0xFC7F)

	)

82 
	#CSR_CTE_Së
 ((
uöt16_t
)0x0001)

	)

83 
	#CSR_CTI_Së
 ((
uöt16_t
)0x0002)

	)

123 
	$BKP_DeInô
()

125 
	`RCC_BackupRe£tCmd
(
ENABLE
);

126 
	`RCC_BackupRe£tCmd
(
DISABLE
);

127 
	}
}

137 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

140 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

142 
	}
}

150 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

153 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

154 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

155 
	}
}

163 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

167 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

168 
	}
}

183 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

185 
uöt16_t
 
tm¥eg
 = 0;

187 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

188 
tm¥eg
 = 
BKP
->
RTCCR
;

190 
tm¥eg
 &
RTCCR_Mask
;

193 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

195 
BKP
->
RTCCR
 = 
tm¥eg
;

196 
	}
}

204 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

206 
uöt16_t
 
tm¥eg
 = 0;

208 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

209 
tm¥eg
 = 
BKP
->
RTCCR
;

211 
tm¥eg
 &
RTCCR_CAL_Mask
;

213 
tm¥eg
 |
CÆibøti⁄VÆue
;

215 
BKP
->
RTCCR
 = 
tm¥eg
;

216 
	}
}

225 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

227 
__IO
 
uöt32_t
 
tmp
 = 0;

230 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

232 
tmp
 = (
uöt32_t
)
BKP_BASE
;

233 
tmp
 +
BKP_DR
;

235 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

236 
	}
}

244 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

246 
__IO
 
uöt32_t
 
tmp
 = 0;

249 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

251 
tmp
 = (
uöt32_t
)
BKP_BASE
;

252 
tmp
 +
BKP_DR
;

254  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

255 
	}
}

262 
FœgSètus
 
	$BKP_GëFœgSètus
()

264  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

265 
	}
}

272 
	$BKP_CÀ¨Fœg
()

275 
BKP
->
CSR
 |
CSR_CTE_Së
;

276 
	}
}

283 
ITSètus
 
	$BKP_GëITSètus
()

285  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

286 
	}
}

293 
	$BKP_CÀ¨ITPídögBô
()

296 
BKP
->
CSR
 |
CSR_CTI_Së
;

297 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c

22 
	~"°m32f10x_ˇn.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

48 
	#MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

49 
	#MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

50 
	#MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

51 
	#MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

52 
	#MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

53 
	#MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

54 
	#MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

55 
	#MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

56 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

59 
	#MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

60 
	#MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

61 
	#MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

64 
	#TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

65 
	#TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

66 
	#TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

67 
	#TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

68 
	#TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

69 
	#TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

70 
	#TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

71 
	#TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

72 
	#TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

73 
	#TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

74 
	#TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

75 
	#TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

78 
	#RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

79 
	#RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

80 
	#RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

83 
	#RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

84 
	#RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

85 
	#RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

88 
	#ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

89 
	#ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

90 
	#ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

96 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

99 
	#INAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

102 
	#SLAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

128 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

143 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

146 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

148 i‡(
CANx
 =
CAN1
)

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

162 
	}
}

173 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

175 
uöt8_t
 
InôSètus
 = 
CANINITFAILED
;

176 
uöt32_t
 
waô_ack
 = 0x00000000;

178 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

185 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

186 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

187 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

188 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

189 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

192 
CANx
->
MCR
 &~
MCR_SLEEP
;

195 
CANx
->
MCR
 |
MCR_INRQ
 ;

198 ((
CANx
->
MSR
 & 
MSR_INAK
Ë!MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

200 
waô_ack
++;

204 i‡((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK)

206 
InôSètus
 = 
CANINITFAILED
;

211 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

213 
CANx
->
MCR
 |
MCR_TTCM
;

217 
CANx
->
MCR
 &~
MCR_TTCM
;

221 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

223 
CANx
->
MCR
 |
MCR_ABOM
;

227 
CANx
->
MCR
 &~
MCR_ABOM
;

231 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

233 
CANx
->
MCR
 |
MCR_AWUM
;

237 
CANx
->
MCR
 &~
MCR_AWUM
;

241 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

243 
CANx
->
MCR
 |
MCR_NART
;

247 
CANx
->
MCR
 &~
MCR_NART
;

251 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

253 
CANx
->
MCR
 |
MCR_RFLM
;

257 
CANx
->
MCR
 &~
MCR_RFLM
;

261 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

263 
CANx
->
MCR
 |
MCR_TXFP
;

267 
CANx
->
MCR
 &~
MCR_TXFP
;

271 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_SJW
 << 24) |

272 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_BS2
 << 20) |

273 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

276 
CANx
->
MCR
 &~
MCR_INRQ
;

279 
waô_ack
 = 0x00;

281 ((
CANx
->
MSR
 & 
MSR_INAK
Ë=MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

283 
waô_ack
++;

287 i‡((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK)

289 
InôSètus
 = 
CANINITFAILED
;

293 
InôSètus
 = 
CANINITOK
 ;

298  
InôSètus
;

299 
	}
}

308 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

310 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

312 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

313 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

314 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

315 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

316 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

318 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)0x00000001Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

321 
CAN1
->
FMR
 |
FMR_FINIT
;

324 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

327 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

330 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

340 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

341 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

342 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

345 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

348 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

350 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

351 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

352 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

354 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

355 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

356 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

360 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

363 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

368 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

372 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO0
)

375 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

378 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO1
)

381 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

385 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

387 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

391 
CAN1
->
FMR
 &~
FMR_FINIT
;

392 
	}
}

400 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

404 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

406 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

408 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

410 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

412 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

414 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

416 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

418 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

420 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

422 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

424 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

425 
	}
}

433 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

436 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

438 
CAN1
->
FMR
 |
FMR_FINIT
;

440 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

441 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

443 
CAN1
->
FMR
 &~
FMR_FINIT
;

444 
	}
}

459 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

462 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

463 
	`as£π_∑øm
(
	`IS_CAN_ITC⁄fig
(
CAN_IT
));

464 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

466 i‡(
NewSèã
 !
DISABLE
)

469 
CANx
->
IER
 |
CAN_IT
;

474 
CANx
->
IER
 &~
CAN_IT
;

476 
	}
}

486 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

488 
uöt8_t
 
å™smô_maûbox
 = 0;

490 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

491 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

492 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

493 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

496 i‡((
CANx
->
TSR
&
TSR_TME0
) == TSR_TME0)

498 
å™smô_maûbox
 = 0;

500 i‡((
CANx
->
TSR
&
TSR_TME1
) == TSR_TME1)

502 
å™smô_maûbox
 = 1;

504 i‡((
CANx
->
TSR
&
TSR_TME2
) == TSR_TME2)

506 
å™smô_maûbox
 = 2;

510 
å™smô_maûbox
 = 
CAN_NO_MB
;

513 i‡(
å™smô_maûbox
 !
CAN_NO_MB
)

516 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

517 i‡(
TxMesßge
->
IDE
 =
CAN_ID_STD
)

519 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

520 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21Ë| TxMesßge->
RTR
);

524 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

525 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
<<3Ë| TxMesßge->
IDE
 |

526 
TxMesßge
->
RTR
);

531 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

532 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

533 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

536 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

537 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

538 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

539 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

540 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

541 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

542 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

543 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

547  
å™smô_maûbox
;

548 
	}
}

556 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

559 
uöt8_t
 
°©e
 = 0;

561 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

562 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

563 
TønsmôMaûbox
)

565 (0): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP0
) << 2);

566 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK0
) >> 0);

567 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME0
) >> 26);

569 (1): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP1
) >> 6);

570 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK1
) >> 8);

571 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME1
) >> 27);

573 (2): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP2
) >> 14);

574 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK2
) >> 16);

575 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME2
) >> 28);

578 
°©e
 = 
CANTXFAILED
;

581 
°©e
)

584 (0x0): 
°©e
 = 
CANTXPENDING
;

587 (0x5): 
°©e
 = 
CANTXFAILED
;

590 (0x7): 
°©e
 = 
CANTXOK
;

593 
°©e
 = 
CANTXFAILED
;

596  
°©e
;

597 
	}
}

605 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

608 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

609 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

611 
Maûbox
)

613 (0): 
CANx
->
TSR
 |
TSR_ABRQ0
;

615 (1): 
CANx
->
TSR
 |
TSR_ABRQ1
;

617 (2): 
CANx
->
TSR
 |
TSR_ABRQ2
;

622 
	}
}

630 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

633 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

634 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

636 i‡(
FIFONumbî
 =
CAN_FIFO0
)

638 
CANx
->
RF0R
 = 
RF0R_RFOM0
;

643 
CANx
->
RF1R
 = 
RF1R_RFOM1
;

645 
	}
}

653 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

655 
uöt8_t
 
mesßge_≥ndög
=0;

657 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

658 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

659 i‡(
FIFONumbî
 =
CAN_FIFO0
)

661 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

663 i‡(
FIFONumbî
 =
CAN_FIFO1
)

665 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

669 
mesßge_≥ndög
 = 0;

671  
mesßge_≥ndög
;

672 
	}
}

682 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

685 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

686 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

688 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 i‡(
RxMesßge
->
IDE
 =
CAN_ID_STD
)

691 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

695 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

698 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

700 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

702 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

704 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

705 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

706 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

707 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

708 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

709 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

710 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

711 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

713 
	`CAN_FIFORñó£
(
CANx
, 
FIFONumbî
);

714 
	}
}

723 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

727 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

729 i‡(
NewSèã
 !
DISABLE
)

732 
CANx
->
MCR
 |
MCR_DBF
;

737 
CANx
->
MCR
 &~
MCR_DBF
;

739 
	}
}

746 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

748 
uöt8_t
 
¶ìp°©us
 = 
CANSLEEPFAILED
;

751 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

754 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~
MCR_INRQ
)Ë| 
MCR_SLEEP
);

757 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

760 
¶ìp°©us
 = 
CANSLEEPOK
;

763  (
uöt8_t
)
¶ìp°©us
;

764 
	}
}

771 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

773 
uöt32_t
 
waô_¶ak
 = 
SLAK_TimeOut
 ;

774 
uöt8_t
 
wakeup°©us
 = 
CANWAKEUPFAILED
;

777 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

780 
CANx
->
MCR
 &~
MCR_SLEEP
;

783 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

785 
waô_¶ak
--;

787 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

790 
wakeup°©us
 = 
CANWAKEUPOK
;

793  (
uöt8_t
)
wakeup°©us
;

794 
	}
}

803 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

805 
FœgSètus
 
bô°©us
 = 
RESET
;

807 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

808 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

810 i‡((
CANx
->
ESR
 & 
CAN_FLAG
Ë!(
uöt32_t
)
RESET
)

813 
bô°©us
 = 
SET
;

818 
bô°©us
 = 
RESET
;

821  
bô°©us
;

822 
	}
}

830 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

833 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

834 
	`as£π_∑øm
(
	`IS_CAN_FLAG
(
CAN_FLAG
));

836 
CANx
->
ESR
 &~
CAN_FLAG
;

837 
	}
}

849 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

851 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

854 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

855 
CAN_IT
)

857 
CAN_IT_RQCP0
:

858 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP0
);

860 
CAN_IT_RQCP1
:

861 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP1
);

863 
CAN_IT_RQCP2
:

864 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP2
);

866 
CAN_IT_FF0
:

867 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FULL0
);

869 
CAN_IT_FOV0
:

870 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FOVR0
);

872 
CAN_IT_FF1
:

873 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FULL1
);

875 
CAN_IT_FOV1
:

876 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FOVR1
);

878 
CAN_IT_EWG
:

879 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EWGF
);

881 
CAN_IT_EPV
:

882 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EPVF
);

884 
CAN_IT_BOF
:

885 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_BOFF
);

887 
CAN_IT_SLK
:

888 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_SLAKI
);

890 
CAN_IT_WKU
:

891 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_WKUI
);

894 
≥ndögbô°©us
 = 
RESET
;

898  
≥ndögbô°©us
;

899 
	}
}

907 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

910 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

911 
	`as£π_∑øm
(
	`IS_CAN_ITSètus
(
CAN_IT
));

912 
CAN_IT
)

914 
CAN_IT_RQCP0
:

915 
CANx
->
TSR
 = 
TSR_RQCP0
;

917 
CAN_IT_RQCP1
:

918 
CANx
->
TSR
 = 
TSR_RQCP1
;

920 
CAN_IT_RQCP2
:

921 
CANx
->
TSR
 = 
TSR_RQCP2
;

923 
CAN_IT_FF0
:

924 
CANx
->
RF0R
 = 
RF0R_FULL0
;

926 
CAN_IT_FOV0
:

927 
CANx
->
RF0R
 = 
RF0R_FOVR0
;

929 
CAN_IT_FF1
:

930 
CANx
->
RF1R
 = 
RF1R_FULL1
;

932 
CAN_IT_FOV1
:

933 
CANx
->
RF1R
 = 
RF1R_FOVR1
;

935 
CAN_IT_EWG
:

936 
CANx
->
ESR
 &~ 
ESR_EWGF
;

938 
CAN_IT_EPV
:

939 
CANx
->
ESR
 &~ 
ESR_EPVF
;

941 
CAN_IT_BOF
:

942 
CANx
->
ESR
 &~ 
ESR_BOFF
;

944 
CAN_IT_WKU
:

945 
CANx
->
MSR
 = 
MSR_WKUI
;

947 
CAN_IT_SLK
:

948 
CANx
->
MSR
 = 
MSR_SLAKI
;

953 
	}
}

961 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

963 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

965 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

968 
≥ndögbô°©us
 = 
SET
;

973 
≥ndögbô°©us
 = 
RESET
;

975  
≥ndögbô°©us
;

976 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c

22 
	~"°m32f10x_˚c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

54 
	#PE_BôNumbî
 0x00

	)

55 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

58 
	#IE_BôNumbî
 0x01

	)

59 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

65 
	#TSOM_BôNumbî
 0x00

	)

66 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

69 
	#TEOM_BôNumbî
 0x01

	)

70 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

72 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

73 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

117 
	$CEC_DeInô
()

120 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

123 
	}
}

134 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

136 
uöt16_t
 
tm¥eg
 = 0;

139 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

144 
tm¥eg
 = 
CEC
->
CFGR
;

147 
tm¥eg
 &
CFGR_CLEAR_Mask
;

150 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

153 
CEC
->
CFGR
 = 
tm¥eg
;

155 
	}
}

163 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

166 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

168 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

170 if(
NewSèã
 =
DISABLE
)

173 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

177 
	}
}

185 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

188 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

190 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

191 
	}
}

198 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

201 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

204 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

205 
	}
}

212 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

215 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

218 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

219 
	}
}

226 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

229 
CEC
->
TXD
 = 
D©a
 ;

230 
	}
}

238 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

241  (
uöt8_t
)(
CEC
->
RXD
);

242 
	}
}

249 
	$CEC_SèπOfMesßge
()

252 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

253 
	}
}

261 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

268 
	}
}

290 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

292 
FœgSètus
 
bô°©us
 = 
RESET
;

293 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

296 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

299 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

302 
˚¸eg
 = 
CEC_FLAG
 >> 28;

305 
CEC_FLAG
 &
FLAG_Mask
;

307 if(
˚¸eg
 != 0)

310 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

313 
˚cba£
 += 0xC;

318 
˚cba£
 += 0x10;

321 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

324 
bô°©us
 = 
SET
;

329 
bô°©us
 = 
RESET
;

333  
bô°©us
;

334 
	}
}

348 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

350 
uöt32_t
 
tmp
 = 0x0;

353 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

355 
tmp
 = 
CEC
->
CSR
 & 0x2;

358 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

359 
	}
}

371 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

373 
ITSètus
 
bô°©us
 = 
RESET
;

374 
uöt32_t
 
íabÀ°©us
 = 0;

377 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

380 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

383 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

386 
bô°©us
 = 
SET
;

391 
bô°©us
 = 
RESET
;

394  
bô°©us
;

395 
	}
}

407 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

409 
uöt32_t
 
tmp
 = 0x0;

412 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

414 
tmp
 = 
CEC
->
CSR
 & 0x2;

417 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

418 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c

22 
	~"°m32f10x_¸c.h
"

47 
	#CR_RESET_Së
 ((
uöt32_t
)0x00000001)

	)

86 
	$CRC_Re£tDR
()

89 
CRC
->
CR
 = 
CR_RESET_Së
;

90 
	}
}

97 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

99 
CRC
->
DR
 = 
D©a
;

101  (
CRC
->
DR
);

102 
	}
}

110 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

112 
uöt32_t
 
ödex
 = 0;

114 
ödex
 = 0; index < 
Buf„rLígth
; index++)

116 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

118  (
CRC
->
DR
);

119 
	}
}

126 
uöt32_t
 
	$CRC_GëCRC
()

128  (
CRC
->
DR
);

129 
	}
}

136 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

138 
CRC
->
IDR
 = 
IDVÆue
;

139 
	}
}

146 
uöt8_t
 
	$CRC_GëIDRegi°î
()

148  (
CRC
->
IDR
);

149 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c

22 
	~"°m32f10x_dac.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR_EN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#CR_DMAEN_Së
 ((
uöt32_t
)0x00001000)

	)

53 
	#CR_CLEAR_Mask
 ((
uöt32_t
)0x00000FFE)

	)

56 
	#SWTRIGR_SWTRIG_Së
 ((
uöt32_t
)0x00000001)

	)

59 
	#DUAL_SWTRIG_Së
 ((
uöt32_t
)0x00000003)

	)

60 
	#DUAL_SWTRIG_Re£t
 ((
uöt32_t
)0xFFFFFFFC)

	)

63 
	#DHR12R1_Off£t
 ((
uöt32_t
)0x00000008)

	)

64 
	#DHR12R2_Off£t
 ((
uöt32_t
)0x00000014)

	)

65 
	#DHR12RD_Off£t
 ((
uöt32_t
)0x00000020)

	)

68 
	#DOR_Off£t
 ((
uöt32_t
)0x0000002C)

	)

106 
	$DAC_DeInô
()

109 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

111 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

112 
	}
}

125 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

127 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

129 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

130 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

131 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

132 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

135 
tm¥eg1
 = 
DAC
->
CR
;

137 
tm¥eg1
 &~(
CR_CLEAR_Mask
 << 
DAC_Ch™√l
);

144 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

145 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

147 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

149 
DAC
->
CR
 = 
tm¥eg1
;

150 
	}
}

158 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

162 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

164 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

166 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

168 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

169 
	}
}

181 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

184 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

185 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

186 i‡(
NewSèã
 !
DISABLE
)

189 
DAC
->
CR
 |
CR_EN_Së
 << 
DAC_Ch™√l
;

194 
DAC
->
CR
 &~(
CR_EN_Së
 << 
DAC_Ch™√l
);

196 
	}
}

197 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

211 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

214 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

216 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

218 i‡(
NewSèã
 !
DISABLE
)

221 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

226 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

228 
	}
}

241 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

244 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

245 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

246 i‡(
NewSèã
 !
DISABLE
)

249 
DAC
->
CR
 |
CR_DMAEN_Së
 << 
DAC_Ch™√l
;

254 
DAC
->
CR
 &~(
CR_DMAEN_Së
 << 
DAC_Ch™√l
);

256 
	}
}

268 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

272 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
DAC
->
SWTRIGR
 |
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4);

281 
DAC
->
SWTRIGR
 &~(
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4));

283 
	}
}

292 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

296 i‡(
NewSèã
 !
DISABLE
)

299 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_Së
 ;

304 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_Re£t
;

306 
	}
}

322 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

327 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

328 i‡(
NewSèã
 !
DISABLE
)

331 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

336 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

338 
	}
}

350 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

352 
__IO
 
uöt32_t
 
tmp
 = 0;

355 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

356 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

358 
tmp
 = (
uöt32_t
)
DAC_BASE
;

359 
tmp
 +
DHR12R1_Off£t
 + 
DAC_Align
;

362 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

363 
	}
}

375 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

377 
__IO
 
uöt32_t
 
tmp
 = 0;

380 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

381 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

383 
tmp
 = (
uöt32_t
)
DAC_BASE
;

384 
tmp
 +
DHR12R2_Off£t
 + 
DAC_Align
;

387 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

388 
	}
}

404 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

406 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

409 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

410 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

411 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

414 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

416 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

420 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

423 
tmp
 = (
uöt32_t
)
DAC_BASE
;

424 
tmp
 +
DHR12RD_Off£t
 + 
DAC_Align
;

427 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

428 
	}
}

438 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

440 
__IO
 
uöt32_t
 
tmp
 = 0;

443 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

445 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

446 
tmp
 +
DOR_Off£t
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

449  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

450 
	}
}

452 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

464 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

466 
FœgSètus
 
bô°©us
 = 
RESET
;

468 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

469 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

472 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

475 
bô°©us
 = 
SET
;

480 
bô°©us
 = 
RESET
;

483  
bô°©us
;

484 
	}
}

497 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

500 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

501 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

504 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

505 
	}
}

518 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

520 
ITSètus
 
bô°©us
 = 
RESET
;

521 
uöt32_t
 
íabÀ°©us
 = 0;

524 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

525 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

528 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

531 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

534 
bô°©us
 = 
SET
;

539 
bô°©us
 = 
RESET
;

542  
bô°©us
;

543 
	}
}

556 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

559 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

560 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

563 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

564 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c

22 
	~"°m32f10x_dbgmcu.h
"

45 
	#IDCODE_DEVID_Mask
 ((
uöt32_t
)0x00000FFF)

	)

83 
uöt32_t
 
	$DBGMCU_GëREVID
()

85 (
DBGMCU
->
IDCODE
 >> 16);

86 
	}
}

93 
uöt32_t
 
	$DBGMCU_GëDEVID
()

95 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_Mask
);

96 
	}
}

133 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

139 i‡(
NewSèã
 !
DISABLE
)

141 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

145 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

147 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c

22 
	~"°m32f10x_dma.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CCR_ENABLE_Së
 ((
uöt32_t
)0x00000001)

	)

47 
	#CCR_ENABLE_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

50 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

51 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

52 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

53 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

54 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

55 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)0x00F00000)

	)

56 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)0x0F000000)

	)

59 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

60 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

61 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

62 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

63 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

66 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

69 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

110 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

113 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

115 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
CCR_ENABLE_Së
;

308 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

352 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

355 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

357  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

358 
	}
}

414 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
tm¥eg
 = 0;

419 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

422 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

425 
tm¥eg
 = 
DMA2
->
ISR
 ;

430 
tm¥eg
 = 
DMA1
->
ISR
 ;

434 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

437 
bô°©us
 = 
SET
;

442 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

503 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
)

506 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

509 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

512 
DMA2
->
IFCR
 = 
DMA_FLAG
;

517 
DMA1
->
IFCR
 = 
DMA_FLAG
;

519 
	}
}

575 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMA_IT
)

577 
ITSètus
 
bô°©us
 = 
RESET
;

578 
uöt32_t
 
tm¥eg
 = 0;

580 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

583 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

586 
tm¥eg
 = 
DMA2
->
ISR
 ;

591 
tm¥eg
 = 
DMA1
->
ISR
 ;

595 i‡((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
)

598 
bô°©us
 = 
SET
;

603 
bô°©us
 = 
RESET
;

606  
bô°©us
;

607 
	}
}

663 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
)

666 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

669 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

672 
DMA2
->
IFCR
 = 
DMA_IT
;

677 
DMA1
->
IFCR
 = 
DMA_IT
;

679 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c

22 
	~"°m32f10x_exti.h
"

45 
	#EXTI_LöeN⁄e
 ((
uöt32_t
)0x00000Ë

	)

84 
	$EXTI_DeInô
()

86 
EXTI
->
IMR
 = 0x00000000;

87 
EXTI
->
EMR
 = 0x00000000;

88 
EXTI
->
RTSR
 = 0x00000000;

89 
EXTI
->
FTSR
 = 0x00000000;

90 
EXTI
->
PR
 = 0x000FFFFF;

91 
	}
}

100 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

102 
uöt32_t
 
tmp
 = 0;

105 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

106 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

107 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

110 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

112 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

115 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

116 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

118 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

120 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

123 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

127 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

130 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

131 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

136 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

138 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

146 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
	}
}

156 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

158 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LöeN⁄e
;

159 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

160 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

161 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

162 
	}
}

170 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

173 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

175 
EXTI
->
SWIER
 |
EXTI_Löe
;

176 
	}
}

185 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

187 
FœgSètus
 
bô°©us
 = 
RESET
;

189 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

191 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

193 
bô°©us
 = 
SET
;

197 
bô°©us
 = 
RESET
;

199  
bô°©us
;

200 
	}
}

208 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

211 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

213 
EXTI
->
PR
 = 
EXTI_Löe
;

214 
	}
}

223 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

225 
ITSètus
 
bô°©us
 = 
RESET
;

226 
uöt32_t
 
íabÀ°©us
 = 0;

228 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

230 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

231 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

233 
bô°©us
 = 
SET
;

237 
bô°©us
 = 
RESET
;

239  
bô°©us
;

240 
	}
}

248 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

251 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

253 
EXTI
->
PR
 = 
EXTI_Löe
;

254 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c

22 
	~"°m32f10x_Êash.h
"

46 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

47 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

48 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

51 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

54 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

55 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

56 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

57 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

58 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

59 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

60 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

61 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

62 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

63 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

64 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

65 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

68 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

69 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

70 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

71 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

72 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

73 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

76 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

77 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

78 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

81 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

84 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

85 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

253 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

255 
uöt32_t
 
tm¥eg
 = 0;

258 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

261 
tm¥eg
 = 
FLASH
->
ACR
;

264 
tm¥eg
 &
ACR_LATENCY_Mask
;

265 
tm¥eg
 |
FLASH_L©ícy
;

268 
FLASH
->
ACR
 = 
tm¥eg
;

269 
	}
}

280 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

283 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

286 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

287 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

288 
	}
}

299 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

302 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

305 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

306 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

307 
	}
}

318 
	$FLASH_U∆ock
()

321 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

322 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

324 #ifde‡
STM32F10X_XL


326 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

327 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

329 
	}
}

339 
	$FLASH_U∆ockB™k1
()

342 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

343 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

344 
	}
}

346 #ifde‡
STM32F10X_XL


353 
	$FLASH_U∆ockB™k2
()

356 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

357 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

359 
	}
}

371 
	$FLASH_Lock
()

374 
FLASH
->
CR
 |
CR_LOCK_Së
;

376 #ifde‡
STM32F10X_XL


378 
FLASH
->
CR2
 |
CR_LOCK_Së
;

380 
	}
}

391 
	$FLASH_LockB™k1
()

394 
FLASH
->
CR
 |
CR_LOCK_Së
;

395 
	}
}

397 #ifde‡
STM32F10X_XL


404 
	$FLASH_LockB™k2
()

407 
FLASH
->
CR2
 |
CR_LOCK_Së
;

408 
	}
}

418 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

420 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

422 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

424 #ifde‡
STM32F10X_XL


425 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

428 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

429 if(
°©us
 =
FLASH_COMPLETE
)

432 
FLASH
->
CR
|
CR_PER_Së
;

433 
FLASH
->
AR
 = 
Page_Addªss
;

434 
FLASH
->
CR
|
CR_STRT_Së
;

437 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

438 if(
°©us
 !
FLASH_TIMEOUT
)

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

448 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

449 if(
°©us
 =
FLASH_COMPLETE
)

452 
FLASH
->
CR2
|
CR_PER_Së
;

453 
FLASH
->
AR2
 = 
Page_Addªss
;

454 
FLASH
->
CR2
|
CR_STRT_Së
;

457 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

458 if(
°©us
 !
FLASH_TIMEOUT
)

461 
FLASH
->
CR2
 &
CR_PER_Re£t
;

467 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

469 if(
°©us
 =
FLASH_COMPLETE
)

472 
FLASH
->
CR
|
CR_PER_Së
;

473 
FLASH
->
AR
 = 
Page_Addªss
;

474 
FLASH
->
CR
|
CR_STRT_Së
;

477 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

478 if(
°©us
 !
FLASH_TIMEOUT
)

481 
FLASH
->
CR
 &
CR_PER_Re£t
;

487  
°©us
;

488 
	}
}

497 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

499 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

501 #ifde‡
STM32F10X_XL


503 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

505 if(
°©us
 =
FLASH_COMPLETE
)

508 
FLASH
->
CR
 |
CR_MER_Së
;

509 
FLASH
->
CR
 |
CR_STRT_Së
;

512 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

513 if(
°©us
 !
FLASH_TIMEOUT
)

516 
FLASH
->
CR
 &
CR_MER_Re£t
;

519 if(
°©us
 =
FLASH_COMPLETE
)

522 
FLASH
->
CR2
 |
CR_MER_Së
;

523 
FLASH
->
CR2
 |
CR_STRT_Së
;

526 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 !
FLASH_TIMEOUT
)

530 
FLASH
->
CR2
 &
CR_MER_Re£t
;

535 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

536 if(
°©us
 =
FLASH_COMPLETE
)

539 
FLASH
->
CR
 |
CR_MER_Së
;

540 
FLASH
->
CR
 |
CR_STRT_Së
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

544 if(
°©us
 !
FLASH_TIMEOUT
)

547 
FLASH
->
CR
 &
CR_MER_Re£t
;

553  
°©us
;

554 
	}
}

566 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

568 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

570 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

572 if(
°©us
 =
FLASH_COMPLETE
)

575 
FLASH
->
CR
 |
CR_MER_Së
;

576 
FLASH
->
CR
 |
CR_STRT_Së
;

579 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

580 if(
°©us
 !
FLASH_TIMEOUT
)

583 
FLASH
->
CR
 &
CR_MER_Re£t
;

587  
°©us
;

588 
	}
}

590 #ifde‡
STM32F10X_XL


598 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

600 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

602 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

604 if(
°©us
 =
FLASH_COMPLETE
)

607 
FLASH
->
CR2
 |
CR_MER_Së
;

608 
FLASH
->
CR2
 |
CR_STRT_Së
;

611 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

612 if(
°©us
 !
FLASH_TIMEOUT
)

615 
FLASH
->
CR2
 &
CR_MER_Re£t
;

619  
°©us
;

620 
	}
}

631 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

633 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

635 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

638 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

640 
rd±mp
 = 0x00;

644 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

645 if(
°©us
 =
FLASH_COMPLETE
)

648 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

649 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

652 
FLASH
->
CR
 |
CR_OPTER_Së
;

653 
FLASH
->
CR
 |
CR_STRT_Së
;

655 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

657 if(
°©us
 =
FLASH_COMPLETE
)

660 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

663 
FLASH
->
CR
 |
CR_OPTPG_Së
;

665 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

667 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

669 if(
°©us
 !
FLASH_TIMEOUT
)

672 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

677 i‡(
°©us
 !
FLASH_TIMEOUT
)

680 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

685  
°©us
;

686 
	}
}

696 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

698 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

699 
__IO
 
uöt32_t
 
tmp
 = 0;

702 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

704 #ifde‡
STM32F10X_XL


705 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

708 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

709 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 |
CR_PG_Së
;

715 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

717 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

719 if(
°©us
 =
FLASH_COMPLETE
)

723 
tmp
 = 
Addªss
 + 2;

725 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

728 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 !
FLASH_TIMEOUT
)

733 
FLASH
->
CR
 &
CR_PG_Re£t
;

738 i‡(
°©us
 !
FLASH_TIMEOUT
)

741 
FLASH
->
CR
 &
CR_PG_Re£t
;

746 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

749 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

751 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 |
CR_PG_Së
;

757 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

760 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

762 if(
°©us
 !
FLASH_TIMEOUT
)

765 
FLASH
->
CR
 &
CR_PG_Re£t
;

770 i‡(
°©us
 !
FLASH_TIMEOUT
)

773 
FLASH
->
CR
 &
CR_PG_Re£t
;

778 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

780 if(
°©us
 =
FLASH_COMPLETE
)

784 
FLASH
->
CR2
 |
CR_PG_Së
;

785 
tmp
 = 
Addªss
 + 2;

787 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

790 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

792 if(
°©us
 !
FLASH_TIMEOUT
)

795 
FLASH
->
CR2
 &
CR_PG_Re£t
;

800 i‡(
°©us
 !
FLASH_TIMEOUT
)

803 
FLASH
->
CR2
 &
CR_PG_Re£t
;

810 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

812 if(
°©us
 =
FLASH_COMPLETE
)

816 
FLASH
->
CR2
 |
CR_PG_Së
;

818 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

820 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

822 if(
°©us
 =
FLASH_COMPLETE
)

826 
tmp
 = 
Addªss
 + 2;

828 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

831 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

833 if(
°©us
 !
FLASH_TIMEOUT
)

836 
FLASH
->
CR2
 &
CR_PG_Re£t
;

841 i‡(
°©us
 !
FLASH_TIMEOUT
)

844 
FLASH
->
CR2
 &
CR_PG_Re£t
;

851 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

853 if(
°©us
 =
FLASH_COMPLETE
)

857 
FLASH
->
CR
 |
CR_PG_Së
;

859 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

861 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

863 if(
°©us
 =
FLASH_COMPLETE
)

867 
tmp
 = 
Addªss
 + 2;

869 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

872 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

874 if(
°©us
 !
FLASH_TIMEOUT
)

877 
FLASH
->
CR
 &
CR_PG_Re£t
;

882 i‡(
°©us
 !
FLASH_TIMEOUT
)

885 
FLASH
->
CR
 &
CR_PG_Re£t
;

892  
°©us
;

893 
	}
}

903 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

905 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

907 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

909 #ifde‡
STM32F10X_XL


911 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

913 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

915 if(
°©us
 =
FLASH_COMPLETE
)

918 
FLASH
->
CR
 |
CR_PG_Së
;

920 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

922 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

923 if(
°©us
 !
FLASH_TIMEOUT
)

926 
FLASH
->
CR
 &
CR_PG_Re£t
;

932 if(
°©us
 =
FLASH_COMPLETE
)

935 
FLASH
->
CR2
 |
CR_PG_Së
;

937 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

939 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

940 if(
°©us
 !
FLASH_TIMEOUT
)

943 
FLASH
->
CR2
 &
CR_PG_Re£t
;

949 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

951 if(
°©us
 =
FLASH_COMPLETE
)

954 
FLASH
->
CR
 |
CR_PG_Së
;

956 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

958 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

959 if(
°©us
 !
FLASH_TIMEOUT
)

962 
FLASH
->
CR
 &
CR_PG_Re£t
;

968  
°©us
;

969 
	}
}

980 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

982 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

984 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

985 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

987 if(
°©us
 =
FLASH_COMPLETE
)

990 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

991 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

993 
FLASH
->
CR
 |
CR_OPTPG_Së
;

994 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

997 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

998 if(
°©us
 !
FLASH_TIMEOUT
)

1001 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1005  
°©us
;

1006 
	}
}

1026 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

1028 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

1030 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1033 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

1035 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

1036 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

1037 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

1038 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

1039 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

1042 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1044 if(
°©us
 =
FLASH_COMPLETE
)

1047 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1048 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1049 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1050 if(
WRP0_D©a
 != 0xFF)

1052 
OB
->
WRP0
 = 
WRP0_D©a
;

1055 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1057 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1059 
OB
->
WRP1
 = 
WRP1_D©a
;

1062 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1064 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1066 
OB
->
WRP2
 = 
WRP2_D©a
;

1069 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1072 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1074 
OB
->
WRP3
 = 
WRP3_D©a
;

1077 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1080 if(
°©us
 !
FLASH_TIMEOUT
)

1083 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1087  
°©us
;

1088 
	}
}

1100 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1105 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1106 if(
°©us
 =
FLASH_COMPLETE
)

1109 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1110 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1111 
FLASH
->
CR
 |
CR_OPTER_Së
;

1112 
FLASH
->
CR
 |
CR_STRT_Së
;

1114 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1115 if(
°©us
 =
FLASH_COMPLETE
)

1118 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1120 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1121 if(
NewSèã
 !
DISABLE
)

1123 
OB
->
RDP
 = 0x00;

1127 
OB
->
RDP
 = 
RDP_Key
;

1130 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1132 if(
°©us
 !
FLASH_TIMEOUT
)

1135 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1140 if(
°©us
 !
FLASH_TIMEOUT
)

1143 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1148  
°©us
;

1149 
	}
}

1169 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1171 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1174 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1175 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1176 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1179 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1180 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1183 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1185 if(
°©us
 =
FLASH_COMPLETE
)

1188 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1190 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1193 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1194 if(
°©us
 !
FLASH_TIMEOUT
)

1197 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1201  
°©us
;

1202 
	}
}

1204 #ifde‡
STM32F10X_XL


1223 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1225 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1226 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1228 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1229 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1232 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1234 if(
°©us
 =
FLASH_COMPLETE
)

1237 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1239 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1241 
OB
->
USER
 |
OB_USER_BFB2
;

1245 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1248 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1249 if(
°©us
 !
FLASH_TIMEOUT
)

1252 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1256  
°©us
;

1257 
	}
}

1267 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1270  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1271 
	}
}

1279 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1282  (
uöt32_t
)(
FLASH
->
WRPR
);

1283 
	}
}

1291 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1293 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1294 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1296 
ªadout°©us
 = 
SET
;

1300 
ªadout°©us
 = 
RESET
;

1302  
ªadout°©us
;

1303 
	}
}

1311 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1313 
FœgSètus
 
bô°©us
 = 
RESET
;

1315 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1317 
bô°©us
 = 
SET
;

1321 
bô°©us
 = 
RESET
;

1324  
bô°©us
;

1325 
	}
}

1341 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1343 #ifde‡
STM32F10X_XL


1345 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1348 if((
FLASH_IT
 & 0x80000000) != 0x0)

1350 if(
NewSèã
 !
DISABLE
)

1353 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1358 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1363 if(
NewSèã
 !
DISABLE
)

1366 
FLASH
->
CR
 |
FLASH_IT
;

1371 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1376 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1379 if(
NewSèã
 !
DISABLE
)

1382 
FLASH
->
CR
 |
FLASH_IT
;

1387 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1390 
	}
}

1408 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1410 
FœgSètus
 
bô°©us
 = 
RESET
;

1412 #ifde‡
STM32F10X_XL


1414 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1415 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1417 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1419 
bô°©us
 = 
SET
;

1423 
bô°©us
 = 
RESET
;

1428 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1430 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1432 
bô°©us
 = 
SET
;

1436 
bô°©us
 = 
RESET
;

1441 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1443 
bô°©us
 = 
SET
;

1447 
bô°©us
 = 
RESET
;

1453 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1454 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1456 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1458 
bô°©us
 = 
SET
;

1462 
bô°©us
 = 
RESET
;

1467 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1469 
bô°©us
 = 
SET
;

1473 
bô°©us
 = 
RESET
;

1479  
bô°©us
;

1480 
	}
}

1494 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1496 #ifde‡
STM32F10X_XL


1498 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1500 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1503 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1508 
FLASH
->
SR
 = 
FLASH_FLAG
;

1513 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1516 
FLASH
->
SR
 = 
FLASH_FLAG
;

1518 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1540 
Êash°©us
 = 
FLASH_ERROR_PG
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1546 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1550 
Êash°©us
 = 
FLASH_COMPLETE
;

1555  
Êash°©us
;

1556 
	}
}

1566 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1568 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1570 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1572 
Êash°©us
 = 
FLASH_BUSY
;

1576 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1578 
Êash°©us
 = 
FLASH_ERROR_PG
;

1582 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1584 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1588 
Êash°©us
 = 
FLASH_COMPLETE
;

1593  
Êash°©us
;

1594 
	}
}

1596 #ifde‡
STM32F10X_XL


1604 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1606 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1608 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1610 
Êash°©us
 = 
FLASH_BUSY
;

1614 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1616 
Êash°©us
 = 
FLASH_ERROR_PG
;

1620 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1622 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1626 
Êash°©us
 = 
FLASH_COMPLETE
;

1631  
Êash°©us
;

1632 
	}
}

1646 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1648 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1651 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1653 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1655 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1656 
Timeout
--;

1658 if(
Timeout
 == 0x00 )

1660 
°©us
 = 
FLASH_TIMEOUT
;

1663  
°©us
;

1664 
	}
}

1674 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1676 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1679 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1681 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1683 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1684 
Timeout
--;

1686 if(
Timeout
 == 0x00 )

1688 
°©us
 = 
FLASH_TIMEOUT
;

1691  
°©us
;

1692 
	}
}

1694 #ifde‡
STM32F10X_XL


1702 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1704 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1707 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1709 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1711 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1712 
Timeout
--;

1714 if(
Timeout
 == 0x00 )

1716 
°©us
 = 
FLASH_TIMEOUT
;

1719  
°©us
;

1720 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c

22 
	~"°m32f10x_fsmc.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

49 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

50 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

53 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

54 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

55 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

56 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

57 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

101 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

104 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

107 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

109 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

114 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

116 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

117 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

118 
	}
}

128 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

131 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

133 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

136 
FSMC_B™k2
->
PCR2
 = 0x00000018;

137 
FSMC_B™k2
->
SR2
 = 0x00000040;

138 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

139 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

145 
FSMC_B™k3
->
PCR3
 = 0x00000018;

146 
FSMC_B™k3
->
SR3
 = 0x00000040;

147 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

148 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

150 
	}
}

157 
	$FSMC_PCCARDDeInô
()

160 
FSMC_B™k4
->
PCR4
 = 0x00000018;

161 
FSMC_B™k4
->
SR4
 = 0x00000000;

162 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

163 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

165 
	}
}

175 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

178 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

179 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

182 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

183 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

184 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

188 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

190 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

191 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

192 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

194 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

195 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

196 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

199 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

200 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

201 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

202 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

211 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

213 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

216 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

217 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

218 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

219 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

223 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

227 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

229 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

230 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

231 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

232 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

233 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

234 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

235 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

236 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

237 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

238 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

239 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

240 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

245 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

247 
	}
}

256 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

258 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

261 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

262 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

263 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

264 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

265 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

266 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

267 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

268 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

269 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

270 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

271 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

272 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

273 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

279 
PCR_Mem‹yTy≥_NAND
 |

280 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

281 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

282 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

283 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

284 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

287 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

288 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

289 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

290 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

293 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

298 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

301 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

302 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

303 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

308 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

309 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

310 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

312 
	}
}

321 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

324 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

325 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

326 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

328 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

329 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

330 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

331 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

334 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

339 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

343 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

344 
FSMC_Mem‹yD©aWidth_16b
 |

345 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

346 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

349 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

350 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

351 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

355 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

356 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

361 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

362 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

365 
	}
}

373 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

376 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

377 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

378 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

379 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

380 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

381 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

382 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

402 
	}
}

410 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

413 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

414 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

415 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

416 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

417 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

418 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

419 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

420 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

421 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

422 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

423 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

424 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

425 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

426 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

427 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

428 
	}
}

436 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

439 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

440 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

441 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

442 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

443 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

444 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

445 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

446 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

447 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
	}
}

467 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

469 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

470 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

472 i‡(
NewSèã
 !
DISABLE
)

475 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

480 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

482 
	}
}

493 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

503 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

507 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

513 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

515 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

519 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

522 
	}
}

530 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 i‡(
NewSèã
 !
DISABLE
)

537 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

542 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

544 
	}
}

556 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(
NewSèã
 !
DISABLE
)

564 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

566 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

570 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

576 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

578 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

582 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

585 
	}
}

595 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

597 
uöt32_t
 
eccvÆ
 = 0x00000000;

599 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

602 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

607 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

610 (
eccvÆ
);

611 
	}
}

629 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

631 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

632 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

633 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

635 i‡(
NewSèã
 !
DISABLE
)

638 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

640 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

643 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

645 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

650 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

656 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

659 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

662 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

664 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

669 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

672 
	}
}

689 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

691 
FœgSètus
 
bô°©us
 = 
RESET
;

692 
uöt32_t
 
tmp§
 = 0x00000000;

695 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

696 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

698 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

700 
tmp§
 = 
FSMC_B™k2
->
SR2
;

702 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

704 
tmp§
 = 
FSMC_B™k3
->
SR3
;

709 
tmp§
 = 
FSMC_B™k4
->
SR4
;

713 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

715 
bô°©us
 = 
SET
;

719 
bô°©us
 = 
RESET
;

722  
bô°©us
;

723 
	}
}

739 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

742 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

743 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

745 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

747 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

749 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

751 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

756 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

758 
	}
}

774 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

776 
ITSètus
 
bô°©us
 = 
RESET
;

777 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

780 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

781 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

783 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

785 
tmp§
 = 
FSMC_B™k2
->
SR2
;

787 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

789 
tmp§
 = 
FSMC_B™k3
->
SR3
;

794 
tmp§
 = 
FSMC_B™k4
->
SR4
;

797 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

799 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

800 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

802 
bô°©us
 = 
SET
;

806 
bô°©us
 = 
RESET
;

808  
bô°©us
;

809 
	}
}

825 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

828 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

829 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

831 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

833 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

835 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

837 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

842 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

844 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c

22 
	~"°m32f10x_gpio.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

52 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

53 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

54 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

59 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

60 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

61 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

64 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

65 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

66 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

67 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

68 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

69 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

107 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

110 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

112 i‡(
GPIOx
 =
GPIOA
)

114 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

117 i‡(
GPIOx
 =
GPIOB
)

119 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

122 i‡(
GPIOx
 =
GPIOC
)

124 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

127 i‡(
GPIOx
 =
GPIOD
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

132 i‡(
GPIOx
 =
GPIOE
)

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOF
)

139 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

144 i‡(
GPIOx
 =
GPIOG
)

146 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

150 
	}
}

158 
	$GPIO_AFIODeInô
()

160 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

162 
	}
}

172 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

174 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

175 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

177 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

178 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

179 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

182 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

183 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

186 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

188 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

192 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

194 
tm¥eg
 = 
GPIOx
->
CRL
;

195 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

197 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

199 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

200 i‡(
cuºíçö
 =
pos
)

202 
pos
 = 
pöpos
 << 2;

204 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

205 
tm¥eg
 &~
pömask
;

207 
tm¥eg
 |(
cuºítmode
 << 
pos
);

209 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

211 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

216 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

218 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

223 
GPIOx
->
CRL
 = 
tm¥eg
;

227 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

229 
tm¥eg
 = 
GPIOx
->
CRH
;

230 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

232 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

234 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

235 i‡(
cuºíçö
 =
pos
)

237 
pos
 = 
pöpos
 << 2;

239 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

240 
tm¥eg
 &~
pömask
;

242 
tm¥eg
 |(
cuºítmode
 << 
pos
);

244 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

246 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

249 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

251 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

255 
GPIOx
->
CRH
 = 
tm¥eg
;

257 
	}
}

265 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

268 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

269 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

270 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

271 
	}
}

280 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

282 
uöt8_t
 
bô°©us
 = 0x00;

285 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

286 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

288 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

290 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

294 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

296  
bô°©us
;

297 
	}
}

304 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

307 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

309  ((
uöt16_t
)
GPIOx
->
IDR
);

310 
	}
}

319 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

321 
uöt8_t
 
bô°©us
 = 0x00;

323 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

324 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

326 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

328 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

332 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

334  
bô°©us
;

335 
	}
}

342 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

345 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

347  ((
uöt16_t
)
GPIOx
->
ODR
);

348 
	}
}

357 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

360 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

361 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

363 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

364 
	}
}

373 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

376 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

377 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

379 
GPIOx
->
BRR
 = 
GPIO_Pö
;

380 
	}
}

393 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

396 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

398 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

400 i‡(
BôVÆ
 !
Bô_RESET
)

402 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

406 
GPIOx
->
BRR
 = 
GPIO_Pö
;

408 
	}
}

416 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

419 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

421 
GPIOx
->
ODR
 = 
P‹tVÆ
;

422 
	}
}

431 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

433 
uöt32_t
 
tmp
 = 0x00010000;

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
tmp
 |
GPIO_Pö
;

441 
GPIOx
->
LCKR
 = 
tmp
;

443 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

445 
GPIOx
->
LCKR
 = 
tmp
;

447 
tmp
 = 
GPIOx
->
LCKR
;

449 
tmp
 = 
GPIOx
->
LCKR
;

450 
	}
}

461 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

463 
uöt32_t
 
tm¥eg
 = 0x00;

465 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

466 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

468 
tm¥eg
 = 
AFIO
->
EVCR
;

470 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

471 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

472 
tm¥eg
 |
GPIO_PöSour˚
;

473 
AFIO
->
EVCR
 = 
tm¥eg
;

474 
	}
}

482 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

488 
	}
}

541 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

543 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

546 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

547 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

551 
tm¥eg
 = 
AFIO
->
MAPR2
;

555 
tm¥eg
 = 
AFIO
->
MAPR
;

558 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

559 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

561 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

563 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

564 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

566 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

568 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

569 
tm¥eg
 &~
tmp1
;

570 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

574 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

575 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

578 i‡(
NewSèã
 !
DISABLE
)

580 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

585 
AFIO
->
MAPR2
 = 
tm¥eg
;

589 
AFIO
->
MAPR
 = 
tm¥eg
;

591 
	}
}

601 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

603 
uöt32_t
 
tmp
 = 0x00;

605 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

606 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

608 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

609 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

610 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

611 
	}
}

622 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

624 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

627 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

628 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c

22 
	~"°m32f10x_i2c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

49 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

52 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

53 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

56 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

57 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

60 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

61 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

64 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

65 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

68 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

69 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

72 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

73 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

76 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

77 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

80 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

81 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

84 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

85 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

88 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

91 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

92 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

95 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

96 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

99 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

102 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

103 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

106 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

107 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

110 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

113 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

116 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

119 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

122 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

161 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

164 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

166 i‡(
I2Cx
 =
I2C1
)

169 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

171 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

178 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

180 
	}
}

190 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

192 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

193 
uöt16_t
 
ªsu…
 = 0x04;

194 
uöt32_t
 
p˛k1
 = 8000000;

195 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

197 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

198 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

199 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

200 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

201 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

202 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

207 
tm¥eg
 = 
I2Cx
->
CR2
;

209 
tm¥eg
 &
CR2_FREQ_Re£t
;

211 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

212 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

214 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

215 
tm¥eg
 |
‰eqønge
;

217 
I2Cx
->
CR2
 = 
tm¥eg
;

221 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

224 
tm¥eg
 = 0;

227 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

230 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

232 i‡(
ªsu…
 < 0x04)

235 
ªsu…
 = 0x04;

238 
tm¥eg
 |
ªsu…
;

240 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

245 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

248 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

253 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

255 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

259 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

262 
ªsu…
 |(
uöt16_t
)0x0001;

265 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

267 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

271 
I2Cx
->
CCR
 = 
tm¥eg
;

273 
I2Cx
->
CR1
 |
CR1_PE_Së
;

277 
tm¥eg
 = 
I2Cx
->
CR1
;

279 
tm¥eg
 &
CR1_CLEAR_Mask
;

283 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

285 
I2Cx
->
CR1
 = 
tm¥eg
;

289 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

290 
	}
}

297 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

301 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

303 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

305 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

307 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

309 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

311 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

312 
	}
}

321 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

324 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

326 i‡(
NewSèã
 !
DISABLE
)

329 
I2Cx
->
CR1
 |
CR1_PE_Së
;

334 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

336 
	}
}

345 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

348 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

349 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

350 i‡(
NewSèã
 !
DISABLE
)

353 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

358 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

360 
	}
}

369 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

372 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

374 i‡(
NewSèã
 !
DISABLE
)

377 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

382 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

384 
	}
}

393 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

397 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

398 i‡(
NewSèã
 !
DISABLE
)

401 
I2Cx
->
CR1
 |
CR1_START_Së
;

406 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

408 
	}
}

417 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

420 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

422 i‡(
NewSèã
 !
DISABLE
)

425 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

430 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

432 
	}
}

441 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

444 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

445 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

446 i‡(
NewSèã
 !
DISABLE
)

449 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

454 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

456 
	}
}

464 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

466 
uöt16_t
 
tm¥eg
 = 0;

469 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

472 
tm¥eg
 = 
I2Cx
->
OAR2
;

475 
tm¥eg
 &
OAR2_ADD2_Re£t
;

478 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

481 
I2Cx
->
OAR2
 = 
tm¥eg
;

482 
	}
}

491 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

495 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

504 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

506 
	}
}

515 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

518 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

519 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

528 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

530 
	}
}

544 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

551 i‡(
NewSèã
 !
DISABLE
)

554 
I2Cx
->
CR2
 |
I2C_IT
;

559 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

561 
	}
}

569 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

572 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

574 
I2Cx
->
DR
 = 
D©a
;

575 
	}
}

582 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

585 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

587  (
uöt8_t
)
I2Cx
->
DR
;

588 
	}
}

600 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

603 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

604 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

606 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

609 
Addªss
 |
OAR1_ADD0_Së
;

614 
Addªss
 &
OAR1_ADD0_Re£t
;

617 
I2Cx
->
DR
 = 
Addªss
;

618 
	}
}

635 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

637 
__IO
 
uöt32_t
 
tmp
 = 0;

640 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

641 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

643 
tmp
 = (
uöt32_t
Ë
I2Cx
;

644 
tmp
 +
I2C_Regi°î
;

647  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

648 
	}
}

657 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

660 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

661 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

662 i‡(
NewSèã
 !
DISABLE
)

665 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

670 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

672 
	}
}

683 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

686 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

687 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

688 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

691 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

696 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

698 
	}
}

707 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

710 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

711 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

712 i‡(
NewSèã
 !
DISABLE
)

715 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

720 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

722 
	}
}

733 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

736 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

737 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

738 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

741 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

746 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

748 
	}
}

757 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

760 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

762 i‡(
NewSèã
 !
DISABLE
)

765 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

770 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

772 
	}
}

779 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

784  ((
I2Cx
->
SR2
) >> 8);

785 
	}
}

794 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

797 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

798 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

799 i‡(
NewSèã
 !
DISABLE
)

802 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

807 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

809 
	}
}

818 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

821 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

822 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

823 i‡(
NewSèã
 =
DISABLE
)

826 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

831 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

833 
	}
}

844 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

847 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

848 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

849 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

852 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

857 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

859 
	}
}

984 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

986 
uöt32_t
 
œ°evít
 = 0;

987 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

988 
Eº‹Sètus
 
°©us
 = 
ERROR
;

991 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

992 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

995 
Êag1
 = 
I2Cx
->
SR1
;

996 
Êag2
 = 
I2Cx
->
SR2
;

997 
Êag2
 = flag2 << 16;

1000 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1003 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1006 
°©us
 = 
SUCCESS
;

1011 
°©us
 = 
ERROR
;

1014  
°©us
;

1015 
	}
}

1032 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1034 
uöt32_t
 
œ°evít
 = 0;

1035 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1038 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049  
œ°evít
;

1050 
	}
}

1087 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1089 
FœgSètus
 
bô°©us
 = 
RESET
;

1090 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1093 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1094 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1097 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1100 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1103 
I2C_FLAG
 &
FLAG_Mask
;

1105 if(
i2¸eg
 != 0)

1108 
i2cxba£
 += 0x14;

1113 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1115 
i2cxba£
 += 0x18;

1118 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1121 
bô°©us
 = 
SET
;

1126 
bô°©us
 = 
RESET
;

1130  
bô°©us
;

1131 
	}
}

1166 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1168 
uöt32_t
 
Êagpos
 = 0;

1170 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1171 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1173 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1175 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1176 
	}
}

1200 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1202 
ITSètus
 
bô°©us
 = 
RESET
;

1203 
uöt32_t
 
íabÀ°©us
 = 0;

1206 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1207 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1210 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1213 
I2C_IT
 &
FLAG_Mask
;

1216 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1219 
bô°©us
 = 
SET
;

1224 
bô°©us
 = 
RESET
;

1227  
bô°©us
;

1228 
	}
}

1261 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1263 
uöt32_t
 
Êagpos
 = 0;

1265 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1266 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1268 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1270 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1271 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c

22 
	~"°m32f10x_iwdg.h
"

48 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

49 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

91 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

94 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

95 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

96 
	}
}

111 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

114 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

115 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

116 
	}
}

124 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

127 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

128 
IWDG
->
RLR
 = 
Rñﬂd
;

129 
	}
}

137 
	$IWDG_RñﬂdCou¡î
()

139 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

140 
	}
}

147 
	$IWDG_E«bÀ
()

149 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

150 
	}
}

160 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

162 
FœgSètus
 
bô°©us
 = 
RESET
;

164 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

165 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

167 
bô°©us
 = 
SET
;

171 
bô°©us
 = 
RESET
;

174  
bô°©us
;

175 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c

22 
	~"°m32f10x_pwr.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

63 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

64 
	#EWUP_BôNumbî
 0x08

	)

65 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

70 
	#CR_PDDS_Së
 ((
uöt32_t
)0x00000002)

	)

71 
	#CR_DS_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_CWUF_Së
 ((
uöt32_t
)0x00000004)

	)

73 
	#CR_PLS_Mask
 ((
uöt32_t
)0xFFFFFF1F)

	)

78 
	#SCB_SysCål
 ((
uöt32_t
)0xE000ED10)

	)

81 
	#SysCål_SLEEPDEEP_Së
 ((
uöt32_t
)0x00000004)

	)

82 
	#SysCål_SLEEPDEEP_Re£t
 ((
uöt32_t
)0xFFFFFFFB)

	)

121 
	$PWR_DeInô
()

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

124 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

125 
	}
}

133 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

137 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

138 
	}
}

146 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

149 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

150 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

151 
	}
}

167 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

169 
uöt32_t
 
tm¥eg
 = 0;

171 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

172 
tm¥eg
 = 
PWR
->
CR
;

174 
tm¥eg
 &
CR_PLS_Mask
;

176 
tm¥eg
 |
PWR_PVDLevñ
;

178 
PWR
->
CR
 = 
tm¥eg
;

179 
	}
}

187 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

190 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

206 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

208 
uöt32_t
 
tm¥eg
 = 0;

210 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

211 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

214 
tm¥eg
 = 
PWR
->
CR
;

216 
tm¥eg
 &
CR_DS_Mask
;

218 
tm¥eg
 |
PWR_Reguœt‹
;

220 
PWR
->
CR
 = 
tm¥eg
;

222 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

225 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

228 
	`__WFI
();

233 
	`__WFE
();

237 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 &
SysCål_SLEEPDEEP_Re£t
;

238 
	}
}

245 
	$PWR_E¡îSTANDBYMode
()

248 
PWR
->
CR
 |
CR_CWUF_Së
;

250 
PWR
->
CR
 |
CR_PDDS_Së
;

252 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

254 #i‡
	`deföed
 ( 
__CC_ARM
 )

255 
	`__f‹˚_°‹es
();

258 
	`__WFI
();

259 
	}
}

270 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

272 
FœgSètus
 
bô°©us
 = 
RESET
;

274 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

276 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

278 
bô°©us
 = 
SET
;

282 
bô°©us
 = 
RESET
;

285  
bô°©us
;

286 
	}
}

296 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

299 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

301 
PWR
->
CR
 |
PWR_FLAG
 << 2;

302 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c

22 
	~"°m32f10x_rcc.h
"

46 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

52 
	#HSION_BôNumbî
 0x00

	)

53 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

56 
	#PLLON_BôNumbî
 0x18

	)

57 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

59 #ifde‡
STM32F10X_CL


61 
	#PLL2ON_BôNumbî
 0x1A

	)

62 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

65 
	#PLL3ON_BôNumbî
 0x1C

	)

66 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

70 
	#CSSON_BôNumbî
 0x13

	)

71 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

76 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

78 #i‚de‡
STM32F10X_CL


79 
	#USBPRE_BôNumbî
 0x16

	)

80 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

82 
	#OTGFSPRE_BôNumbî
 0x16

	)

83 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

89 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

90 
	#RTCEN_BôNumbî
 0x0F

	)

91 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

94 
	#BDRST_BôNumbî
 0x10

	)

95 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

100 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

101 
	#LSION_BôNumbî
 0x00

	)

102 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

104 #ifde‡
STM32F10X_CL


108 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

109 
	#I2S2SRC_BôNumbî
 0x11

	)

110 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

113 
	#I2S3SRC_BôNumbî
 0x12

	)

114 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

120 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

121 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

122 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

123 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

124 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

127 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

128 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

130 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

133 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

134 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

135 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

136 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

137 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

138 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

139 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

140 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

141 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

142 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

143 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

144 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

145 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

148 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

150 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

152 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

153 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

155 #ifde‡
STM32F10X_CL


156 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

157 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

158 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

162 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

164 #i‚de‡
HSI_VÆue


166 
	#HSI_VÆue
 ((
uöt32_t
)8000000)

	)

170 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

173 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

176 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

179 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

181 #i‚de‡
HSESèπUp_TimeOut


183 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500)

	)

202 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

203 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

226 
	$RCC_DeInô
()

229 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

232 #i‚de‡
STM32F10X_CL


233 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

235 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

239 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

242 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

245 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

247 #ifde‡
STM32F10X_CL


249 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

252 
RCC
->
CIR
 = 0x00FF0000;

255 
RCC
->
CFGR2
 = 0x00000000;

256 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

258 
RCC
->
CIR
 = 0x009F0000;

261 
RCC
->
CFGR2
 = 0x00000000;

264 
RCC
->
CIR
 = 0x009F0000;

267 
	}
}

279 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

282 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

285 
RCC
->
CR
 &
CR_HSEON_Re£t
;

287 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

289 
RCC_HSE
)

291 
RCC_HSE_ON
:

293 
RCC
->
CR
 |
CR_HSEON_Së
;

296 
RCC_HSE_By∑ss
:

298 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

304 
	}
}

313 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

315 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

316 
Eº‹Sètus
 
°©us
 = 
ERROR
;

317 
FœgSètus
 
HSESètus
 = 
RESET
;

322 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

323 
SèπUpCou¡î
++;

324 } (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
Ë&& (
HSESètus
 =
RESET
));

326 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

328 
°©us
 = 
SUCCESS
;

332 
°©us
 = 
ERROR
;

334  (
°©us
);

335 
	}
}

343 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

345 
uöt32_t
 
tm¥eg
 = 0;

347 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

348 
tm¥eg
 = 
RCC
->
CR
;

350 
tm¥eg
 &
CR_HSITRIM_Mask
;

352 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

354 
RCC
->
CR
 = 
tm¥eg
;

355 
	}
}

363 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

366 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

367 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

368 
	}
}

387 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

389 
uöt32_t
 
tm¥eg
 = 0;

392 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

393 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

395 
tm¥eg
 = 
RCC
->
CFGR
;

397 
tm¥eg
 &
CFGR_PLL_Mask
;

399 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

401 
RCC
->
CFGR
 = 
tm¥eg
;

402 
	}
}

410 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

415 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

416 
	}
}

418 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_CL
)

435 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

437 
uöt32_t
 
tm¥eg
 = 0;

440 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

441 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

443 
tm¥eg
 = 
RCC
->
CFGR2
;

445 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

447 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

449 
RCC
->
CFGR2
 = 
tm¥eg
;

450 
	}
}

453 #ifde‡
STM32F10X_CL


463 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

465 
uöt32_t
 
tm¥eg
 = 0;

468 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

470 
tm¥eg
 = 
RCC
->
CFGR2
;

472 
tm¥eg
 &~
CFGR2_PREDIV2
;

474 
tm¥eg
 |
RCC_PREDIV2_Div
;

476 
RCC
->
CFGR2
 = 
tm¥eg
;

477 
	}
}

488 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

490 
uöt32_t
 
tm¥eg
 = 0;

493 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

495 
tm¥eg
 = 
RCC
->
CFGR2
;

497 
tm¥eg
 &~
CFGR2_PLL2MUL
;

499 
tm¥eg
 |
RCC_PLL2Mul
;

501 
RCC
->
CFGR2
 = 
tm¥eg
;

502 
	}
}

514 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

519 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

520 
	}
}

532 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

534 
uöt32_t
 
tm¥eg
 = 0;

537 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

539 
tm¥eg
 = 
RCC
->
CFGR2
;

541 
tm¥eg
 &~
CFGR2_PLL3MUL
;

543 
tm¥eg
 |
RCC_PLL3Mul
;

545 
RCC
->
CFGR2
 = 
tm¥eg
;

546 
	}
}

555 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

560 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

561 
	}
}

573 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

575 
uöt32_t
 
tm¥eg
 = 0;

577 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

578 
tm¥eg
 = 
RCC
->
CFGR
;

580 
tm¥eg
 &
CFGR_SW_Mask
;

582 
tm¥eg
 |
RCC_SYSCLKSour˚
;

584 
RCC
->
CFGR
 = 
tm¥eg
;

585 
	}
}

596 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

598  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

599 
	}
}

617 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

619 
uöt32_t
 
tm¥eg
 = 0;

621 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

622 
tm¥eg
 = 
RCC
->
CFGR
;

624 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

626 
tm¥eg
 |
RCC_SYSCLK
;

628 
RCC
->
CFGR
 = 
tm¥eg
;

629 
	}
}

643 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

645 
uöt32_t
 
tm¥eg
 = 0;

647 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

648 
tm¥eg
 = 
RCC
->
CFGR
;

650 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

652 
tm¥eg
 |
RCC_HCLK
;

654 
RCC
->
CFGR
 = 
tm¥eg
;

655 
	}
}

669 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

671 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

674 
tm¥eg
 = 
RCC
->
CFGR
;

676 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

678 
tm¥eg
 |
RCC_HCLK
 << 3;

680 
RCC
->
CFGR
 = 
tm¥eg
;

681 
	}
}

709 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 i‡(
NewSèã
 !
DISABLE
)

717 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

722 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

724 
	}
}

726 #i‚de‡
STM32F10X_CL


737 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

740 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

742 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

743 
	}
}

755 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

758 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

760 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

761 
	}
}

775 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

777 
uöt32_t
 
tm¥eg
 = 0;

779 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

780 
tm¥eg
 = 
RCC
->
CFGR
;

782 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

784 
tm¥eg
 |
RCC_PCLK2
;

786 
RCC
->
CFGR
 = 
tm¥eg
;

787 
	}
}

789 #ifde‡
STM32F10X_CL


801 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

804 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

806 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

807 
	}
}

820 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

823 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

825 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

826 
	}
}

838 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

841 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

844 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

846 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

848 
RCC_LSE
)

850 
RCC_LSE_ON
:

852 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

855 
RCC_LSE_By∑ss
:

857 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

863 
	}
}

871 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

874 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

875 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

876 
	}
}

888 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

891 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

893 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

894 
	}
}

902 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

905 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

906 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

907 
	}
}

915 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

917 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

919 #ifde‡ 
STM32F10X_CL


920 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

923 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

924 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

928 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

930 
tmp
)

933 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

936 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
;

941 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

942 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

944 #i‚de‡
STM32F10X_CL


945 
∂lmuŒ
 = (Öllmull >> 18) + 2;

947 i‡(
∂lsour˚
 == 0x00)

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

953 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
)

954 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

956 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

959 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

961 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

965 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
 * 
∂lmuŒ
;

970 
∂lmuŒ
 =Öllmull >> 18;

972 i‡(
∂lmuŒ
 != 0x0D)

974 
∂lmuŒ
 += 2;

978 
∂lmuŒ
 = 13 / 2;

981 i‡(
∂lsour˚
 == 0x00)

983 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

989 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

990 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

992 i‡(
¥ediv1sour˚
 == 0)

994 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1000 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

1001 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1009 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

1015 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1016 
tmp
 =Åmp >> 4;

1017 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1019 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1021 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1022 
tmp
 =Åmp >> 8;

1023 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1025 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1027 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1028 
tmp
 =Åmp >> 11;

1029 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1031 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1033 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1034 
tmp
 =Åmp >> 14;

1035 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1037 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1038 
	}
}

1071 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1074 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1075 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 i‡(
NewSèã
 !
DISABLE
)

1079 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1083 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1085 
	}
}

1102 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1105 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1109 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1113 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1115 
	}
}

1133 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1136 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1138 i‡(
NewSèã
 !
DISABLE
)

1140 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1144 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1146 
	}
}

1148 #ifde‡
STM32F10X_CL


1160 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1163 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1166 i‡(
NewSèã
 !
DISABLE
)

1168 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1172 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1174 
	}
}

1192 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1195 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1196 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1197 i‡(
NewSèã
 !
DISABLE
)

1199 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1203 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1205 
	}
}

1223 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1226 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1228 i‡(
NewSèã
 !
DISABLE
)

1230 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1234 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1236 
	}
}

1244 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1247 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1248 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1249 
	}
}

1257 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1260 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1261 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1262 
	}
}

1289 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1292 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1295 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1296 
	}
}

1333 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1335 
uöt32_t
 
tmp
 = 0;

1336 
uöt32_t
 
°©u§eg
 = 0;

1337 
FœgSètus
 
bô°©us
 = 
RESET
;

1339 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1342 
tmp
 = 
RCC_FLAG
 >> 5;

1343 i‡(
tmp
 == 1)

1345 
°©u§eg
 = 
RCC
->
CR
;

1347 i‡(
tmp
 == 2)

1349 
°©u§eg
 = 
RCC
->
BDCR
;

1353 
°©u§eg
 = 
RCC
->
CSR
;

1357 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1358 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1360 
bô°©us
 = 
SET
;

1364 
bô°©us
 = 
RESET
;

1368  
bô°©us
;

1369 
	}
}

1378 
	$RCC_CÀ¨Fœg
()

1381 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1382 
	}
}

1409 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1411 
ITSètus
 
bô°©us
 = 
RESET
;

1413 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1416 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1426  
bô°©us
;

1427 
	}
}

1455 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1458 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1462 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1463 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c

22 
	~"°m32f10x_πc.h
"

44 
	#CRL_CNF_Së
 ((
uöt16_t
)0x0010Ë

	)

45 
	#CRL_CNF_Re£t
 ((
uöt16_t
)0xFFEFË

	)

46 
	#RTC_LSB_Mask
 ((
uöt32_t
)0x0000FFFFË

	)

47 
	#PRLH_MSB_Mask
 ((
uöt32_t
)0x000F0000Ë

	)

92 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

95 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

96 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

98 i‡(
NewSèã
 !
DISABLE
)

100 
RTC
->
CRH
 |
RTC_IT
;

104 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

106 
	}
}

113 
	$RTC_E¡îC⁄figMode
()

116 
RTC
->
CRL
 |
CRL_CNF_Së
;

117 
	}
}

124 
	$RTC_ExôC⁄figMode
()

127 
RTC
->
CRL
 &
CRL_CNF_Re£t
;

128 
	}
}

135 
uöt32_t
 
	$RTC_GëCou¡î
()

137 
uöt16_t
 
tmp
 = 0;

138 
tmp
 = 
RTC
->
CNTL
;

139  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

140 
	}
}

147 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

149 
	`RTC_E¡îC⁄figMode
();

151 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

153 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_Mask
);

154 
	`RTC_ExôC⁄figMode
();

155 
	}
}

162 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

165 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

167 
	`RTC_E¡îC⁄figMode
();

169 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_Mask
) >> 16;

171 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_Mask
);

172 
	`RTC_ExôC⁄figMode
();

173 
	}
}

180 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

182 
	`RTC_E¡îC⁄figMode
();

184 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

186 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_Mask
);

187 
	`RTC_ExôC⁄figMode
();

188 
	}
}

195 
uöt32_t
 
	$RTC_GëDividî
()

197 
uöt32_t
 
tmp
 = 0x00;

198 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

199 
tmp
 |
RTC
->
DIVL
;

200  
tmp
;

201 
	}
}

209 
	$RTC_WaôF‹La°Task
()

212 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

215 
	}
}

225 
	$RTC_WaôF‹Synchro
()

228 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

230 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

233 
	}
}

246 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

248 
FœgSètus
 
bô°©us
 = 
RESET
;

251 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

253 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

255 
bô°©us
 = 
SET
;

259 
bô°©us
 = 
RESET
;

261  
bô°©us
;

262 
	}
}

275 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

278 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

281 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

282 
	}
}

293 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

295 
ITSètus
 
bô°©us
 = 
RESET
;

297 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

299 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

300 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

302 
bô°©us
 = 
SET
;

306 
bô°©us
 = 
RESET
;

308  
bô°©us
;

309 
	}
}

320 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

323 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

326 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

327 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c

22 
	~"°m32f10x_sdio.h
"

23 
	~"°m32f10x_rcc.h
"

39 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

44 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

45 
	#CLKEN_BôNumbî
 0x08

	)

46 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

51 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

52 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

53 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

56 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

57 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

60 
	#NIEN_BôNumbî
 0x0D

	)

61 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

64 
	#ATACMD_BôNumbî
 0x0E

	)

65 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

70 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

71 
	#DMAEN_BôNumbî
 0x03

	)

72 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

75 
	#RWSTART_BôNumbî
 0x08

	)

76 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

79 
	#RWSTOP_BôNumbî
 0x09

	)

80 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

83 
	#RWMOD_BôNumbî
 0x0A

	)

84 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

87 
	#SDIOEN_BôNumbî
 0x0B

	)

88 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

95 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

100 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

105 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

110 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

113 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

160 
	$SDIO_DeInô
()

162 
SDIO
->
POWER
 = 0x00000000;

163 
SDIO
->
CLKCR
 = 0x00000000;

164 
SDIO
->
ARG
 = 0x00000000;

165 
SDIO
->
CMD
 = 0x00000000;

166 
SDIO
->
DTIMER
 = 0x00000000;

167 
SDIO
->
DLEN
 = 0x00000000;

168 
SDIO
->
DCTRL
 = 0x00000000;

169 
SDIO
->
ICR
 = 0x00C007FF;

170 
SDIO
->
MASK
 = 0x00000000;

171 
	}
}

180 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

182 
uöt32_t
 
tm¥eg
 = 0;

185 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

188 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

189 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

193 
tm¥eg
 = 
SDIO
->
CLKCR
;

196 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

204 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

205 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

209 
SDIO
->
CLKCR
 = 
tm¥eg
;

210 
	}
}

218 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

221 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

222 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

223 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

224 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

226 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

227 
	}
}

234 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

239 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

240 
	}
}

250 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

253 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

255 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

256 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

257 
	}
}

268 
uöt32_t
 
	$SDIO_GëPowîSèã
()

270  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

271 
	}
}

306 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

310 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

312 i‡(
NewSèã
 !
DISABLE
)

315 
SDIO
->
MASK
 |
SDIO_IT
;

320 
SDIO
->
MASK
 &~
SDIO_IT
;

322 
	}
}

330 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

333 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

335 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

336 
	}
}

345 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

347 
uöt32_t
 
tm¥eg
 = 0;

350 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

351 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

352 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

353 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

357 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

361 
tm¥eg
 = 
SDIO
->
CMD
;

363 
tm¥eg
 &
CMD_CLEAR_MASK
;

368 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


369 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

372 
SDIO
->
CMD
 = 
tm¥eg
;

373 
	}
}

381 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

384 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

385 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

387 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

389 
	}
}

396 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

398  (
uöt8_t
)(
SDIO
->
RESPCMD
);

399 
	}
}

411 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

413 
__IO
 
uöt32_t
 
tmp
 = 0;

416 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

418 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

420  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

421 
	}
}

430 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

432 
uöt32_t
 
tm¥eg
 = 0;

435 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

436 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

437 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

439 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

443 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

447 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

451 
tm¥eg
 = 
SDIO
->
DCTRL
;

453 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

458 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


459 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

462 
SDIO
->
DCTRL
 = 
tm¥eg
;

463 
	}
}

471 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

474 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

477 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

479 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

480 
	}
}

487 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

489  
SDIO
->
DCOUNT
;

490 
	}
}

497 
uöt32_t
 
	$SDIO_RódD©a
()

499  
SDIO
->
FIFO
;

500 
	}
}

507 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

509 
SDIO
->
FIFO
 = 
D©a
;

510 
	}
}

517 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

519  
SDIO
->
FIFOCNT
;

520 
	}
}

528 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

534 
	}
}

542 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

547 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

548 
	}
}

558 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

561 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

563 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

564 
	}
}

572 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

575 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

577 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

578 
	}
}

586 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

591 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

592 
	}
}

600 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

603 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

605 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

606 
	}
}

613 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

619 
	}
}

626 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

632 
	}
}

665 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

667 
FœgSètus
 
bô°©us
 = 
RESET
;

670 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

672 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

678 
bô°©us
 = 
RESET
;

680  
bô°©us
;

681 
	}
}

703 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

706 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

708 
SDIO
->
ICR
 = 
SDIO_FLAG
;

709 
	}
}

742 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

744 
ITSètus
 
bô°©us
 = 
RESET
;

747 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

748 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

750 
bô°©us
 = 
SET
;

754 
bô°©us
 = 
RESET
;

756  
bô°©us
;

757 
	}
}

778 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

781 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

783 
SDIO
->
ICR
 = 
SDIO_IT
;

784 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c

22 
	~"°m32f10x_•i.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

49 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

52 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

53 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

56 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

59 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

60 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

63 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

64 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

67 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

68 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

71 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

72 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

75 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

76 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

77 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

78 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

118 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

121 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

123 i‡(
SPIx
 =
SPI1
)

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

130 i‡(
SPIx
 =
SPI2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

139 i‡(
SPIx
 =
SPI3
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

147 
	}
}

157 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

159 
uöt16_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

165 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

166 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

167 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

168 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

170 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

171 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

172 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

173 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

177 
tm¥eg
 = 
SPIx
->
CR1
;

179 
tm¥eg
 &
CR1_CLEAR_Mask
;

188 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

189 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

190 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

191 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

193 
SPIx
->
CR1
 = 
tm¥eg
;

196 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

200 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

201 
	}
}

218 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

220 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

221 
uöt32_t
 
tmp
 = 0;

222 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

223 
uöt32_t
 
sour˚˛ock
 = 0;

226 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

227 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

228 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

229 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

230 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

231 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

232 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

236 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

237 
SPIx
->
I2SPR
 = 0x0002;

240 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

243 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

245 
i2sodd
 = (
uöt16_t
)0;

246 
i2sdiv
 = (
uöt16_t
)2;

252 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

255 
∑ckëÀngth
 = 1;

260 
∑ckëÀngth
 = 2;

264 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

267 
tmp
 = 
I2S2_CLOCK_SRC
;

272 
tmp
 = 
I2S3_CLOCK_SRC
;

277 #ifde‡
STM32F10X_CL


278 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

281 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

284 if((
tmp
 > 5) && (tmp < 15))

287 
tmp
 += 2;

291 i‡(
tmp
 == 15)

294 
tmp
 = 20;

298 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

301 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

306 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

309 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

313 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

316 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

320 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

323 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

328 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

332 
tmp
 =Åmp / 10;

335 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

338 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

341 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

345 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

348 
i2sdiv
 = 2;

349 
i2sodd
 = 0;

353 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

356 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

357 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

358 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

361 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

362 
	}
}

369 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

373 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

375 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

377 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

379 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

381 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

383 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

385 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

387 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

389 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

390 
	}
}

397 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

401 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

404 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

407 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

410 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

413 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

416 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

417 
	}
}

426 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

429 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

430 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

431 i‡(
NewSèã
 !
DISABLE
)

434 
SPIx
->
CR1
 |
CR1_SPE_Së
;

439 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

441 
	}
}

450 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

453 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

455 i‡(
NewSèã
 !
DISABLE
)

458 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

463 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

465 
	}
}

481 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

483 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

485 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

490 
ôpos
 = 
SPI_I2S_IT
 >> 4;

493 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

495 i‡(
NewSèã
 !
DISABLE
)

498 
SPIx
->
CR2
 |
ômask
;

503 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

505 
	}
}

520 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

523 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

524 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

525 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

526 i‡(
NewSèã
 !
DISABLE
)

529 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

534 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

536 
	}
}

546 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

549 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

552 
SPIx
->
DR
 = 
D©a
;

553 
	}
}

562 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

565 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

568  
SPIx
->
DR
;

569 
	}
}

580 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

583 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

584 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

585 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

588 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

593 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

595 
	}
}

604 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

607 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

609 i‡(
NewSèã
 !
DISABLE
)

612 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

617 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

619 
	}
}

630 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

633 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

634 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

636 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

638 
SPIx
->
CR1
 |
SPI_D©aSize
;

639 
	}
}

646 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

649 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

652 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

653 
	}
}

662 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

665 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

667 i‡(
NewSèã
 !
DISABLE
)

670 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

675 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

677 
	}
}

688 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

690 
uöt16_t
 
¸¸eg
 = 0;

692 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

693 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

694 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

697 
¸¸eg
 = 
SPIx
->
TXCRCR
;

702 
¸¸eg
 = 
SPIx
->
RXCRCR
;

705  
¸¸eg
;

706 
	}
}

713 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

716 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

719  
SPIx
->
CRCPR
;

720 
	}
}

731 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

734 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

735 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

736 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

739 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

744 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

746 
	}
}

765 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

767 
FœgSètus
 
bô°©us
 = 
RESET
;

769 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

770 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

772 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

775 
bô°©us
 = 
SET
;

780 
bô°©us
 = 
RESET
;

783  
bô°©us
;

784 
	}
}

803 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

806 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

807 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

810 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

811 
	}
}

828 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

830 
ITSètus
 
bô°©us
 = 
RESET
;

831 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

834 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

835 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

838 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

841 
ômask
 = 
SPI_I2S_IT
 >> 4;

844 
ômask
 = 0x01 << itmask;

847 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

850 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

853 
bô°©us
 = 
SET
;

858 
bô°©us
 = 
RESET
;

861  
bô°©us
;

862 
	}
}

882 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

884 
uöt16_t
 
ôpos
 = 0;

886 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

887 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

890 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

893 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

894 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c

22 
	~"°m32f10x_tim.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

48 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

49 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

76 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

77 
uöt16_t
 
TIM_ICFûãr
);

78 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

79 
uöt16_t
 
TIM_ICFûãr
);

80 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

81 
uöt16_t
 
TIM_ICFûãr
);

82 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

83 
uöt16_t
 
TIM_ICFûãr
);

121 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

124 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

126 i‡(
TIMx
 =
TIM1
)

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

131 i‡(
TIMx
 =
TIM2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

136 i‡(
TIMx
 =
TIM3
)

138 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

141 i‡(
TIMx
 =
TIM4
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

146 i‡(
TIMx
 =
TIM5
)

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

151 i‡(
TIMx
 =
TIM6
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

156 i‡(
TIMx
 =
TIM7
)

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

161 i‡(
TIMx
 =
TIM8
)

163 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

166 i‡(
TIMx
 =
TIM9
)

168 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

171 i‡(
TIMx
 =
TIM10
)

173 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

176 i‡(
TIMx
 =
TIM11
)

178 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

181 i‡(
TIMx
 =
TIM12
)

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

186 i‡(
TIMx
 =
TIM13
)

188 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

191 i‡(
TIMx
 =
TIM14
)

193 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

196 i‡(
TIMx
 =
TIM15
)

198 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

201 i‡(
TIMx
 =
TIM16
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

208 i‡(
TIMx
 =
TIM17
)

210 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

214 
	}
}

224 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

226 
uöt16_t
 
tmp¸1
 = 0;

229 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

230 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

231 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

233 
tmp¸1
 = 
TIMx
->
CR1
;

235 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

236 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

239 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

240 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

243 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

246 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

247 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

250 
TIMx
->
CR1
 = 
tmp¸1
;

253 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

256 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

258 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

261 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

266 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

267 
	}
}

277 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

279 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

282 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

283 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

284 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

287 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

289 
tmpc˚r
 = 
TIMx
->
CCER
;

291 
tmp¸2
 = 
TIMx
->
CR2
;

294 
tmpccmrx
 = 
TIMx
->
CCMR1
;

297 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

298 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

301 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

304 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

306 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

309 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

311 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

312 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

314 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

315 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

316 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

320 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

322 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

325 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

327 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

330 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

331 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

334 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

339 
TIMx
->
CR2
 = 
tmp¸2
;

342 
TIMx
->
CCMR1
 = 
tmpccmrx
;

345 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

348 
TIMx
->
CCER
 = 
tmpc˚r
;

349 
	}
}

360 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

362 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

365 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

366 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

367 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

370 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

373 
tmpc˚r
 = 
TIMx
->
CCER
;

375 
tmp¸2
 = 
TIMx
->
CR2
;

378 
tmpccmrx
 = 
TIMx
->
CCMR1
;

381 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

382 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

385 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

388 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

390 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

393 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

395 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

397 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

398 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

399 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

403 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

405 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

408 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

410 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

413 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

414 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

417 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

422 
TIMx
->
CR2
 = 
tmp¸2
;

425 
TIMx
->
CCMR1
 = 
tmpccmrx
;

428 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

431 
TIMx
->
CCER
 = 
tmpc˚r
;

432 
	}
}

442 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

444 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

447 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

448 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

449 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

452 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

455 
tmpc˚r
 = 
TIMx
->
CCER
;

457 
tmp¸2
 = 
TIMx
->
CR2
;

460 
tmpccmrx
 = 
TIMx
->
CCMR2
;

463 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

464 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

466 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

469 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

471 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

474 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

476 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

478 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

479 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

480 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

484 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

486 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

488 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

491 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

493 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

494 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

496 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

501 
TIMx
->
CR2
 = 
tmp¸2
;

504 
TIMx
->
CCMR2
 = 
tmpccmrx
;

507 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

510 
TIMx
->
CCER
 = 
tmpc˚r
;

511 
	}
}

521 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

523 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

526 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

527 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

528 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

531 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

534 
tmpc˚r
 = 
TIMx
->
CCER
;

536 
tmp¸2
 = 
TIMx
->
CR2
;

539 
tmpccmrx
 = 
TIMx
->
CCMR2
;

542 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

543 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

546 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

549 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

551 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

554 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

556 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

558 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

560 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

562 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

565 
TIMx
->
CR2
 = 
tmp¸2
;

568 
TIMx
->
CCMR2
 = 
tmpccmrx
;

571 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

574 
TIMx
->
CCER
 = 
tmpc˚r
;

575 
	}
}

585 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

588 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

589 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

590 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

594 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

596 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

598 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

599 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

600 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

602 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

608 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

618 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

634 
	}
}

644 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

646 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

647 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

649 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

651 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

653 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

657 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

660 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

662 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

666 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

668 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

671 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

672 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

674 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

676 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

678 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

683 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

684 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

686 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

688 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

690 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

692 
	}
}

702 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

705 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

706 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

707 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

708 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

709 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

710 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

711 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

714 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

715 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

716 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

717 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

718 
	}
}

726 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

729 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

730 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

731 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

732 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

733 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

734 
	}
}

742 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

745 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

746 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

747 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

748 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

749 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

750 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

751 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

752 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

753 
	}
}

761 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

764 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

765 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

766 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

767 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

768 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

769 
	}
}

777 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

780 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

781 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

782 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

783 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

784 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

785 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

786 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

787 
	}
}

796 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

799 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

800 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

802 i‡(
NewSèã
 !
DISABLE
)

805 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

810 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

812 
	}
}

821 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

824 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

825 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

826 i‡(
NewSèã
 !
DISABLE
)

829 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

834 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

836 
	}
}

862 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

866 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

867 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 !
DISABLE
)

872 
TIMx
->
DIER
 |
TIM_IT
;

877 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

879 
	}
}

899 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

902 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

903 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

906 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

907 
	}
}

927 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

930 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

931 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

932 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

934 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

935 
	}
}

954 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

957 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

958 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

959 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

961 i‡(
NewSèã
 !
DISABLE
)

964 
TIMx
->
DIER
 |
TIM_DMASour˚
;

969 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

971 
	}
}

979 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

982 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

984 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

985 
	}
}

998 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1001 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1002 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1004 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1006 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1007 
	}
}

1025 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1026 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1029 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1030 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1031 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1032 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1034 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1036 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1040 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1043 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1045 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1046 
	}
}

1065 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1066 
uöt16_t
 
ExtTRGFûãr
)

1068 
uöt16_t
 
tmpsm¸
 = 0;

1070 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1071 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1072 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1073 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1075 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1078 
tmpsm¸
 = 
TIMx
->
SMCR
;

1080 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1082 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1084 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1085 
tmpsm¸
 |
TIM_TS_ETRF
;

1087 
TIMx
->
SMCR
 = 
tmpsm¸
;

1088 
	}
}

1107 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1108 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1111 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1113 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1114 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1116 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1118 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1119 
	}
}

1138 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1139 
uöt16_t
 
ExtTRGFûãr
)

1141 
uöt16_t
 
tmpsm¸
 = 0;

1143 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1144 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1145 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1146 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1147 
tmpsm¸
 = 
TIMx
->
SMCR
;

1149 
tmpsm¸
 &
SMCR_ETR_Mask
;

1151 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1153 
TIMx
->
SMCR
 = 
tmpsm¸
;

1154 
	}
}

1166 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1169 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1170 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1172 
TIMx
->
PSC
 = 
PªsˇÀr
;

1174 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1175 
	}
}

1189 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1191 
uöt16_t
 
tmp¸1
 = 0;

1193 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1194 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1195 
tmp¸1
 = 
TIMx
->
CR1
;

1197 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1199 
tmp¸1
 |
TIM_Cou¡îMode
;

1201 
TIMx
->
CR1
 = 
tmp¸1
;

1202 
	}
}

1219 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1221 
uöt16_t
 
tmpsm¸
 = 0;

1223 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1224 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1226 
tmpsm¸
 = 
TIMx
->
SMCR
;

1228 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1230 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1232 
TIMx
->
SMCR
 = 
tmpsm¸
;

1233 
	}
}

1254 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1255 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1257 
uöt16_t
 
tmpsm¸
 = 0;

1258 
uöt16_t
 
tmpccmr1
 = 0;

1259 
uöt16_t
 
tmpc˚r
 = 0;

1262 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1263 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1264 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1265 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1268 
tmpsm¸
 = 
TIMx
->
SMCR
;

1271 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1274 
tmpc˚r
 = 
TIMx
->
CCER
;

1277 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1278 
tmpsm¸
 |
TIM_EncodîMode
;

1281 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1282 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1285 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1286 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1289 
TIMx
->
SMCR
 = 
tmpsm¸
;

1291 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1293 
TIMx
->
CCER
 = 
tmpc˚r
;

1294 
	}
}

1305 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1307 
uöt16_t
 
tmpccmr1
 = 0;

1309 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1310 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1311 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1313 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1315 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1317 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1318 
	}
}

1329 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1331 
uöt16_t
 
tmpccmr1
 = 0;

1333 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1334 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1335 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1337 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1339 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1341 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1342 
	}
}

1353 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1355 
uöt16_t
 
tmpccmr2
 = 0;

1357 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1358 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1359 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1361 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1363 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1365 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1366 
	}
}

1377 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1379 
uöt16_t
 
tmpccmr2
 = 0;

1381 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1382 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1383 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1385 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1387 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1389 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1390 
	}
}

1399 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1402 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1404 i‡(
NewSèã
 !
DISABLE
)

1407 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1412 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1414 
	}
}

1423 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1436 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1438 
	}
}

1448 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1453 i‡(
NewSèã
 !
DISABLE
)

1456 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1461 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1463 
	}
}

1473 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1476 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1477 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1478 i‡(
NewSèã
 !
DISABLE
)

1481 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1486 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1488 
	}
}

1499 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1501 
uöt16_t
 
tmpccmr1
 = 0;

1503 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1504 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1505 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1507 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1509 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1511 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1512 
	}
}

1524 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1526 
uöt16_t
 
tmpccmr1
 = 0;

1528 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1529 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1530 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1532 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1534 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1536 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1537 
	}
}

1548 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1550 
uöt16_t
 
tmpccmr2
 = 0;

1552 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1553 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1554 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1556 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1558 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1560 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1561 
	}
}

1572 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1574 
uöt16_t
 
tmpccmr2
 = 0;

1576 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1577 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1578 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1580 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1582 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1584 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1585 
	}
}

1596 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1598 
uöt16_t
 
tmpccmr1
 = 0;

1600 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1601 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1603 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1605 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1607 
tmpccmr1
 |
TIM_OCFa°
;

1609 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1610 
	}
}

1622 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1624 
uöt16_t
 
tmpccmr1
 = 0;

1626 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1627 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1629 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1631 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1633 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1635 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1636 
	}
}

1647 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1649 
uöt16_t
 
tmpccmr2
 = 0;

1651 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1652 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1654 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1656 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1658 
tmpccmr2
 |
TIM_OCFa°
;

1660 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1661 
	}
}

1672 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1674 
uöt16_t
 
tmpccmr2
 = 0;

1676 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1677 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1679 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1681 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1683 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1685 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1686 
	}
}

1697 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1699 
uöt16_t
 
tmpccmr1
 = 0;

1701 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1702 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1704 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1707 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1709 
tmpccmr1
 |
TIM_OCCÀ¨
;

1711 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1712 
	}
}

1723 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1725 
uöt16_t
 
tmpccmr1
 = 0;

1727 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1728 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1729 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1731 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1733 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1735 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1736 
	}
}

1747 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1749 
uöt16_t
 
tmpccmr2
 = 0;

1751 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1752 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1753 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1755 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1757 
tmpccmr2
 |
TIM_OCCÀ¨
;

1759 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1760 
	}
}

1771 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1773 
uöt16_t
 
tmpccmr2
 = 0;

1775 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1776 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1777 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1779 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1781 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1783 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1784 
	}
}

1795 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1797 
uöt16_t
 
tmpc˚r
 = 0;

1799 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1800 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1801 
tmpc˚r
 = 
TIMx
->
CCER
;

1803 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1804 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1806 
TIMx
->
CCER
 = 
tmpc˚r
;

1807 
	}
}

1818 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1820 
uöt16_t
 
tmpc˚r
 = 0;

1822 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1823 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1825 
tmpc˚r
 = 
TIMx
->
CCER
;

1827 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1828 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1830 
TIMx
->
CCER
 = 
tmpc˚r
;

1831 
	}
}

1842 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1844 
uöt16_t
 
tmpc˚r
 = 0;

1846 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1847 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1848 
tmpc˚r
 = 
TIMx
->
CCER
;

1850 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1851 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1853 
TIMx
->
CCER
 = 
tmpc˚r
;

1854 
	}
}

1865 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1867 
uöt16_t
 
tmpc˚r
 = 0;

1869 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1870 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1872 
tmpc˚r
 = 
TIMx
->
CCER
;

1874 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1875 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1877 
TIMx
->
CCER
 = 
tmpc˚r
;

1878 
	}
}

1889 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1891 
uöt16_t
 
tmpc˚r
 = 0;

1893 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1894 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1895 
tmpc˚r
 = 
TIMx
->
CCER
;

1897 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1898 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1900 
TIMx
->
CCER
 = 
tmpc˚r
;

1901 
	}
}

1912 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1914 
uöt16_t
 
tmpc˚r
 = 0;

1917 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1918 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1920 
tmpc˚r
 = 
TIMx
->
CCER
;

1922 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1923 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1925 
TIMx
->
CCER
 = 
tmpc˚r
;

1926 
	}
}

1937 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1939 
uöt16_t
 
tmpc˚r
 = 0;

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1943 
tmpc˚r
 = 
TIMx
->
CCER
;

1945 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1948 
TIMx
->
CCER
 = 
tmpc˚r
;

1949 
	}
}

1964 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1966 
uöt16_t
 
tmp
 = 0;

1969 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1970 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1971 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1973 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1976 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1979 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1980 
	}
}

1994 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1996 
uöt16_t
 
tmp
 = 0;

1999 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2000 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2001 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2003 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2006 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2009 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2010 
	}
}

2035 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2037 
uöt32_t
 
tmp
 = 0;

2038 
uöt16_t
 
tmp1
 = 0;

2041 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2042 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2043 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2045 
tmp
 = (
uöt32_t
Ë
TIMx
;

2046 
tmp
 +
CCMR_Off£t
;

2048 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2051 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2053 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2055 
tmp
 +(
TIM_Ch™√l
>>1);

2058 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2061 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2065 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2073 
	}
}

2082 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2085 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2086 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2087 i‡(
NewSèã
 !
DISABLE
)

2090 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2095 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2097 
	}
}

2110 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2113 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2114 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2115 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2118 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2123 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2125 
	}
}

2134 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2137 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2139 i‡(
NewSèã
 !
DISABLE
)

2142 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2147 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2149 
	}
}

2160 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2163 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2164 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2166 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2168 
TIMx
->
CR1
 |
TIM_OPMode
;

2169 
	}
}

2192 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2195 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2196 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2198 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2200 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2201 
	}
}

2215 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2218 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2219 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2221 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2223 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2224 
	}
}

2236 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2239 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2240 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2242 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2245 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2246 
	}
}

2254 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2257 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2259 
TIMx
->
CNT
 = 
Cou¡î
;

2260 
	}
}

2268 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2271 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2273 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2274 
	}
}

2282 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2285 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2287 
TIMx
->
CCR1
 = 
Com∑ª1
;

2288 
	}
}

2296 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2299 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2301 
TIMx
->
CCR2
 = 
Com∑ª2
;

2302 
	}
}

2310 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2313 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2315 
TIMx
->
CCR3
 = 
Com∑ª3
;

2316 
	}
}

2324 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2327 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2329 
TIMx
->
CCR4
 = 
Com∑ª4
;

2330 
	}
}

2343 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2346 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2347 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2349 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2351 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2352 
	}
}

2365 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2368 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2369 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2371 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2373 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2374 
	}
}

2387 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2390 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2391 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2393 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2395 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2396 
	}
}

2409 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2412 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2413 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2415 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2417 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2418 
	}
}

2431 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2434 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2435 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2437 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2439 
TIMx
->
CR1
 |
TIM_CKD
;

2440 
	}
}

2447 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2450 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2452  
TIMx
->
CCR1
;

2453 
	}
}

2460 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2463 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2465  
TIMx
->
CCR2
;

2466 
	}
}

2473 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2476 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2478  
TIMx
->
CCR3
;

2479 
	}
}

2486 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2489 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2491  
TIMx
->
CCR4
;

2492 
	}
}

2499 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2502 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2504  
TIMx
->
CNT
;

2505 
	}
}

2512 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2515 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2517  
TIMx
->
PSC
;

2518 
	}
}

2546 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2548 
ITSètus
 
bô°©us
 = 
RESET
;

2550 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2551 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2553 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2555 
bô°©us
 = 
SET
;

2559 
bô°©us
 = 
RESET
;

2561  
bô°©us
;

2562 
	}
}

2590 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2593 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2594 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2597 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2598 
	}
}

2622 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2624 
ITSètus
 
bô°©us
 = 
RESET
;

2625 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2627 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2628 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2630 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2632 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2633 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2635 
bô°©us
 = 
SET
;

2639 
bô°©us
 = 
RESET
;

2641  
bô°©us
;

2642 
	}
}

2666 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2669 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2670 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2672 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2673 
	}
}

2691 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2692 
uöt16_t
 
TIM_ICFûãr
)

2694 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2696 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2697 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2698 
tmpc˚r
 = 
TIMx
->
CCER
;

2700 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2701 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2703 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2704 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2706 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2707 
TIMx
->
CCER
 = 
tmpc˚r
;

2708 
	}
}

2726 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2727 
uöt16_t
 
TIM_ICFûãr
)

2729 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2731 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2732 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2733 
tmpc˚r
 = 
TIMx
->
CCER
;

2734 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2736 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2737 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2738 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2740 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2741 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2743 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2744 
TIMx
->
CCER
 = 
tmpc˚r
;

2745 
	}
}

2763 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2764 
uöt16_t
 
TIM_ICFûãr
)

2766 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2768 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2769 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2770 
tmpc˚r
 = 
TIMx
->
CCER
;

2771 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2773 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2774 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2776 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2777 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2779 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2780 
TIMx
->
CCER
 = 
tmpc˚r
;

2781 
	}
}

2799 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2800 
uöt16_t
 
TIM_ICFûãr
)

2802 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2805 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2806 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2807 
tmpc˚r
 = 
TIMx
->
CCER
;

2808 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2810 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2811 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2812 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2815 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2816 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2818 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2819 
TIMx
->
CCER
 = 
tmpc˚r
;

2820 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c

22 
	~"°m32f10x_ußπ.h
"

23 
	~"°m32f10x_rcc.h
"

46 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

47 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

49 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

51 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

52 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

53 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

54 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

55 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

57 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

58 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

60 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

61 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

62 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

64 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

65 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

67 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

68 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

70 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

71 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

73 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

74 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

76 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

77 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

78 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

79 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

80 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

83 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

84 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

87 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

88 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

128 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

131 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

133 i‡(
USARTx
 =
USART1
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

138 i‡(
USARTx
 =
USART2
)

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

143 i‡(
USARTx
 =
USART3
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

146 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

148 i‡(
USARTx
 =
UART4
)

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

155 i‡(
USARTx
 =
UART5
)

157 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

161 
	}
}

173 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

175 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

176 
uöt32_t
 
öãgîdividî
 = 0x00;

177 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

178 
uöt32_t
 
ußπxba£
 = 0;

179 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

181 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

182 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

183 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

184 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

185 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

186 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

187 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

189 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

191 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

194 
ußπxba£
 = (
uöt32_t
)
USARTx
;

197 
tm¥eg
 = 
USARTx
->
CR2
;

199 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

202 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

205 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

208 
tm¥eg
 = 
USARTx
->
CR1
;

210 
tm¥eg
 &
CR1_CLEAR_Mask
;

215 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

216 
USART_InôSåu˘
->
USART_Mode
;

218 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

221 
tm¥eg
 = 
USARTx
->
CR3
;

223 
tm¥eg
 &
CR3_CLEAR_Mask
;

226 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

228 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

232 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

233 i‡(
ußπxba£
 =
USART1_BASE
)

235 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

239 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

243 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

246 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

251 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

253 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

256 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

259 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

261 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

265 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

269 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

270 
	}
}

278 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

281 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

282 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

283 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

284 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

285 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

286 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

287 
	}
}

299 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

301 
uöt32_t
 
tm¥eg
 = 0x00;

303 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

304 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

305 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

306 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

307 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

310 
tm¥eg
 = 
USARTx
->
CR2
;

312 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

318 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

319 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

321 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

322 
	}
}

330 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

333 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

334 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

335 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

336 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

337 
	}
}

348 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

351 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

352 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

354 i‡(
NewSèã
 !
DISABLE
)

357 
USARTx
->
CR1
 |
CR1_UE_Së
;

362 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

364 
	}
}

385 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

387 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

388 
uöt32_t
 
ußπxba£
 = 0x00;

390 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

391 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

392 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

394 i‡(
USART_IT
 =
USART_IT_CTS
)

396 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

399 
ußπxba£
 = (
uöt32_t
)
USARTx
;

402 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

405 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

406 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

408 i‡(
ußπªg
 == 0x01)

410 
ußπxba£
 += 0x0C;

412 i‡(
ußπªg
 == 0x02)

414 
ußπxba£
 += 0x10;

418 
ußπxba£
 += 0x14;

420 i‡(
NewSèã
 !
DISABLE
)

422 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

426 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

428 
	}
}

444 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

447 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

448 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

449 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

450 i‡(
NewSèã
 !
DISABLE
)

454 
USARTx
->
CR3
 |
USART_DMAReq
;

460 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

462 
	}
}

472 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

475 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

476 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

479 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

481 
USARTx
->
CR2
 |
USART_Addªss
;

482 
	}
}

495 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

498 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

499 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

501 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

502 
USARTx
->
CR1
 |
USART_WakeUp
;

503 
	}
}

514 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
USARTx
->
CR1
 |
CR1_RWU_Së
;

528 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

530 
	}
}

543 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

546 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

547 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

549 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

550 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

551 
	}
}

562 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

565 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

566 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

568 i‡(
NewSèã
 !
DISABLE
)

571 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

576 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

578 
	}
}

588 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

591 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

592 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

595 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

596 
	}
}

605 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

608 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

611  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

612 
	}
}

621 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

624 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

627 
USARTx
->
CR1
 |
CR1_SBK_Së
;

628 
	}
}

637 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

640 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

643 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

645 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

646 
	}
}

657 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

660 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

663 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

665 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

666 
	}
}

676 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

679 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

681 i‡(
NewSèã
 !
DISABLE
)

684 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

689 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

691 
	}
}

701 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

706 i‡(
NewSèã
 !
DISABLE
)

709 
USARTx
->
CR3
 |
CR3_NACK_Së
;

714 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

716 
	}
}

727 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

730 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

731 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

733 i‡(
NewSèã
 !
DISABLE
)

736 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

741 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

743 
	}
}

758 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

761 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

762 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

764 i‡(
NewSèã
 !
DISABLE
)

767 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

772 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

774 
	}
}

785 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

788 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

791 i‡(
NewSèã
 !
DISABLE
)

794 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

799 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

801 
	}
}

814 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

817 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

818 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

820 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

821 
USARTx
->
CR3
 |
USART_IrDAMode
;

822 
	}
}

833 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

836 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

837 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

839 i‡(
NewSèã
 !
DISABLE
)

842 
USARTx
->
CR3
 |
CR3_IREN_Së
;

847 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

849 
	}
}

870 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

872 
FœgSètus
 
bô°©us
 = 
RESET
;

874 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

875 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

877 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

879 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

882 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

919 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

922 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

923 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

925 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

927 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

930 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

931 
	}
}

952 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

954 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

955 
ITSètus
 
bô°©us
 = 
RESET
;

957 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

958 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

960 i‡(
USART_IT
 =
USART_IT_CTS
)

962 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

966 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

968 
ômask
 = 
USART_IT
 & 
IT_Mask
;

969 
ômask
 = (
uöt32_t
)0x01 << itmask;

971 i‡(
ußπªg
 == 0x01)

973 
ômask
 &
USARTx
->
CR1
;

975 i‡(
ußπªg
 == 0x02)

977 
ômask
 &
USARTx
->
CR2
;

981 
ômask
 &
USARTx
->
CR3
;

984 
bôpos
 = 
USART_IT
 >> 0x08;

985 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

986 
bôpos
 &
USARTx
->
SR
;

987 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

989 
bô°©us
 = 
SET
;

993 
bô°©us
 = 
RESET
;

996  
bô°©us
;

997 
	}
}

1026 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1028 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1030 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1031 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1033 i‡(
USART_IT
 =
USART_IT_CTS
)

1035 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1038 
bôpos
 = 
USART_IT
 >> 0x08;

1039 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1040 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1041 
	}
}

	@codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c

22 
	~"°m32f10x_wwdg.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

50 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

51 
	#EWI_BôNumbî
 0x09

	)

52 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

57 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

60 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

61 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

62 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

101 
	$WWDG_DeInô
()

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

105 
	}
}

117 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

119 
uöt32_t
 
tm¥eg
 = 0;

121 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

123 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

125 
tm¥eg
 |
WWDG_PªsˇÀr
;

127 
WWDG
->
CFR
 = 
tm¥eg
;

128 
	}
}

136 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

138 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

141 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

144 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

147 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

150 
WWDG
->
CFR
 = 
tm¥eg
;

151 
	}
}

158 
	$WWDG_E«bÀIT
()

160 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

161 
	}
}

169 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

172 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

175 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

176 
	}
}

184 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

187 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

188 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

189 
	}
}

196 
FœgSètus
 
	$WWDG_GëFœgSètus
()

198  (
FœgSètus
)(
WWDG
->
SR
);

199 
	}
}

206 
	$WWDG_CÀ¨Fœg
()

208 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

209 
	}
}

	@codeboot/User/gisunlink_app.c

2 
	~"°m32f10x.h
"

3 
	~"°m32f10x_c⁄f.h
"

4 
	~"gisu∆ök_ußπ.h
"

5 
	~"gisu∆ök_üp.h
"

6 
	~"gisu∆ök_ì¥om.h
"

11 (*
	tpFun˘i⁄
)();

12 
	`Dñay
(
__IO
 
uöt32_t
 
nCou¡
);

20 
	$maö
()

22 
uöt32_t
 
JumpAddªss
;

23 
pFun˘i⁄
 
Jump_To_Aµliˇti⁄
;

25 
	`gisu∆ök_u¨t_öô
(19200);

27 
	`¥ötf
("/*********************************************/\r\n");

28 
	`¥ötf
("/* Bootloader is starting....... */\r\n");

29 
	`¥ötf
("/*********************************************/\r\n");

31 
	`gisu∆ök_e2¥om_Inô
();

32 
	`IAP_CheckBoŸLﬂdî
();

33 
JumpAddªss
 = *(
vu32
*Ë(
ASe˘i⁄ProgømAddªss
 + 4);

34 
Jump_To_Aµliˇti⁄
 = (
pFun˘i⁄
Ë
JumpAddªss
;

35 
	`__£t_MSP
(*(
vu32
*Ë
ASe˘i⁄ProgømAddªss
);

36 
	`Jump_To_Aµliˇti⁄
();

39 
	}
}

46 
	$Dñay
(
__IO
 
uöt32_t
 
nCou¡
)

48 
nCou¡
--)

51 
	}
}

	@codeboot/User/gisunlink_eeprom.c

1 
	~"gisu∆ök_ì¥om.h
"

2 
	~"°rög.h
"

6 
	#ACCHK
 
GPIO_Pö_4


	)

7 
	#ACCHK_PORT
 
GPIOB


	)

8 
	#ACCHK_CLK
 
RCC_APB2Pîùh_GPIOB


	)

9 
	#ACCHK_HIGH
(Ë
ACCHK_PORT
->
BSRR
 = 
ACCHK


	)

10 
	#ACCHK_LOW
(Ë
ACCHK_PORT
->
BRR
 = 
ACCHK


	)

13 
	#I2C
 
GPIOB


	)

14 
	#RCC_I2C_PORT
 
RCC_APB2Pîùh_GPIOB


	)

15 
	#I2C_SCL_PIN
 
GPIO_Pö_9


	)

16 
	#I2C_SDA_PIN
 
GPIO_Pö_8


	)

19 
	#I2C_SCL_1
(Ë
I2C
->
BSRR
 = 
I2C_SCL_PIN


	)

20 
	#I2C_SCL_0
(Ë
I2C
->
BRR
 = 
I2C_SCL_PIN


	)

22 
	#I2C_SDA_1
(Ë
I2C
->
BSRR
 = 
I2C_SDA_PIN


	)

23 
	#I2C_SDA_0
(Ë
I2C
->
BRR
 = 
I2C_SDA_PIN


	)

25 
	#I2C_SDA_READ
(Ë((
I2C
->
IDR
 & 
I2C_SDA_PIN
Ë!0Ë

	)

26 
	#I2C_SCL_READ
(Ë((
I2C
->
IDR
 & 
I2C_SCL_PIN
Ë!0Ë

	)

29 
	$gisu∆ök_e2¥om_Inô
()

32 
GPIO_InôTy≥Def
 
GPIO_Inô_Såu˘uª
;

33 
	`RCC_APB2PîùhClockCmd
(
RCC_I2C_PORT
,
ENABLE
);

34 
GPIO_Inô_Såu˘uª
.
GPIO_Pö
 = 
I2C_SCL_PIN
 | 
I2C_SDA_PIN
;

35 
GPIO_Inô_Såu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

36 
GPIO_Inô_Såu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

37 
	`GPIO_Inô
(
GPIOB
,&
GPIO_Inô_Såu˘uª
);

38 
	`GPIO_SëBôs
(
I2C
,
I2C_SCL_PIN
 | 
I2C_SDA_PIN
);

41 
	`i2c_St›
();

43 
	}
}

54 
	$i2c_Dñay
()

56 
uöt8_t
 
i
,
j
;

57 
i
=0;i<10;i++)

58 
j
=10;j>0; j--);

59 
	}
}

69 
	$i2c_Sèπ
()

72 
	`I2C_SDA_1
();

73 
	`I2C_SCL_1
();

74 
	`i2c_Dñay
();

75 
	`I2C_SDA_0
();

76 
	`i2c_Dñay
();

77 
	`I2C_SCL_0
();

78 
	`i2c_Dñay
();

79 
	}
}

89 
	$i2c_St›
()

92 
	`I2C_SDA_0
();

93 
	`I2C_SCL_1
();

94 
	`i2c_Dñay
();

95 
	`I2C_SDA_1
();

96 
	}
}

106 
	$i2c_SídByã
(
uöt8_t
 
_ucByã
)

108 
uöt8_t
 
i
;

111 
i
 = 0; i < 8; i++)

113 i‡(
_ucByã
 & 0x80)

115 
	`I2C_SDA_1
();

119 
	`I2C_SDA_0
();

121 
	`i2c_Dñay
();

122 
	`I2C_SCL_1
();

123 
	`i2c_Dñay
();

124 
	`I2C_SCL_0
();

125 i‡(
i
 == 7)

127 
	`I2C_SDA_1
();

129 
_ucByã
 <<= 1;

130 
	`i2c_Dñay
();

132 
	}
}

142 
uöt8_t
 
	$i2c_RódByã
()

144 
uöt8_t
 
i
;

145 
uöt8_t
 
vÆue
;

148 
vÆue
 = 0;

149 
i
 = 0; i < 8; i++)

151 
vÆue
 <<= 1;

152 
	`I2C_SCL_1
();

153 
	`i2c_Dñay
();

154 i‡(
	`I2C_SDA_READ
())

156 
vÆue
++;

158 
	`I2C_SCL_0
();

159 
	`i2c_Dñay
();

161  
vÆue
;

162 
	}
}

172 
uöt8_t
 
	$i2c_WaôAck
()

174 
uöt8_t
 
ª
;

176 
	`I2C_SDA_1
();

177 
	`i2c_Dñay
();

178 
	`I2C_SCL_1
();

179 
	`i2c_Dñay
();

180 i‡(
	`I2C_SDA_READ
())

182 
ª
 = 1;

186 
ª
 = 0;

188 
	`I2C_SCL_0
();

189 
	`i2c_Dñay
();

190  
ª
;

191 
	}
}

201 
	$i2c_Ack
()

203 
	`I2C_SDA_0
();

204 
	`i2c_Dñay
();

205 
	`I2C_SCL_1
();

206 
	`i2c_Dñay
();

207 
	`I2C_SCL_0
();

208 
	`i2c_Dñay
();

209 
	`I2C_SDA_1
();

210 
	}
}

220 
	$i2c_NAck
()

222 
	`I2C_SDA_1
();

223 
	`i2c_Dñay
();

224 
	`I2C_SCL_1
();

225 
	`i2c_Dñay
();

226 
	`I2C_SCL_0
();

227 
	`i2c_Dñay
();

228 
	}
}

238 
uöt8_t
 
	$i2c_CheckDevi˚
(
uöt8_t
 
_Addªss
)

240 
uöt8_t
 
ucAck
;

242 i‡(
	`I2C_SDA_READ
(Ë&& 
	`I2C_SCL_READ
())

244 
	`i2c_Sèπ
();

247 
	`i2c_SídByã
(
_Addªss
 | 
I2C_WR
);

248 
ucAck
 = 
	`i2c_WaôAck
();

250 
	`i2c_St›
();

252  
ucAck
;

255 
	}
}

258 
uöt8_t
 
	$ì_CheckOk
()

260 i‡(
	`i2c_CheckDevi˚
(
EE_DEV_ADDR
) == 0)

267 
	`i2c_St›
();

270 
	}
}

283 
uöt8_t
 
	$ì_RódByãs
(
uöt8_t
 *
_pRódBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
)

285 
uöt16_t
 
i
;

290 
	`i2c_Sèπ
();

293 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_WR
);

296 i‡(
	`i2c_WaôAck
() != 0)

298 
cmd_Áû
;

302 i‡(
EE_ADDR_BYTES
 == 1)

304 
	`i2c_SídByã
((
uöt8_t
)
_usAddªss
);

305 i‡(
	`i2c_WaôAck
() != 0)

307 
cmd_Áû
;

312 
	`i2c_SídByã
(
_usAddªss
 >> 8);

313 i‡(
	`i2c_WaôAck
() != 0)

315 
cmd_Áû
;

318 
	`i2c_SídByã
(
_usAddªss
);

319 i‡(
	`i2c_WaôAck
() != 0)

321 
cmd_Áû
;

326 
	`i2c_Sèπ
();

329 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_RD
);

332 i‡(
	`i2c_WaôAck
() != 0)

334 
cmd_Áû
;

338 
i
 = 0; i < 
_usSize
; i++)

340 
_pRódBuf
[
i
] = 
	`i2c_RódByã
();

343 i‡(
i
 !
_usSize
 - 1)

345 
	`i2c_Ack
();

349 
	`i2c_NAck
();

353 
	`i2c_St›
();

356 
cmd_Áû
:

358 
	`i2c_St›
();

360 
	}
}

372 
uöt8_t
 
	$ì_WrôeByãs
(
uöt8_t
 *
_pWrôeBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
)

374 
uöt16_t
 
i
,
m
;

375 
uöt16_t
 
usAddr
;

384 
usAddr
 = 
_usAddªss
;

385 
i
 = 0; i < 
_usSize
; i++)

388 i‡((
i
 =0Ë|| (
usAddr
 & (
EE_PAGE_SIZE
 - 1)) == 0)

391 
	`i2c_St›
();

396 
m
 = 0; m < 1000; m++)

399 
	`i2c_Sèπ
();

402 
	`i2c_SídByã
(
EE_DEV_ADDR
 | 
I2C_WR
);

405 i‡(
	`i2c_WaôAck
() == 0)

410 i‡(
m
 == 1000)

412 
cmd_Áû
;

416 i‡(
EE_ADDR_BYTES
 == 1)

418 
	`i2c_SídByã
((
uöt8_t
)
usAddr
);

419 i‡(
	`i2c_WaôAck
() != 0)

421 
cmd_Áû
;

426 
	`i2c_SídByã
(
usAddr
 >> 8);

427 i‡(
	`i2c_WaôAck
() != 0)

429 
cmd_Áû
;

432 
	`i2c_SídByã
(
usAddr
);

433 i‡(
	`i2c_WaôAck
() != 0)

435 
cmd_Áû
;

441 
	`i2c_SídByã
(
_pWrôeBuf
[
i
]);

444 i‡(
	`i2c_WaôAck
() != 0)

446 
cmd_Áû
;

449 
usAddr
++;

453 
	`i2c_St›
();

456 
cmd_Áû
:

458 
	`i2c_St›
();

460 
	}
}

	@codeboot/User/gisunlink_eeprom.h

1 #i‚de‡
__GISUNLINK_E2PROM_H__


2 
	#__GISUNLINK_E2PROM_H__


	)

5 
	~"°m32f10x.h
"

8 
	#EE_MODEL_NAME
 "AT24C64"

	)

9 
	#EE_DEV_ADDR
 0xA0

	)

10 
	#EE_PAGE_SIZE
 32

	)

11 
	#EE_SIZE
 256

	)

12 
	#EE_ADDR_BYTES
 2

	)

13 
	#I2C_WR
 0

	)

14 
	#I2C_RD
 1

	)

19 
i2c_St›
();

20 
gisu∆ök_e2¥om_Inô
();

21 
uöt8_t
 
ì_WrôeByãs
(uöt8_à*
_pWrôeBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
);

22 
uöt8_t
 
ì_RódByãs
(uöt8_à*
_pRódBuf
, 
uöt16_t
 
_usAddªss
, uöt16_à
_usSize
);

	@codeboot/User/gisunlink_iap.c

3 
	~"gisu∆ök_üp.h
"

4 
	~"gisu∆ök_ì¥om.h
"

5 
	~"gisu∆ök_ußπ.h
"

6 
	~"°m32f10x_Êash.h
"

8 
	#OK
 0

	)

14 
	#IAP_PARAMETER
 0

15 

	)

16 vﬁ©ûê
FLASH_Sètus
 
	gFLASHSètus
 = 
FLASH_COMPLETE
;

23 vﬁ©ûê
uöt32_t
 
	mÊag
;

24 vﬁ©ûê
uöt8_t
 
	mfbuf
[4];

26 }
	gUpD©aUn
;

28 (*
	tpFun˘i⁄
)();

34 
	$sysSo·Re£t
()

36 
	`__£t_FAULTMASK
(1);

37 
	`NVIC_Sy°emRe£t
();

38 
	}
}

43 
	$IAP_CheckBoŸLﬂdî
()

46 
u16
 
iSize
 = 0;

47 
u32
 
wbuf
,
rbuf
,
i
;

48 
vu32
 
JumpAddªss
;

50 
uöt32_t
 
Eø£Cou¡î
 = 0x00;

51 
uöt32_t
 
NbrOfPage
 = 0;

54 
pFun˘i⁄
 
Jump_To_Aµliˇti⁄
;

59 
	`ì_RódByãs
((*)&
UpD©aUn
.
fbuf
, 
IAP_PARAMETER
, 4);

61 if(
UpD©aUn
.
Êag
 != 0x55aa55aa)

64 
	`¥ötf
("\r\nEntering The Main Program Sectrion !! \r\n");

66 
JumpAddªss
 = *(
vu32
*Ë(
ASe˘i⁄ProgømAddªss
 + 4);

68 
Jump_To_Aµliˇti⁄
 = (
pFun˘i⁄
Ë
JumpAddªss
;

70 
	`__£t_MSP
(*(
vu32
*Ë
ASe˘i⁄ProgømAddªss
);

72 
	`Jump_To_Aµliˇti⁄
();

76 if(
UpD©aUn
.
Êag
 == 0x55aa55aa)

78 
	`¥ötf
("\r\nHave New Program Update !\r\n");

80 
	`__£t_PRIMASK
(1);

81 
	`FLASH_U∆ockB™k1
();

91 
NbrOfPage
 = (
CODE_END_ADDRESS
 - 
CODE_START_ADDRESS
Ë/ 
FLASH_PAGE_SIZE
;

94 
	`FLASH_CÀ¨Fœg
(
FLASH_FLAG_EOP
 | 
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_WRPRTERR
);

97 
Eø£Cou¡î
 = 0; (Eø£Cou¡î < 
NbrOfPage
Ë&& (
FLASHSètus
 =
FLASH_COMPLETE
); EraseCounter++)

99 
FLASHSètus
 = 
	`FLASH_Eø£Page
(
CODE_START_ADDRESS
 + (
FLASH_PAGE_SIZE
 * 
Eø£Cou¡î
));

107 
i
=0;i<
IAPProgømSize
;i++)

109 
wbuf
 = (*(
__IO
 
uöt32_t
 *)(
BSe˘i⁄ProgømAddªss
 + 
iSize
 ));

111 
	`FLASH_ProgømW‹d
((
ASe˘i⁄ProgømAddªss
 + 
iSize
 ),
wbuf
);

113 
rbuf
 = (*(
__IO
 
uöt32_t
 *)(
ASe˘i⁄ProgømAddªss
 + 
iSize
 ));

115 if(
wbuf
 !
rbuf
)

117 
	`FLASH_LockB™k1
();

118 
	`__£t_PRIMASK
(0);

119 
	`¥ötf
("\r\nUpdate Failed .......\r\n");

120 
	`sysSo·Re£t
();

124 
iSize
 +=4;

128 
	`FLASH_LockB™k1
();

129 
	`__£t_PRIMASK
(0);

132 
	`¥ötf
("\r\nUpdate is Successful !!\r\n");

138 
i
=0;i<10000;i++);

140 
UpD©aUn
.
Êag
 = 0;

141 
	`ì_WrôeByãs
((
uöt8_t
 *)
UpD©aUn
.
fbuf
, 
IAP_PARAMETER
, 4);

144 
	`sysSo·Re£t
();

150 
	`¥ötf
("\r\n No New Program NeededÅo be Update\r\n");

155 
	}
}

	@codeboot/User/gisunlink_iap.h

3 #i‚de‡
_GISUNLINK_IAP_H_


4 
	#_GISUNLINK_IAP_H_


	)

6 #i‚de‡
__©


7 
	#__©
(
_addr
Ë
	`__©åibuã__
 ((
	`©
(_addr)))

	)

39 
	#FœshProgømSize
 0xF000

40 
	#IAPProgømSize
 0x3C00

41 

	)

42 
	#IAPAddªssAddªss
 0x08000000

43 
	#ASe˘i⁄ProgømAddªss
 0x08002000

44 
	#BSe˘i⁄ProgømAddªss
 0x08011000

45 

	)

46 
	#CODE_START_ADDRESS
 ((
uöt32_t
)0x08002000)

47 
	#CODE_END_ADDRESS
 ((
uöt32_t
)0x08011000)

48 

	)

49 
	#CODE_COPY_START_ADDRESS
 ((
uöt32_t
)0x08011000)

50 
	#CODE_COPY_END_ADDRESS
 ((
uöt32_t
)0x08020000)

51 

	)

53 
	#FLASH_PAGE_SIZE
 ((
uöt16_t
)0x400)

	)

57 
	#IAP_SINGLE
 0xA55A5AA5

	)

59 
	#IAP_ASECTOR
 0xA00A0AA0

	)

60 
	#IAP_BSECTOR
 0xB00B0BB0

	)

63 
	#IAP_UPDATE_RUN_BL
 0xAA

	)

65 
	#IAP_UPDATE_APP_DEF
 0xA0

	)

66 
	#IAP_UPDATE_APP_ADD
 0xA1

	)

67 
	#IAP_UPDATE_BL
 0xA2

	)

70 
	#IAP_MAXUSERFLASH_SIZE
 580

71 

	)

73 
IAP_CheckBoŸLﬂdî
();

	@codeboot/User/gisunlink_usart.c

2 
	~"gisu∆ök_ußπ.h
"

5 #¥agm®
imp‹t
(
__u£_no_£miho°ög
)

7 
	s__FILE


9 
	mh™dÀ
;

13 
FILE
 
	g__°dout
;

15 
	$_sys_exô
(
x
)

17 
x
 = x;

18 
	}
}

20 
	$Âutc
(
ch
, 
FILE
 *
f
)

22 
	`USART_GëFœgSètus
(
USART2
,
USART_FLAG_TC
)==
RESET
);

23 
	`USART_SídD©a
(
USART2
,(
uöt8_t
)
ch
);

24  
ch
;

25 
	}
}

28 
	$gisu∆ök_u¨t_öô
(
uöt32_t
 
bound
)

31 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

32 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

34 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

35 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

36 
	`USART_DeInô
(
USART2
);

38 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

39 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

40 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

41 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

44 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_3
;

45 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

46 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

50 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
bound
;

51 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

52 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

53 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

54 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

55 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

57 
	`USART_Inô
(
USART2
, &
USART_InôSåu˘uª
);

59 
	`USART_Cmd
(
USART2
, 
ENABLE
);

60 
	`USART_GëFœgSètus
(
USART2
,
USART_FLAG_TC
);

62 
	}
}

	@codeboot/User/gisunlink_usart.h

1 #i‚de‡
__GISUNLINK_USART_H


2 
	#__GISUNLINK_USART_H


	)

5 
	~"°dio.h
"

6 
	~"°m32f10x.h
"

9 
gisu∆ök_u¨t_öô
(
uöt32_t
 
bound
);

	@codeboot/User/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

27 
	~"°m32f10x_adc.h
"

34 
	~"°m32f10x_dma.h
"

35 
	~"°m32f10x_exti.h
"

38 
	~"°m32f10x_gpio.h
"

39 
	~"°m32f10x_i2c.h
"

42 
	~"°m32f10x_rcc.h
"

46 
	~"°m32f10x_tim.h
"

47 
	~"°m32f10x_ußπ.h
"

49 
	~"misc.h
"

58 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@codeboot/User/stm32f10x_it.c

24 
	~"°m32f10x_ô.h
"

64 
	$NMI_H™dÀr
()

66 
	}
}

73 
	$H¨dFau…_H™dÀr
()

79 
	}
}

86 
	$MemM™age_H™dÀr
()

92 
	}
}

99 
	$BusFau…_H™dÀr
()

105 
	}
}

112 
	$UßgeFau…_H™dÀr
()

118 
	}
}

125 
	$SVC_H™dÀr
()

127 
	}
}

134 
	$DebugM⁄_H™dÀr
()

136 
	}
}

143 
	$PídSV_H™dÀr
()

145 
	}
}

152 
	$SysTick_H™dÀr
()

154 
	}
}

156 
	$USART2_IRQH™dÀr
()

159 if(
	`USART_GëITSètus
(
USART2
, 
USART_IT_RXNE
Ë!
RESET
)

162 
	`USART_CÀ¨ITPídögBô
(
USART2
, 
USART_IT_RXNE
);

167 
	}
}

	@codeboot/User/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

33 
NMI_H™dÀr
();

34 
H¨dFau…_H™dÀr
();

35 
MemM™age_H™dÀr
();

36 
BusFau…_H™dÀr
();

37 
UßgeFau…_H™dÀr
();

38 
SVC_H™dÀr
();

39 
DebugM⁄_H™dÀr
();

40 
PídSV_H™dÀr
();

41 
SysTick_H™dÀr
();

42 
USART1_IRQH™dÀr
();

43 
USART2_IRQH™dÀr
();

44 
USART3_IRQH™dÀr
();

	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifdef 
__USE_MISC


290 
_IEEE_
 = -1,

291 
_SVID_
,

292 
_XOPEN_
,

293 
_POSIX_
,

294 
_ISOC_


295 } 
	t_LIB_VERSION_TYPE
;

300 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

304 #ifde‡
__USE_SVID


310 #ifde‡
__˝lu•lus


311 
__ex˚±i⁄


313 
ex˚±i⁄


316 
ty≥
;

317 *
«me
;

318 
¨g1
;

319 
¨g2
;

320 
ªtvÆ
;

321 
	}
};

323 #ifde‡
__˝lu•lus


324 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

326 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

329 
	#X_TLOSS
 1.41484755040568800000e+16

	)

332 
	#DOMAIN
 1

	)

333 
	#SING
 2

	)

334 
	#OVERFLOW
 3

	)

335 
	#UNDERFLOW
 4

	)

336 
	#TLOSS
 5

	)

337 
	#PLOSS
 6

	)

340 
	#HUGE
 3.40282347e+38F

	)

344 #ifde‡
__USE_XOPEN


346 
	#MAXFLOAT
 3.40282347e+38F

	)

353 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


354 
	#M_E
 2.7182818284590452354

	)

355 
	#M_LOG2E
 1.4426950408889634074

	)

356 
	#M_LOG10E
 0.43429448190325182765

	)

357 
	#M_LN2
 0.69314718055994530942

	)

358 
	#M_LN10
 2.30258509299404568402

	)

359 
	#M_PI
 3.14159265358979323846

	)

360 
	#M_PI_2
 1.57079632679489661923

	)

361 
	#M_PI_4
 0.78539816339744830962

	)

362 
	#M_1_PI
 0.31830988618379067154

	)

363 
	#M_2_PI
 0.63661977236758134308

	)

364 
	#M_2_SQRTPI
 1.12837916709551257390

	)

365 
	#M_SQRT2
 1.41421356237309504880

	)

366 
	#M_SQRT1_2
 0.70710678118654752440

	)

372 #ifde‡
__USE_GNU


373 
	#M_El
 2.718281828459045235360287471352662498L

	)

374 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

375 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

376 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

377 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

378 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

379 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

380 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

381 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

382 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

383 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

384 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

385 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

392 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


393 
	#__NO_MATH_INLINES
 1

	)

396 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

403 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

404 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

405 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

406 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

407 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

408 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

412 #ifde‡
__USE_EXTERN_INLINES


413 
	~<bôs/m©hölöe.h
>

418 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

419 
	~<bôs/m©h-föôe.h
>

422 #ifde‡
__USE_ISOC99


426 #i‚de‡
isgª©î


427 
	#isgª©î
(
x
, 
y
) \

428 (
__exãnsi⁄__
 \

429 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

430 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

434 #i‚de‡
isgª©îequÆ


435 
	#isgª©îequÆ
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

442 #i‚de‡
i¶ess


443 
	#i¶ess
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

450 #i‚de‡
i¶es£quÆ


451 
	#i¶es£quÆ
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

458 #i‚de‡
i¶essgª©î


459 
	#i¶essgª©î
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

466 #i‚de‡
isun‹dîed


467 
	#isun‹dîed
(
u
, 
v
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

470 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

475 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

283 
	#INT8_C
(
c
Ë
	)
c

284 
	#INT16_C
(
c
Ë
	)
c

285 
	#INT32_C
(
c
Ë
	)
c

286 #i‡
__WORDSIZE
 == 64

287 
	#INT64_C
(
c
Ë¯## 
L


	)

289 
	#INT64_C
(
c
Ë¯## 
LL


	)

293 
	#UINT8_C
(
c
Ë
	)
c

294 
	#UINT16_C
(
c
Ë
	)
c

295 
	#UINT32_C
(
c
Ë¯## 
U


	)

296 #i‡
__WORDSIZE
 == 64

297 
	#UINT64_C
(
c
Ë¯## 
UL


	)

299 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#INTMAX_C
(
c
Ë¯## 
L


	)

305 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

307 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

308 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 17

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 
	m__∑d1
;

188 
	m__∑d2
;

191 
	m__Êags
;

192 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

193 } 
	m__d©a
;

197 
	m__lock
;

198 
	m__ƒ_ªadîs
;

199 
	m__ªadîs_wakeup
;

200 
	m__wrôî_wakeup
;

201 
	m__ƒ_ªadîs_queued
;

202 
	m__ƒ_wrôîs_queued
;

205 
	m__Êags
;

206 
	m__sh¨ed
;

207 
	m__∑d1
;

208 
	m__∑d2
;

209 
	m__wrôî
;

210 } 
	m__d©a
;

212 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

213 
	m__Æign
;

214 } 
	t±hªad_rwlock_t
;

218 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

219 
	m__Æign
;

220 } 
	t±hªad_rwlock©å_t
;

224 #ifde‡
__USE_XOPEN2K


226 vﬁ©ûê
	t±hªad_•ölock_t
;

233 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

234 
	m__Æign
;

235 } 
	t±hªad_b¨rõr_t
;

239 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

240 
	m__Æign
;

241 } 
	t±hªad_b¨rõøâr_t
;

245 #i‚de‡
__x86_64__


247 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
f˘

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
f˘

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
f˘

83 
	#__P
(
¨gs
Ë
	)
¨gs

84 
	#__PMT
(
¨gs
Ë
	)
¨gs

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

144 #i‡
__GNUC_PREREQ
 (4,3)

145 
	#__w¨nde˛
(
«me
, 
msg
) \

146 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

147 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

148 
	#__îr‹de˛
(
«me
, 
msg
) \

149 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

151 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

152 
	#__w¨«âr
(
msg
)

	)

153 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 #i‡
__GNUC_PREREQ
 (2,97)

159 
	#__Êex¨r
 []

	)

161 #ifde‡
__GNUC__


162 
	#__Êex¨r
 [0]

	)

164 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

165 
	#__Êex¨r
 []

	)

168 
	#__Êex¨r
 [1]

	)

184 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

186 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

187 #ifde‡
__˝lu•lus


188 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

189 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

190 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

191 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

198 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

199 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

212 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

213 
	#__©åibuã__
(
xyz
Ë

	)

219 #i‡
__GNUC_PREREQ
 (2,96)

220 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

222 
	#__©åibuã_mÆloc__


	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 
	~<bôs/w‹dsize.h
>

394 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


395 
	#__LDBL_COMPAT
 1

	)

396 #ifde‡
__REDIRECT


397 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

398 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

399 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

400 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

401 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

402 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

403 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

404 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

405 
	#__LDBL_REDIR_DECL
(
«me
) \

406 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

407 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

409 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

410 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

413 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


414 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

415 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

416 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

417 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

418 
	#__LDBL_REDIR_DECL
(
«me
)

	)

419 #ifde‡
__REDIRECT


420 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

422 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #i‡
__WORDSIZE
 == 64

129 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

136 #ifde‡
__USE_GNU


137 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


143 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 0, 0, 0 } }

	)

147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

192 
	s_±hªad_˛ónup_buf„r


194 (*
	m__routöe
) (*);

195 *
	m__¨g
;

196 
	m__ˇn˚…y≥
;

197 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

219 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifde‡
__USE_XOPEN2K


226 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

236 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

237 *(*
__°¨t_routöe
) (*),

238 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

244 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

252 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

254 #ifde‡
__USE_GNU


257 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

265 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

266 c⁄° 
time•ec
 *
__ab°ime
);

273 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

277 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

281 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

297 *
__dëach°©e
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

302 
__dëach°©e
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

308 
size_t
 *
__gu¨dsize
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

313 
size_t
 
__gu¨dsize
)

314 
__THROW
 
	`__n⁄nuŒ
 ((1));

318 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

319 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

324 c⁄° 
sched_∑øm
 *
__ª°ri˘


325 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


329 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__öhîô
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

343 
__öhîô
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

349 *
__ª°ri˘
 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


358 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

365 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

366 *
__°ackaddr
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

370 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


371 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

378 
size_t
 
__°acksize
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_XOPEN2K


383 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

384 **
__ª°ri˘
 
__°ackaddr
,

385 
size_t
 *
__ª°ri˘
 
__°acksize
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

391 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

392 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

395 #ifde‡
__USE_GNU


398 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

399 
size_t
 
__˝u£tsize
,

400 c⁄° 
˝u_£t_t
 *
__˝u£t
)

401 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

405 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

406 
size_t
 
__˝u£tsize
,

407 
˝u_£t_t
 *
__˝u£t
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

423 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

424 c⁄° 
sched_∑øm
 *
__∑øm
)

425 
__THROW
 
	`__n⁄nuŒ
 ((3));

428 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

429 *
__ª°ri˘
 
__pﬁicy
,

430 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

435 
__THROW
;

438 #ifde‡
__USE_GNU


440 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

441 
size_t
 
__buÊí
)

442 
__THROW
 
	`__n⁄nuŒ
 ((2));

445 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

446 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 #ifde‡
__USE_UNIX98


452 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

455 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

458 #ifde‡
__USE_GNU


463 
	$±hªad_yõld
 (Ë
__THROW
;

468 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

469 c⁄° 
˝u_£t_t
 *
__˝u£t
)

470 
__THROW
 
	`__n⁄nuŒ
 ((3));

473 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

474 
˝u_£t_t
 *
__˝u£t
)

475 
__THROW
 
	`__n⁄nuŒ
 ((3));

488 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

489 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

500 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

504 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

507 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

512 
	`±hªad_ã°ˇn˚l
 ();

521 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

522 
__mask_was_ßved
;

523 } 
__ˇn˚l_jmp_buf
[1];

524 *
__∑d
[4];

525 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

528 #i‚de‡
__˛ónup_f˘_©åibuã


529 
	#__˛ónup_f˘_©åibuã


	)

534 
	s__±hªad_˛ónup_‰ame


536 (*
__ˇn˚l_routöe
) (*);

537 *
__ˇn˚l_¨g
;

538 
__do_ô
;

539 
__ˇn˚l_ty≥
;

542 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


543 #ifde‡
__˝lu•lus


545 ˛as†
	c__±hªad_˛ónup_˛ass


547 (*
__ˇn˚l_routöe
) (*);

548 *
__ˇn˚l_¨g
;

549 
__do_ô
;

550 
__ˇn˚l_ty≥
;

552 
public
:

553 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

554 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

555 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

556 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

557 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

558 &
__ˇn˚l_ty≥
); 
	}
}

559 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

569 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

571 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

575 
	#±hªad_˛ónup_p›
(
execuã
) \

576 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

577 } 0)

	)

579 #ifde‡
__USE_GNU


583 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

585 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

586 
__˛‰ame
.
	`__de„r
 ()

	)

591 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

592 
__˛‰ame
.
	`__ª°‹e
 (); \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

601 
__exã∫_ölöe
 

602 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

604 i‡(
__‰ame
->
__do_ô
)

605 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

606 
	}
}

615 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

617 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

618 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

619 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

620 .
__do_ô
 = 1 };

	)

624 
	#±hªad_˛ónup_p›
(
execuã
) \

625 
__˛‰ame
.
__do_ô
 = (
execuã
); \

626 } 0)

	)

628 #ifde‡
__USE_GNU


632 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 }; \

638 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

639 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

644 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

646 
__˛‰ame
.
__do_ô
 = (
execuã
); \

647 } 0)

	)

658 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

660 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

661 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

662 *
__ˇn˚l_¨g
 = (
¨g
); \

663 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

664 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

665 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

667 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

668 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

672 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 dÿ{

	)

674 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

675 
__˛ónup_f˘_©åibuã
;

679 
	#±hªad_˛ónup_p›
(
execuã
) \

682 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

683 i‡(
execuã
) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 } 0)

	)

686 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

687 
__˛ónup_f˘_©åibuã
;

689 #ifde‡
__USE_GNU


693 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

695 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

696 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

697 *
__ˇn˚l_¨g
 = (
¨g
); \

698 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

699 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

700 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

707 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

708 dÿ{

	)

709 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

715 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

718 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

719 i‡(
execuã
) \

720 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

721 
	}
} 0)

	)

722 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

723 
__˛ónup_f˘_©åibuã
;

727 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

728 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

729 #i‚de‡
SHARED


730 
	`__©åibuã__
 ((
__wók__
))

736 
__jmp_buf_èg
;

737 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

743 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

744 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

745 
__THROW
 
	`__n⁄nuŒ
 ((1));

748 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

749 
__THROW
 
	`__n⁄nuŒ
 ((1));

752 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

753 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

759 #ifde‡
__USE_XOPEN2K


761 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

762 c⁄° 
time•ec
 *
__ª°ri˘


763 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

767 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

772 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

773 
__ª°ri˘
 
__muãx
,

774 *
__ª°ri˘
 
__¥io˚ûög
)

775 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

779 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

780 
__¥io˚ûög
,

781 *
__ª°ri˘
 
__ﬁd_˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

785 #ifde‡
__USE_XOPEN2K8


787 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 #ifde‡
__USE_GNU


790 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1));

804 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

809 
__ª°ri˘
 
__©å
,

810 *
__ª°ri˘
 
__psh¨ed
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__psh¨ed
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

818 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


820 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


821 
__©å
, *
__ª°ri˘
 
__köd
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

827 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1));

832 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

833 
__ª°ri˘
 
__©å
,

834 *
__ª°ri˘
 
__¥Ÿocﬁ
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

845 
__ª°ri˘
 
__©å
,

846 *
__ª°ri˘
 
__¥io˚ûög
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

850 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

851 
__¥io˚ûög
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1));

854 #ifde‡
__USE_XOPEN2K


856 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

857 *
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

861 *
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

867 
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifde‡
__USE_GNU


870 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

871 
__robu°√ss
)

872 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


884 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

887 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

892 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

896 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

898 #ifde‡
__USE_XOPEN2K


900 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

901 c⁄° 
time•ec
 *
__ª°ri˘


902 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

906 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

911 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2K


915 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

916 c⁄° 
time•ec
 *
__ª°ri˘


917 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

921 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

922 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1));

932 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

933 
__THROW
 
	`__n⁄nuŒ
 ((1));

936 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

937 
__ª°ri˘
 
__©å
,

938 *
__ª°ri˘
 
__psh¨ed
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

942 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

943 
__psh¨ed
)

944 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

948 
__ª°ri˘
 
__©å
,

949 *
__ª°ri˘
 
__¥ef
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

953 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

954 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

962 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

963 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

964 
__THROW
 
	`__n⁄nuŒ
 ((1));

967 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

968 
__THROW
 
	`__n⁄nuŒ
 ((1));

971 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

972 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

975 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

976 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

984 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

985 
	`__n⁄nuŒ
 ((1, 2));

994 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

995 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

996 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

997 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1));

1006 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1011 
__ª°ri˘
 
__©å
,

1012 *
__ª°ri˘
 
__psh¨ed
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1016 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1017 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1019 #ifde‡
__USE_XOPEN2K


1021 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1022 
__ª°ri˘
 
__©å
,

1023 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1027 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1028 
__˛ockid_t
 
__˛ock_id
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1033 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1042 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1043 
__THROW
 
	`__n⁄nuŒ
 ((1));

1046 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1047 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1051 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1055 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1063 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1064 
__©å
, 
__cou¡
)

1065 
__THROW
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1069 
__THROW
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1077 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1));

1081 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1086 
__ª°ri˘
 
__©å
,

1087 *
__ª°ri˘
 
__psh¨ed
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1091 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1092 
__psh¨ed
)

1093 
__THROW
 
	`__n⁄nuŒ
 ((1));

1105 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1106 (*
__de°r_fun˘i⁄
) (*))

1107 
__THROW
 
	`__n⁄nuŒ
 ((1));

1110 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1116 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1117 c⁄° *
__poöãr
Ë
__THROW
 ;

1120 #ifde‡
__USE_XOPEN2K


1122 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1123 
__˛ockid_t
 *
__˛ock_id
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((2));

1139 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1140 (*
__∑ª¡
) (),

1141 (*
__chûd
Ë()Ë
__THROW
;

1144 #ifde‡
__USE_EXTERN_INLINES


1146 
__exã∫_ölöe
 

1147 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1149  
__thªad1
 =
__thªad2
;

1150 
	}
}

1153 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
278
12599
code/Libararies/CMSIS/core_cm3.c
code/Libararies/CMSIS/core_cm3.h
code/Libararies/CMSIS/stm32f10x.h
code/Libararies/CMSIS/system_stm32f10x.c
code/Libararies/CMSIS/system_stm32f10x.h
code/Libararies/Cryptographic/inc/AES/CBC/aes_cbc.h
code/Libararies/Cryptographic/inc/AES/CCM/aes_ccm.h
code/Libararies/Cryptographic/inc/AES/CMAC/aes_cmac.h
code/Libararies/Cryptographic/inc/AES/CTR/aes_ctr.h
code/Libararies/Cryptographic/inc/AES/Common/aes_common.h
code/Libararies/Cryptographic/inc/AES/Common/aes_low_level.h
code/Libararies/Cryptographic/inc/AES/ECB/aes_ecb.h
code/Libararies/Cryptographic/inc/AES/GCM/aes_gcm.h
code/Libararies/Cryptographic/inc/AES/KEYWRAP/aes_keywrap.h
code/Libararies/Cryptographic/inc/AES/aes.h
code/Libararies/Cryptographic/inc/ARC4/arc4.h
code/Libararies/Cryptographic/inc/Common/err_codes.h
code/Libararies/Cryptographic/inc/Common/macros.h
code/Libararies/Cryptographic/inc/Common/sk.h
code/Libararies/Cryptographic/inc/Common/types.h
code/Libararies/Cryptographic/inc/DES/CBC/des_cbc.h
code/Libararies/Cryptographic/inc/DES/Common/des_common.h
code/Libararies/Cryptographic/inc/DES/ECB/des_ecb.h
code/Libararies/Cryptographic/inc/DES/des.h
code/Libararies/Cryptographic/inc/ECC/LowLevel/elliptic.h
code/Libararies/Cryptographic/inc/ECC/ecc.h
code/Libararies/Cryptographic/inc/HASH/Common/hash_common.h
code/Libararies/Cryptographic/inc/HASH/Common/sha256_sha224_transform.h
code/Libararies/Cryptographic/inc/HASH/MD5/hmac_md5.h
code/Libararies/Cryptographic/inc/HASH/MD5/md5.h
code/Libararies/Cryptographic/inc/HASH/MD5/md5_low_level.h
code/Libararies/Cryptographic/inc/HASH/SHA1/hmac_sha1.h
code/Libararies/Cryptographic/inc/HASH/SHA1/sha1.h
code/Libararies/Cryptographic/inc/HASH/SHA1/sha1_low_level.h
code/Libararies/Cryptographic/inc/HASH/SHA224/hmac_sha224.h
code/Libararies/Cryptographic/inc/HASH/SHA224/sha224.h
code/Libararies/Cryptographic/inc/HASH/SHA224/sha224_low_level.h
code/Libararies/Cryptographic/inc/HASH/SHA256/hmac_sha256.h
code/Libararies/Cryptographic/inc/HASH/SHA256/sha256.h
code/Libararies/Cryptographic/inc/HASH/SHA256/sha256_low_level.h
code/Libararies/Cryptographic/inc/HASH/hash.h
code/Libararies/Cryptographic/inc/MATH/BN/arith.h
code/Libararies/Cryptographic/inc/MATH/BN/bn.h
code/Libararies/Cryptographic/inc/MATH/BN/conv.h
code/Libararies/Cryptographic/inc/MATH/BN/modular.h
code/Libararies/Cryptographic/inc/MATH/BN/monty.h
code/Libararies/Cryptographic/inc/MATH/BN/rng_bn.h
code/Libararies/Cryptographic/inc/MATH/math.h
code/Libararies/Cryptographic/inc/RNG/DRBG_AES128/drbg.h
code/Libararies/Cryptographic/inc/RNG/rng.h
code/Libararies/Cryptographic/inc/RSA/rsa.h
code/Libararies/Cryptographic/inc/RSA/rsa_low_level.h
code/Libararies/Cryptographic/inc/TDES/CBC/tdes_cbc.h
code/Libararies/Cryptographic/inc/TDES/Common/tdes_common.h
code/Libararies/Cryptographic/inc/TDES/ECB/tdes_ecb.h
code/Libararies/Cryptographic/inc/TDES/tdes.h
code/Libararies/Cryptographic/inc/config.h
code/Libararies/Cryptographic/inc/crypto.h
code/Libararies/Cryptographic/inc/stm32_crypto_version.h
code/Libararies/Cryptographic/md5.c
code/Libararies/Cryptographic/md5.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/misc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h
code/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h
code/Libararies/STM32F10x_StdPeriph_Driver/src/misc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c
code/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c
code/User/gisunlink.h
code/User/gisunlink_app.c
code/User/gisunlink_app.h
code/User/gisunlink_coms.c
code/User/gisunlink_coms.h
code/User/gisunlink_conf.c
code/User/gisunlink_conf.h
code/User/gisunlink_delay.c
code/User/gisunlink_delay.h
code/User/gisunlink_eeprom.c
code/User/gisunlink_eeprom.h
code/User/gisunlink_energy_metering.c
code/User/gisunlink_energy_metering.h
code/User/gisunlink_gpio.c
code/User/gisunlink_gpio.h
code/User/gisunlink_key.c
code/User/gisunlink_key.h
code/User/gisunlink_lcd.c
code/User/gisunlink_lcd.h
code/User/gisunlink_network_module.c
code/User/gisunlink_network_module.h
code/User/gisunlink_network_task.c
code/User/gisunlink_network_task.h
code/User/gisunlink_system.c
code/User/gisunlink_system.h
code/User/gisunlink_timer.c
code/User/gisunlink_timer.h
code/User/gisunlink_type.h
code/User/gisunlink_updata.c
code/User/gisunlink_updata.h
code/User/gisunlink_usart.c
code/User/gisunlink_usart.h
code/User/lcd/Font.h
code/User/lcd/GUI.c
code/User/lcd/GUI.h
code/User/lcd/LCD_Config.h
code/User/lcd/Lcd_Driver.c
code/User/lcd/Lcd_Driver.h
code/User/lcd/Picture.h
code/User/stm32f10x_conf.h
code/User/stm32f10x_it.c
code/User/stm32f10x_it.h
codeboot/Libararies/CMSIS/core_cm3.c
codeboot/Libararies/CMSIS/core_cm3.h
codeboot/Libararies/CMSIS/stm32f10x.h
codeboot/Libararies/CMSIS/system_stm32f10x.c
codeboot/Libararies/CMSIS/system_stm32f10x.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/misc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/misc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c
codeboot/Libararies/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c
codeboot/User/gisunlink_app.c
codeboot/User/gisunlink_eeprom.c
codeboot/User/gisunlink_eeprom.h
codeboot/User/gisunlink_iap.c
codeboot/User/gisunlink_iap.h
codeboot/User/gisunlink_usart.c
codeboot/User/gisunlink_usart.h
codeboot/User/stm32f10x_conf.h
codeboot/User/stm32f10x_it.c
codeboot/User/stm32f10x_it.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/timex.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
